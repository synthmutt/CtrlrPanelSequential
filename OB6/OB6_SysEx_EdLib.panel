<?xml version="1.0" encoding="UTF-8"?>

<panel name="Oberheim OB-6" panelShowDialogs="1" panelMessageTime="10000"
       panelAuthorName="synthmutt" panelAuthorEmail="" panelAuthorUrl=""
       panelAuthorDesc="SysEx EdLib&#10;version 1.2.0" panelVersionMajor="1"
       panelVersionMinor="2" panelVersionName="" panelVendor="Sequential / Oberheim"
       panelDevice="OB-6" panelMidiSnapshotAfterLoad="0" panelMidiSnapshotAfterProgramChange="0"
       panelMidiSnapshotDelay="10" panelMidiSnapshotShowProgress="0"
       panelMidiInputChannelDevice="1" panelMidiInputDevice="-- None"
       panelMidiControllerChannelDevice="1" panelMidiControllerDevice="-- None"
       panelMidiOutputChannelDevice="1" panelMidiOutputDevice="-- None"
       panelMidiInputFromHost="0" panelMidiInputChannelHost="1" panelMidiOutputToHost="0"
       panelMidiOutputChannelHost="1" panelMidiThruH2H="0" panelMidiThruH2HChannelize="0"
       panelMidiThruH2D="0" panelMidiThruH2DChannelize="0" panelMidiThruD2D="0"
       panelMidiThruD2DChannelize="0" panelMidiThruD2H="0" panelMidiThruD2HChannelize="0"
       panelMidiRealtimeIgnore="1" panelMidiInputThreadPriority="7"
       panelMidiProgram="0" panelMidiBankLsb="0" panelMidiBankMsb="0"
       panelMidiSendProgramChangeOnLoad="0" panelMidiProgramCalloutOnprogramChange="0"
       panelMidiMatchCacheSize="32" panelMidiGlobalDelay="0" panelMidiPauseOut="0"
       panelMidiPauseIn="0" panelOSCEnabled="0" panelOSCPort="-1" panelOSCProtocol="0"
       luaPanelMidiChannelChanged="-- None" luaPanelMidiReceived="newMidiMessage"
       luaPanelMidiMultiReceived="-- None" luaPanelLoaded="panelLoaded"
       luaPanelBeforeLoad="panelBeforeAnyModulators" luaPanelSaved="-- None"
       luaPanelResourcesLoaded="-- None" luaPanelProgramChanged="-- None"
       luaPanelGlobalChanged="-- None" luaPanelMessageHandler="-- None"
       luaPanelModulatorValueChanged="-- None" luaPanelSaveState="saveStateData"
       luaPanelRestoreState="-- None" luaPanelMidiSnapshotPost="-- None"
       luaPanelMidiSnapshotPre="-- None" luaAudioProcessBlock="-- None"
       luaPanelOSCReceived="-- None" panelFilePath="/Users/km/Documents/ctrlr panels/OB6_SysEx_EdLib.panel"
       panelUID="8.oBZ2A1Vbz+D" panelInstanceUID="5PN2" panelInstanceManufacturerID="qmWq"
       panelModulatorListColumns="-- None" panelModulatorListCsvDelimiter=","
       panelModulatorListXmlRoot="ctrlrModulatorList" panelModulatorListXmlModulator="ctrlrModulator"
       panelModulatorListSortOption="1" panelGlobalVariables="0:0:-1:-1:0:0:0:-1:0:-1:-1:0:-1:0:-1:-1:0:-1:0:-1:-1:0:0:-1:0:0:-1:-1:-1:-1:-1:-1:-1:-1:-1:0:-1:-1:-1:0:0:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:-1:0:0:-1:-1:0"
       panelResources="-- None" panelPropertyDisplayIDs="0" ctrlrMenuItemBackgroundColour="ffffffff"
       ctrlrMenuItemTextColour="ff000000" ctrlrMenuItemHighlightedTextColour="ffffffff"
       ctrlrMenuItemHighlightColour="ff4364ff" ctrlrMenuItemFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
       ctrlrMenuItemSeparatorColour="44000000" ctrlrMenuItemHeaderColour="ff000000"
       ctrlrMenuBarBackgroundColour1="fff7f7f7" ctrlrMenuBarBackgroundColour2="ffcccccc"
       ctrlrMenuBarTextColour="ff000000" ctrlrMenuBarHighlightedTextColour="ffffffff"
       ctrlrMenuBarHighlightColour="ff4364ff" ctrlrMenuBarFont="&lt;Sans-Serif&gt;;18;0;0;0;0;1;3"
       ctrlrUseEditorWrapper="0" panelIndex="0" uiPanelModulatorListViewTree="0"
       uiLuaConsoleSnips="setupSynthData()$setupPanelComponents()$setupAfterChanges()"
       ZZCustomSaveStateEditBuffer1="18 18 8d 00 83 93 7a 7f 7f 00 00 00 01 00 0e 00 00 02 01 b6 00 02 00 00 00 00 00 72 08 a9 00 7f 00 00 00 00 00 3a 32 00 7f 3d 2d 00 03 0a 00 00 25 17 11 01 37 7e 00 01 07 04 00 88 00 00 00 00 01 01 00 00 00 00 9c 00 00 00 00 00 01 7f a0 00 00 00 00 00 00 06 05 69 00 03 01 00 03 00 00 00 00 00 03 07 0a 7f 7f 00 00 00 05 69 6e 69 74 20 70 72 6f 67 72 61 6d 20 20 20 20 20 20 20 20 3c 28 2f 34 3b 40 47 4c 53 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c e7 e5 e9 e3 e9 e3 e1 df 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c 00 01 00 00 02 01 00 00 01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff 00 ff ff 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff"
       ZZCustomSaveStateEditBuffer2="18 18 8d 00 83 93 7a 7f 7f 00 00 00 01 00 0e 00 00 02 01 b6 00 02 00 00 00 00 00 72 08 a9 00 7f 00 00 00 00 00 3a 32 00 7f 3d 2d 00 03 0a 00 00 25 17 11 01 37 7e 00 01 07 04 00 88 00 00 00 00 01 01 00 00 00 00 9c 00 00 00 00 00 01 7f a0 00 00 00 00 00 00 06 05 69 00 03 01 00 03 00 00 00 00 00 03 07 0a 7f 7f 00 00 00 05 69 6e 69 74 20 70 72 6f 67 72 61 6d 20 20 20 20 20 20 20 20 3c 28 2f 34 3b 40 47 4c 53 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c e7 e5 e9 e3 e9 e3 e1 df 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c 00 01 00 00 02 01 00 00 01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff 00 ff ff 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff"
       ZZCustomSaveStateEditBuffer3="18 18 8d 00 83 93 7a 7f 7f 00 00 00 01 00 0e 00 00 02 01 b6 00 02 00 00 00 00 00 72 08 a9 00 7f 00 00 00 00 00 3a 32 00 7f 3d 2d 00 03 0a 00 00 25 17 11 01 37 7e 00 01 07 04 00 88 00 00 00 00 01 01 00 00 00 00 9c 00 00 00 00 00 01 7f a0 00 00 00 00 00 00 06 05 69 00 03 01 00 03 00 00 00 00 00 03 07 0a 7f 7f 00 00 00 05 69 6e 69 74 20 70 72 6f 67 72 61 6d 20 20 20 20 20 20 20 20 3c 28 2f 34 3b 40 47 4c 53 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c e7 e5 e9 e3 e9 e3 e1 df 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c 00 01 00 00 02 01 00 00 01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff 00 ff ff 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff"
       ZZCustomSaveStateEditBuffer4="18 18 8d 00 83 93 7a 7f 7f 00 00 00 01 00 0e 00 00 02 01 b6 00 02 00 00 00 00 00 72 08 a9 00 7f 00 00 00 00 00 3a 32 00 7f 3d 2d 00 03 0a 00 00 25 17 11 01 37 7e 00 01 07 04 00 88 00 00 00 00 01 01 00 00 00 00 9c 00 00 00 00 00 01 7f a0 00 00 00 00 00 00 06 05 69 00 03 01 00 03 00 00 00 00 00 03 07 0a 7f 7f 00 00 00 05 69 6e 69 74 20 70 72 6f 67 72 61 6d 20 20 20 20 20 20 20 20 3c 28 2f 34 3b 40 47 4c 53 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c e7 e5 e9 e3 e9 e3 e1 df 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c 00 01 00 00 02 01 00 00 01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff 00 ff ff 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff"
       ZZCustomSaveStateColorLastChosen="lblColorButtonOff" ZZCustomInitProgram="18 18 8d 00 83 93 7a 7f 7f 00 00 00 01 00 0e 00 00 02 01 b6 00 02 00 00 00 00 00 72 08 a9 00 7f 00 00 00 00 00 3a 32 00 7f 3d 2d 00 03 0a 00 00 25 17 11 01 37 7e 00 01 07 04 00 88 00 00 00 00 01 01 00 00 00 00 9c 00 00 00 00 00 01 7f a0 00 00 00 00 00 00 06 05 69 00 03 01 00 03 00 00 00 00 00 03 07 0a 7f 7f 00 00 00 05 69 6e 69 74 20 70 72 6f 67 72 61 6d 20 20 20 20 20 20 20 20 3c 28 2f 34 3b 40 47 4c 53 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c e7 e5 e9 e3 e9 e3 e1 df 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0c 00 01 00 00 02 01 00 00 01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff 00 ff ff 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff"
       ZZCustomSaveStateUser1ColorScheme="FFB0C0FF|FF6068B0|FFFF5000|FF404050|FF101010|FFFFFFFF"
       ZZCustomSaveStateUser2ColorScheme="FF80FFFF|FF60C0C0|FFA0FFFF|FF306060|A0101010|FF000000"
       ZZCustomPanelDebug="0" ZZCustomBank1Path="" ZZCustomBank2Path=""
       ZZCustomBank3Path="" ZZCustomBank4Path="" ZZCustomBank5Path=""
       ZZCustomBank6Path="" ZZCustomBank7Path="" ZZCustomBank8Path=""
       ZZCustomBank9Path="" ZZCustomBank10Path="" ZZCustomBank11Path=""
       ZZCustomBank12Path="">
  <uiWindowManager>
    <uiChildWindow uiChildWindowName="LuaConsole" uiChildWindowState="3183 864 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LuaMethodEditor" uiChildWindowState="2770 53 1215 776">
      <uiChildWindowContentState luaMethodEditor="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;OPEN id=&quot;LUA&quot; scrollPos=&quot;0&quot;&gt;&#13;&#10;  &lt;OPEN id=&quot;UserInterface&quot;&gt;&#13;&#10;    &lt;OPEN id=&quot;Bank&quot;/&gt;&#13;&#10;  &lt;/OPEN&gt;&#13;&#10;  &lt;OPEN id=&quot;PresetData&quot;/&gt;&#13;&#10;  &lt;SELECTED id=&quot;/LUA/UserInterface/Bank/searchValueChanged&quot;/&gt;&#13;&#10;&lt;/OPEN&gt;&#13;&#10;;9404ab852a0c4d4495ab81e29e32e0f7:b47942c34d1c4157a7f397425a83c5ae:fecaeb18e52e4052a6db9656e2d887a1:899a6e517e1f4ed08f70be51bab6b4b8"/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="ModulatorList" uiChildWindowState="2305 866 877 499">
      <uiChildWindowContentState/>
    </uiChildWindow>
    <uiChildWindow uiChildWindowName="LayerEditor" uiChildWindowState="1553 862 800 500">
      <uiChildWindowContentState/>
    </uiChildWindow>
  </uiWindowManager>
  <midiLibrary uuid="55512aa628de43e9a626a71c66ff6c42" luaTransInfo="-- None"
               midiLibraryParameterIndexProperty="modulatorCustomIndex" midiLibraryMidiProgramChangeControl="0"
               midiLibrarySendSnapAfterPChg="0" midiLibraryDefaultBankName="New Bank - %H:%M:%S"
               midiLibraryDefaultProgramName="New Program - %H:%M:%S" midiLibraryDefaultSnapshotName="Snapshot - %H:%M:%S"
               midiLibraryCustomRequests="">
    <midiLibrarySnapshots name="Snapshots"/>
    <midiLibraryFirmware name="Firmware"/>
    <midiLibraryEditBuffer name="Edit buffer"/>
    <midiLibraryTransactions name="Transactions"/>
  </midiLibrary>
  <luaManager>
    <luaManagerMethods>
      <luaMethodGroup name="Built-In" uuid="d15eaf44fd3a46b998a793df658b95b3">
        <luaMethod luaMethodName="table_dump" luaMethodCode="-- @1.1&#10;--&#10;-- Print table contents&#10;--&#10;function table_dump(table)&#10;&#9;for key,value in ipairs(table) do&#10;&#9;&#9;_DBG (&quot;KEY= [&quot;..key..&quot;]&quot;)&#10;&#10;&#9;&#9;if (type(value) == &quot;table&quot;) then&#10;&#9;&#9;&#9;table_dump(value)&#10;&#9;&#9;elseif (type(value) == &quot;nil&quot;) then&#10;&#9;&#9;&#9;_DBG (&quot; = NIL&quot;)&#10;&#9;&#9;else&#10;&#9;&#9;&#9;what (value)&#10;&#9;&#9;end&#10;&#9;end&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000001"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="what" luaMethodCode="-- @1.1&#10;--&#10;-- Print methods for an object&#10;--&#10;function what(o)&#10;&#9;info = class_info(o)&#10;&#9;if info ~= nil then&#10;&#9;&#9;ret = &quot;Object type [&quot; .. info.name .. &quot;]\n-----------------------------------------------------------------\n\n&quot;..&quot;Members:\n&quot;&#10;&#10;&#9;&#9;if info.name == &quot;table&quot; then&#10;&#9;&#9;&#9;table_dump(o)&#10;&#9;&#9;end&#10;&#10;&#9;&#9;for k, v in pairs(info.methods) do&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#10;&#9;&#9;end&#10;&#9;&#9;ret = ret .. &quot;\n\nAttributes:\n&quot;&#10;&#9;&#9;for k, v in pairs(info.attributes) do&#10;&#9;&#9;&#9;ret = ret .. string.format (&quot;\t%30s:\t%5s\n&quot;, k, type(v))&#10;&#9;&#9;end&#10;&#9;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;end&#10;&#10;&#9;console (ret)&#10;&#9;return ret&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000002"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="how" luaMethodCode="-- @1.1&#10;--&#10;-- Print all available classes&#10;--&#10;function how()&#10;&#9;ret = &quot;Available classes:\n&quot;&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;for i,v in ipairs(class_names()) do&#10;&#9;&#9;ret = ret .. &quot;\t&quot;.. v .. &quot;\n&quot;&#10;&#9;end&#10;&#9;ret = ret .. &quot;\n-----------------------------------------------------------------&quot;&#10;&#9;console (J(ret))&#10;&#9;return ret&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000003"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="json4lua" luaMethodCode="-----------------------------------------------------------------------------&#13;&#10;-- JSON4Lua: JSON encoding / decoding support for the Lua language.&#13;&#10;-- json Module.&#13;&#10;-- Author: Craig Mason-Jones&#13;&#10;-- Homepage: http://json.luaforge.net/&#13;&#10;-- Version: 0.9.40&#13;&#10;-- This module is released under the MIT License (MIT).&#13;&#10;-- Please see LICENCE.txt for details.&#13;&#10;--&#13;&#10;-- USAGE:&#13;&#10;-- This module exposes two functions:&#13;&#10;--   encode(o)&#13;&#10;--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.&#13;&#10;--   decode(json_string)&#13;&#10;--     Returns a Lua object populated with the data encoded in the JSON string json_string.&#13;&#10;--&#13;&#10;-- REQUIREMENTS:&#13;&#10;--   compat-5.1 if using Lua 5.0&#13;&#10;--&#13;&#10;-- CHANGELOG&#13;&#10;--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix). &#13;&#10;--          Fixed Lua 5.1 compatibility issues.&#13;&#10;--   &#9;&#9;Introduced json.null to have null values in associative arrays.&#13;&#10;--          encode() performance improvement (more than 50%) through table.concat rather than ..&#13;&#10;--          Introduced decode ability to ignore /**/ comments in the JSON string.&#13;&#10;--   0.9.10 Fix to array encoding / decoding to correctly manage nil/null values in arrays.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Imports and dependencies&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;local math = require('math')&#13;&#10;local string = require(&quot;string&quot;)&#13;&#10;local table = require(&quot;table&quot;)&#13;&#10;&#13;&#10;local base = _G&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Module declaration&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;module(&quot;json&quot;)&#13;&#10;&#13;&#10;-- Public functions&#13;&#10;&#13;&#10;-- Private functions&#13;&#10;local decode_scanArray&#13;&#10;local decode_scanComment&#13;&#10;local decode_scanConstant&#13;&#10;local decode_scanNumber&#13;&#10;local decode_scanObject&#13;&#10;local decode_scanString&#13;&#10;local decode_scanWhitespace&#13;&#10;local encodeString&#13;&#10;local isArray&#13;&#10;local isEncodable&#13;&#10;&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- PUBLIC FUNCTIONS&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;--- Encodes an arbitrary Lua object / variable.&#13;&#10;-- @param v The Lua object / variable to be JSON encoded.&#13;&#10;-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)&#13;&#10;function encode (v)&#13;&#10;  -- Handle nil values&#13;&#10;  if v==nil then&#13;&#10;    return &quot;null&quot;&#13;&#10;  end&#13;&#10;  &#13;&#10;  local vtype = base.type(v)  &#13;&#10;&#13;&#10;  -- Handle strings&#13;&#10;  if vtype=='string' then    &#13;&#10;    return '&quot;' .. encodeString(v) .. '&quot;'&#9;    -- Need to handle encoding in string&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle booleans&#13;&#10;  if vtype=='number' or vtype=='boolean' then&#13;&#10;    return base.tostring(v)&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle tables&#13;&#10;  if vtype=='table' then&#13;&#10;    local rval = {}&#13;&#10;    -- Consider arrays separately&#13;&#10;    local bArray, maxCount = isArray(v)&#13;&#10;    if bArray then&#13;&#10;      for i = 1,maxCount do&#13;&#10;        table.insert(rval, encode(v[i]))&#13;&#10;      end&#13;&#10;    else&#9;-- An object, not an array&#13;&#10;      for i,j in base.pairs(v) do&#13;&#10;        if isEncodable(i) and isEncodable(j) then&#13;&#10;          table.insert(rval, '&quot;' .. encodeString(i) .. '&quot;:' .. encode(j))&#13;&#10;        end&#13;&#10;      end&#13;&#10;    end&#13;&#10;    if bArray then&#13;&#10;      return '[' .. table.concat(rval,',') ..']'&#13;&#10;    else&#13;&#10;      return '{' .. table.concat(rval,',') .. '}'&#13;&#10;    end&#13;&#10;  end&#13;&#10;  &#13;&#10;  -- Handle null values&#13;&#10;  if vtype=='function' and v==null then&#13;&#10;    return 'null'&#13;&#10;  end&#13;&#10;  &#13;&#10;  base.assert(false,'encode attempt to encode unsupported type ' .. vtype .. ':' .. base.tostring(v))&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.&#13;&#10;-- @param s The string to scan.&#13;&#10;-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.&#13;&#10;-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,&#13;&#10;-- and the position of the first character after&#13;&#10;-- the scanned JSON object.&#13;&#10;function decode(s, startPos)&#13;&#10;  startPos = startPos and startPos or 1&#13;&#10;  startPos = decode_scanWhitespace(s,startPos)&#13;&#10;  base.assert(startPos&lt;=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')&#13;&#10;  local curChar = string.sub(s,startPos,startPos)&#13;&#10;  -- Object&#13;&#10;  if curChar=='{' then&#13;&#10;    return decode_scanObject(s,startPos)&#13;&#10;  end&#13;&#10;  -- Array&#13;&#10;  if curChar=='[' then&#13;&#10;    return decode_scanArray(s,startPos)&#13;&#10;  end&#13;&#10;  -- Number&#13;&#10;  if string.find(&quot;+-0123456789.e&quot;, curChar, 1, true) then&#13;&#10;    return decode_scanNumber(s,startPos)&#13;&#10;  end&#13;&#10;  -- String&#13;&#10;  if curChar==[[&quot;]] or curChar==[[']] then&#13;&#10;    return decode_scanString(s,startPos)&#13;&#10;  end&#13;&#10;  if string.sub(s,startPos,startPos+1)=='/*' then&#13;&#10;    return decode(s, decode_scanComment(s,startPos))&#13;&#10;  end&#13;&#10;  -- Otherwise, it must be a constant&#13;&#10;  return decode_scanConstant(s,startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- The null function allows one to specify a null value in an associative array (which is otherwise&#13;&#10;-- discarded if you set the value with 'nil' in Lua. Simply set t = { first=json.null }&#13;&#10;function null()&#13;&#10;  return null -- so json.null() will also return null ;-)&#13;&#10;end&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;-- Internal, PRIVATE functions.&#13;&#10;-- Following a Python-like convention, I have prefixed all these 'PRIVATE'&#13;&#10;-- functions with an underscore.&#13;&#10;-----------------------------------------------------------------------------&#13;&#10;&#13;&#10;--- Scans an array from JSON into a Lua object&#13;&#10;-- startPos begins at the start of the array.&#13;&#10;-- Returns the array and the next starting position&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position for the scan.&#13;&#10;-- @return table, int The scanned array as a table, and the position of the next character to scan.&#13;&#10;function decode_scanArray(s,startPos)&#13;&#10;  local array = {}&#9;-- The return value&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\n'..s )&#13;&#10;  startPos = startPos + 1&#13;&#10;  -- Infinite loop for array elements&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen,'JSON String ended unexpectedly scanning array.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar==']') then&#13;&#10;      return array, startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON String ended unexpectedly scanning array.')&#13;&#10;    object, startPos = decode(s,startPos)&#13;&#10;    table.insert(array,object)&#13;&#10;  until false&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a comment and discards the comment.&#13;&#10;-- Returns the position of the next character following the comment.&#13;&#10;-- @param string s The JSON string to scan.&#13;&#10;-- @param int startPos The starting position of the comment&#13;&#10;function decode_scanComment(s, startPos)&#13;&#10;  base.assert( string.sub(s,startPos,startPos+1)=='/*', &quot;decode_scanComment called but comment does not start at position &quot; .. startPos)&#13;&#10;  local endPos = string.find(s,'*/',startPos+2)&#13;&#10;  base.assert(endPos~=nil, &quot;Unterminated comment in string at &quot; .. startPos)&#13;&#10;  return endPos+2  &#13;&#10;end&#13;&#10;&#13;&#10;--- Scans for given constants: true, false or null&#13;&#10;-- Returns the appropriate Lua type, and the position of the next character to read.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position in the string at which to start scanning.&#13;&#10;-- @return object, int The object (true, false or nil) and the position at which the next character should be &#13;&#10;-- scanned.&#13;&#10;function decode_scanConstant(s, startPos)&#13;&#10;  local consts = { [&quot;true&quot;] = true, [&quot;false&quot;] = false, [&quot;null&quot;] = nil }&#13;&#10;  local constNames = {&quot;true&quot;,&quot;false&quot;,&quot;null&quot;}&#13;&#10;&#13;&#10;  for i,k in base.pairs(constNames) do&#13;&#10;    --print (&quot;[&quot; .. string.sub(s,startPos, startPos + string.len(k) -1) ..&quot;]&quot;, k)&#13;&#10;    if string.sub(s,startPos, startPos + string.len(k) -1 )==k then&#13;&#10;      return consts[k], startPos + string.len(k)&#13;&#10;    end&#13;&#10;  end&#13;&#10;  base.assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a number from the JSON encoded string.&#13;&#10;-- (in fact, also is able to scan numeric +- eqns, which is not&#13;&#10;-- in the JSON spec.)&#13;&#10;-- Returns the number, and the position of the next character&#13;&#10;-- after the number.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The position at which to start scanning.&#13;&#10;-- @return number, int The extracted number and the position of the next character to scan.&#13;&#10;function decode_scanNumber(s,startPos)&#13;&#10;  local endPos = startPos+1&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local acceptableChars = &quot;+-0123456789.e&quot;&#13;&#10;  while (string.find(acceptableChars, string.sub(s,endPos,endPos), 1, true)&#13;&#10;&#9;and endPos&lt;=stringLen&#13;&#10;&#9;) do&#13;&#10;    endPos = endPos + 1&#13;&#10;  end&#13;&#10;  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)&#13;&#10;  local stringEval = base.loadstring(stringValue)&#13;&#10;  base.assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)&#13;&#10;  return stringEval(), endPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON object into a Lua object.&#13;&#10;-- startPos begins at the start of the object.&#13;&#10;-- Returns the object and the next starting position.&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return table, int The scanned object as a table and the position of the next character to scan.&#13;&#10;function decode_scanObject(s,startPos)&#13;&#10;  local object = {}&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  local key, value&#13;&#10;  base.assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\n' .. s)&#13;&#10;  startPos = startPos + 1&#13;&#10;  repeat&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly while scanning object.')&#13;&#10;    local curChar = string.sub(s,startPos,startPos)&#13;&#10;    if (curChar=='}') then&#13;&#10;      return object,startPos+1&#13;&#10;    end&#13;&#10;    if (curChar==',') then&#13;&#10;      startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    end&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly scanning object.')&#13;&#10;    -- Scan the key&#13;&#10;    key, startPos = decode(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    base.assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)&#13;&#10;    startPos = decode_scanWhitespace(s,startPos+1)&#13;&#10;    base.assert(startPos&lt;=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)&#13;&#10;    value, startPos = decode(s,startPos)&#13;&#10;    object[key]=value&#13;&#10;  until false&#9;-- infinite loop while key-value pairs are found&#13;&#10;end&#13;&#10;&#13;&#10;-- START SoniEx2&#13;&#10;-- Initialize some things used by decode_scanString&#13;&#10;-- You know, for efficiency&#13;&#10;local escapeSequences = {&#13;&#10;  [&quot;\\t&quot;] = &quot;\t&quot;,&#13;&#10;  [&quot;\\f&quot;] = &quot;\f&quot;,&#13;&#10;  [&quot;\\r&quot;] = &quot;\r&quot;,&#13;&#10;  [&quot;\\n&quot;] = &quot;\n&quot;,&#13;&#10;  [&quot;\\b&quot;] = &quot;\b&quot;&#13;&#10;}&#13;&#10;base.setmetatable(escapeSequences, {__index = function(t,k)&#13;&#10;  -- skip &quot;\&quot; aka strip escape&#13;&#10;  return string.sub(k,2)&#13;&#10;end})&#13;&#10;-- END SoniEx2&#13;&#10;&#13;&#10;--- Scans a JSON string from the opening inverted comma or single quote to the&#13;&#10;-- end of the string.&#13;&#10;-- Returns the string extracted as a Lua string,&#13;&#10;-- and the position of the next non-string character&#13;&#10;-- (after the closing inverted comma or single quote).&#13;&#10;-- @param s The string being scanned.&#13;&#10;-- @param startPos The starting position of the scan.&#13;&#10;-- @return string, int The extracted string as a Lua string, and the next character to parse.&#13;&#10;function decode_scanString(s,startPos)&#13;&#10;  base.assert(startPos, 'decode_scanString(..) called without start position')&#13;&#10;  local startChar = string.sub(s,startPos,startPos)&#13;&#10;  -- START SoniEx2&#13;&#10;  -- PS: I don't think single quotes are valid JSON&#13;&#10;  base.assert(startChar == [[&quot;]] or startChar == [[']],'decode_scanString called for a non-string')&#13;&#10;  --base.assert(startPos, &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; for string at position &quot; .. oldStart)&#13;&#10;  local t = {}&#13;&#10;  local i,j = startPos,startPos&#13;&#10;  while string.find(s, startChar, j+1) ~= j+1 do&#13;&#10;    local oldj = j&#13;&#10;    i,j = string.find(s, &quot;\\.&quot;, j+1)&#13;&#10;    local x,y = string.find(s, startChar, oldj+1)&#13;&#10;    if not i or x &lt; i then&#13;&#10;      base.print(s, startPos, string.sub(s,startPos,oldj))&#13;&#10;      i,j = x,y-1&#13;&#10;      if not x then base.print(s, startPos, string.sub(s,startPos,oldj)) end&#13;&#10;    end&#13;&#10;    table.insert(t, string.sub(s, oldj+1, i-1))&#13;&#10;    if string.sub(s, i, j) == &quot;\\u&quot; then&#13;&#10;      local a = string.sub(s,j+1,j+4)&#13;&#10;      j = j + 4&#13;&#10;      local n = base.tonumber(a, 16)&#13;&#10;      base.assert(n, &quot;String decoding failed: bad Unicode escape &quot; .. a .. &quot; at position &quot; .. i .. &quot; : &quot; .. j)&#13;&#10;      -- math.floor(x/2&#94;y) == lazy right shift&#13;&#10;      -- a % 2&#94;b == bitwise_and(a, (2&#94;b)-1)&#13;&#10;      -- 64 = 2&#94;6&#13;&#10;      -- 4096 = 2&#94;12 (or 2&#94;6 * 2&#94;6)&#13;&#10;      local x&#13;&#10;      if n &lt; 0x80 then&#13;&#10;        x = string.char(n % 0x80)&#13;&#10;      elseif n &lt; 0x800 then&#13;&#10;        -- [110x xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xC0 + (math.floor(n/64) % 0x20), 0x80 + (n % 0x40))&#13;&#10;      else&#13;&#10;        -- [1110 xxxx] [10xx xxxx] [10xx xxxx]&#13;&#10;        x = string.char(0xE0 + (math.floor(n/4096) % 0x10), 0x80 + (math.floor(n/64) % 0x40), 0x80 + (n % 0x40))&#13;&#10;      end&#13;&#10;      table.insert(t, x)&#13;&#10;    else&#13;&#10;      table.insert(t, escapeSequences[string.sub(s, i, j)])&#13;&#10;    end&#13;&#10;  end&#13;&#10;  table.insert(t,string.sub(j, j+1))&#13;&#10;  base.assert(string.find(s, startChar, j+1), &quot;String decoding failed: missing closing &quot; .. startChar .. &quot; at position &quot; .. j .. &quot;(for string at position &quot; .. startPos .. &quot;)&quot;)&#13;&#10;  return table.concat(t,&quot;&quot;), j+2&#13;&#10;  -- END SoniEx2&#13;&#10;end&#13;&#10;&#13;&#10;--- Scans a JSON string skipping all whitespace from the current start position.&#13;&#10;-- Returns the position of the first non-whitespace character, or nil if the whole end of string is reached.&#13;&#10;-- @param s The string being scanned&#13;&#10;-- @param startPos The starting position where we should begin removing whitespace.&#13;&#10;-- @return int The first position where non-whitespace was encountered, or string.len(s)+1 if the end of string&#13;&#10;-- was reached.&#13;&#10;function decode_scanWhitespace(s,startPos)&#13;&#10;  local whitespace=&quot; \n\r\t&quot;&#13;&#10;  local stringLen = string.len(s)&#13;&#10;  while ( string.find(whitespace, string.sub(s,startPos,startPos), 1, true)  and startPos &lt;= stringLen) do&#13;&#10;    startPos = startPos + 1&#13;&#10;  end&#13;&#10;  return startPos&#13;&#10;end&#13;&#10;&#13;&#10;--- Encodes a string to be JSON-compatible.&#13;&#10;-- This just involves back-quoting inverted commas, back-quotes and newlines, I think ;-)&#13;&#10;-- @param s The string to return as a JSON encoded (i.e. backquoted string)&#13;&#10;-- @return The string appropriately escaped.&#13;&#10;&#13;&#10;local escapeList = {&#13;&#10;    ['&quot;']  = '\\&quot;',&#13;&#10;    ['\\'] = '\\\\',&#13;&#10;    ['/']  = '\\/', &#13;&#10;    ['\b'] = '\\b',&#13;&#10;    ['\f'] = '\\f',&#13;&#10;    ['\n'] = '\\n',&#13;&#10;    ['\r'] = '\\r',&#13;&#10;    ['\t'] = '\\t'&#13;&#10;}&#13;&#10;&#13;&#10;function encodeString(s)&#13;&#10; return s:gsub(&quot;.&quot;, function(c) return escapeList[c] end) -- SoniEx2: 5.0 compat&#13;&#10;end&#13;&#10;&#13;&#10;-- Determines whether the given Lua type is an array or a table / dictionary.&#13;&#10;-- We consider any table an array if it has indexes 1..n for its n items, and no&#13;&#10;-- other data in the table.&#13;&#10;-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...&#13;&#10;-- @param t The table to evaluate as an array&#13;&#10;-- @return boolean, number True if the table can be represented as an array, false otherwise. If true,&#13;&#10;-- the second returned value is the maximum&#13;&#10;-- number of indexed elements in the array. &#13;&#10;function isArray(t)&#13;&#10;  -- Next we count all the elements, ensuring that any non-indexed elements are not-encodable &#13;&#10;  -- (with the possible exception of 'n')&#13;&#10;  local maxIndex = 0&#13;&#10;  for k,v in base.pairs(t) do&#13;&#10;    if (base.type(k)=='number' and math.floor(k)==k and 1&lt;=k) then&#9;-- k,v is an indexed pair&#13;&#10;      if (not isEncodable(v)) then return false end&#9;-- All array elements must be encodable&#13;&#10;      maxIndex = math.max(maxIndex,k)&#13;&#10;    else&#13;&#10;      if (k=='n') then&#13;&#10;        if v ~= table.getn(t) then return false end  -- False if n does not hold the number of elements&#13;&#10;      else -- Else of (k=='n')&#13;&#10;        if isEncodable(v) then return false end&#13;&#10;      end  -- End of (k~='n')&#13;&#10;    end -- End of k,v not an indexed pair&#13;&#10;  end  -- End of loop across all pairs&#13;&#10;  return true, maxIndex&#13;&#10;end&#13;&#10;&#13;&#10;--- Determines whether the given Lua object / table / variable can be JSON encoded. The only&#13;&#10;-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.&#13;&#10;-- In this implementation, all other types are ignored.&#13;&#10;-- @param o The object to examine.&#13;&#10;-- @return boolean True if the object should be JSON encoded, false if it should be ignored.&#13;&#10;function isEncodable(o)&#13;&#10;  local t = base.type(o)&#13;&#10;  return (t=='string' or t=='boolean' or t=='number' or t=='nil' or t=='table') or (t=='function' and o==null) &#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000004"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="debugger.lua" luaMethodCode="--{{{  history&#10;&#10;--15/03/06 DCN Created based on RemDebug&#10;--28/04/06 DCN Update for Lua 5.1&#10;--01/06/06 DCN Fix command argument parsing&#10;--             Add step/over N facility&#10;--             Add trace lines facility&#10;--05/06/06 DCN Add trace call/return facility&#10;--06/06/06 DCN Make it behave when stepping through the creation of a coroutine&#10;--06/06/06 DCN Integrate the simple debugger into the main one&#10;--07/06/06 DCN Provide facility to step into coroutines&#10;--13/06/06 DCN Fix bug that caused the function environment to get corrupted with the global one&#10;--14/06/06 DCN Allow 'sloppy' file names when setting breakpoints&#10;--04/08/06 DCN Allow for no space after command name&#10;--11/08/06 DCN Use io.write not print&#10;--30/08/06 DCN Allow access to array elements in 'dump'&#10;--10/10/06 DCN Default to breakfile for all commands that require a filename and give '-'&#10;--06/12/06 DCN Allow for punctuation characters in DUMP variable names&#10;--03/01/07 DCN Add pause on/off facility&#10;--19/06/07 DCN Allow for duff commands being typed in the debugger (thanks to Michael.Bringmann@lsi.com)&#10;--             Allow for case sensitive file systems               (thanks to Michael.Bringmann@lsi.com)&#10;--04/08/09 DCN Add optional line count param to pause&#10;--05/08/09 DCN Reset the debug hook in Pause() even if we think we're started&#10;--30/09/09 DCN Re-jig to not use co-routines (makes debugging co-routines awkward)&#10;--01/10/09 DCN Add ability to break on reaching any line in a file&#10;--24/07/13 TWW Added code for emulating setfenv/getfenv in Lua 5.2 as per&#10;--             http://lua-users.org/lists/lua-l/2010-06/msg00313.html&#10;--25/07/13 TWW Copied Alex Parrill's fix for errors when tracing back across a C frame&#10;--             (https://github.com/ColonelThirtyTwo/clidebugger, 26/01/12)&#10;--25/07/13 DCN Allow for windows and unix file name conventions in has_breakpoint&#10;--26/07/13 DCN Allow for \ being interpreted as an escape inside a [] pattern in 5.2&#10;&#10;--}}}&#10;--{{{  description&#10;&#10;--A simple command line debug system for Lua written by Dave Nichols of&#10;--Match-IT Limited. Its public domain software. Do with it as you wish.&#10;&#10;--This debugger was inspired by:&#10;-- RemDebug 1.0 Beta&#10;-- Copyright Kepler Project 2005 (http://www.keplerproject.org/remdebug)&#10;&#10;--Usage:&#10;--  require('debugger')        --load the debug library&#10;--  pause(message)             --start/resume a debug session&#10;&#10;--An assert() failure will also invoke the debugger.&#10;&#10;--}}}&#10;&#10;local IsWindows = string.find(string.lower(os.getenv('OS') or ''),'&#94;windows')&#10;&#10;local coro_debugger&#10;local events = { BREAK = 1, WATCH = 2, STEP = 3, SET = 4 }&#10;breakpoints = {}&#10;local watches = {}&#10;local step_into   = false&#10;local step_over   = false&#10;local step_lines  = 0&#10;local step_level  = {main=0}&#10;local stack_level = {main=0}&#10;local trace_level = {main=0}&#10;local trace_calls = false&#10;local trace_returns = false&#10;local trace_lines = false&#10;local ret_file, ret_line, ret_name&#10;local current_thread = 'main'&#10;local started = false&#10;local pause_off = false&#10;local _g      = _G&#10;local cocreate, cowrap = coroutine.create, coroutine.wrap&#10;local pausemsg = 'pause'&#10;&#10;--{{{  make Lua 5.2 compatible&#10;&#10;if not setfenv then -- Lua 5.2&#10;  --[[&#10;  As far as I can see, the only missing detail of these functions (except&#10;  for occasional bugs) to achieve 100% compatibility is the case of&#10;  'getfenv' over a function that does not have an _ENV variable (that is,&#10;  it uses no globals).&#10;&#10;  We could use a weak table to keep the environments of these functions&#10;  when set by setfenv, but that still misses the case of a function&#10;  without _ENV that was not subjected to setfenv.&#10;&#10;  -- Roberto&#10;  ]]--&#10;&#10;  setfenv = setfenv or function(f, t)&#10;    f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)&#10;    local name&#10;    local up = 0&#10;    repeat&#10;      up = up + 1&#10;      name = debug.getupvalue(f, up)&#10;    until name == '_ENV' or name == nil&#10;    if name then&#10;      debug.upvaluejoin(f, up, function() return name end, 1) -- use unique upvalue&#10;      debug.setupvalue(f, up, t)&#10;    end&#10;  end&#10;&#10;  getfenv = getfenv or function(f)&#10;    f = (type(f) == 'function' and f or debug.getinfo(f + 1, 'f').func)&#10;    local name, val&#10;    local up = 0&#10;    repeat&#10;      up = up + 1&#10;      name, val = debug.getupvalue(f, up)&#10;    until name == '_ENV' or name == nil&#10;    return val&#10;  end&#10;&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  local hints -- command help&#10;--The format in here is name=summary|description&#10;local hints = {&#10;&#10;pause =   [[&#10;pause(msg[,lines][,force]) -- start/resume a debugger session|&#10;&#10;This can only be used in your code or from the console as a means to&#10;start/resume a debug session.&#10;If msg is given that is shown when the session starts/resumes. Useful to&#10;give a context if you've instrumented your code with pause() statements.&#10;&#10;If lines is given, the script pauses after that many lines, else it pauses&#10;immediately.&#10;&#10;If force is true, the pause function is honoured even if poff has been used.&#10;This is useful when in an interactive console session to regain debugger&#10;control.&#10;]],&#10;&#10;poff =    [[&#10;poff                -- turn off pause() command|&#10;&#10;This causes all pause() commands to be ignored. This is useful if you have&#10;instrumented your code in a busy loop and want to continue normal execution&#10;with no further interruption.&#10;]],&#10;&#10;pon =     [[&#10;pon                 -- turn on pause() command|&#10;&#10;This re-instates honouring the pause() commands you may have instrumented&#10;your code with.&#10;]],&#10;&#10;setb =    [[&#10;setb [line file]    -- set a breakpoint to line/file|, line 0 means 'any'&#10;&#10;If file is omitted or is &quot;-&quot; the breakpoint is set at the file for the&#10;currently set level (see &quot;set&quot;). Execution pauses when this line is about&#10;to be executed and the debugger session is re-activated.&#10;&#10;The file can be given as the fully qualified name, partially qualified or&#10;just the file name. E.g. if file is set as &quot;myfile.lua&quot;, then whenever&#10;execution reaches any file that ends with &quot;myfile.lua&quot; it will pause. If&#10;no extension is given, any extension will do.&#10;&#10;If the line is given as 0, then reaching any line in the file will do.&#10;]],&#10;&#10;delb =    [[&#10;delb [line file]    -- removes a breakpoint|&#10;&#10;If file is omitted or is &quot;-&quot; the breakpoint is removed for the file of the&#10;currently set level (see &quot;set&quot;).&#10;]],&#10;&#10;delallb = [[&#10;delallb             -- removes all breakpoints|&#10;]],&#10;&#10;setw =    [[&#10;setw &lt;exp&gt;          -- adds a new watch expression|&#10;&#10;The expression is evaluated before each line is executed. If the expression&#10;yields true then execution is paused and the debugger session re-activated.&#10;The expression is executed in the context of the line about to be executed.&#10;]],&#10;&#10;delw =    [[&#10;delw &lt;index&gt;        -- removes the watch expression at index|&#10;&#10;The index is that returned when the watch expression was set by setw.&#10;]],&#10;&#10;delallw = [[&#10;delallw             -- removes all watch expressions|&#10;]],&#10;&#10;run     = [[&#10;run                 -- run until next breakpoint or watch expression|&#10;]],&#10;&#10;step    = [[&#10;step [N]            -- run next N lines, stepping into function calls|&#10;&#10;If N is omitted, use 1.&#10;]],&#10;&#10;over    = [[&#10;over [N]            -- run next N lines, stepping over function calls|&#10;&#10;If N is omitted, use 1.&#10;]],&#10;&#10;out     = [[&#10;out [N]             -- run lines until stepped out of N functions|&#10;&#10;If N is omitted, use 1.&#10;If you are inside a function, using &quot;out 1&quot; will run until you return&#10;from that function to the caller.&#10;]],&#10;&#10;gotoo   = [[&#10;gotoo [line file]    -- step to line in file|&#10;&#10;This is equivalent to 'setb line file', followed by 'run', followed&#10;by 'delb line file'.&#10;]],&#10;&#10;listb   = [[&#10;listb               -- lists breakpoints|&#10;]],&#10;&#10;listw   = [[&#10;listw               -- lists watch expressions|&#10;]],&#10;&#10;set     = [[&#10;set [level]         -- set context to stack level, omitted=show|&#10;&#10;If level is omitted it just prints the current level set.&#10;This sets the current context to the level given. This affects the&#10;context used for several other functions (e.g. vars). The possible&#10;levels are those shown by trace.&#10;]],&#10;&#10;vars    = [[&#10;vars [depth]        -- list context locals to depth, omitted=1|&#10;&#10;If depth is omitted then uses 1.&#10;Use a depth of 0 for the maximum.&#10;Lists all non-nil local variables and all non-nil upvalues in the&#10;currently set context. For variables that are tables, lists all fields&#10;to the given depth.&#10;]],&#10;&#10;fenv    = [[&#10;fenv [depth]        -- list context function env to depth, omitted=1|&#10;&#10;If depth is omitted then uses 1.&#10;Use a depth of 0 for the maximum.&#10;Lists all function environment variables in the currently set context.&#10;For variables that are tables, lists all fields to the given depth.&#10;]],&#10;&#10;glob    = [[&#10;glob [depth]        -- list globals to depth, omitted=1|&#10;&#10;If depth is omitted then uses 1.&#10;Use a depth of 0 for the maximum.&#10;Lists all global variables.&#10;For variables that are tables, lists all fields to the given depth.&#10;]],&#10;&#10;ups     = [[&#10;ups                 -- list all the upvalue names|&#10;&#10;These names will also be in the &quot;vars&quot; list unless their value is nil.&#10;This provides a means to identify which vars are upvalues and which are&#10;locals. If a name is both an upvalue and a local, the local value takes&#10;precedance.&#10;]],&#10;&#10;locs    = [[&#10;locs                -- list all the locals names|&#10;&#10;These names will also be in the &quot;vars&quot; list unless their value is nil.&#10;This provides a means to identify which vars are upvalues and which are&#10;locals. If a name is both an upvalue and a local, the local value takes&#10;precedance.&#10;]],&#10;&#10;dump    = [[&#10;dump &lt;var&gt; [depth]  -- dump all fields of variable to depth|&#10;&#10;If depth is omitted then uses 1.&#10;Use a depth of 0 for the maximum.&#10;Prints the value of &lt;var&gt; in the currently set context level. If &lt;var&gt;&#10;is a table, lists all fields to the given depth. &lt;var&gt; can be just a&#10;name, or name.field or name.# to any depth, e.g. t.1.f accesses field&#10;'f' in array element 1 in table 't'.&#10;&#10;Can also be called from a script as dump(var,depth).&#10;]],&#10;&#10;tron    = [[&#10;tron [crl]          -- turn trace on for (c)alls, (r)etuns, (l)lines|&#10;&#10;If no parameter is given then tracing is turned off.&#10;When tracing is turned on a line is printed to the console for each&#10;debug 'event' selected. c=function calls, r=function returns, l=lines.&#10;]],&#10;&#10;trace   = [[&#10;trace               -- dumps a stack trace|&#10;&#10;Format is [level] = file,line,name&#10;The level is a candidate for use by the 'set' command.&#10;]],&#10;&#10;info    = [[&#10;info                -- dumps the complete debug info captured|&#10;&#10;Only useful as a diagnostic aid for the debugger itself. This information&#10;can be HUGE as it dumps all variables to the maximum depth, so be careful.&#10;]],&#10;&#10;show    = [[&#10;show line file X Y  -- show X lines before and Y after line in file|&#10;&#10;If line is omitted or is '-' then the current set context line is used.&#10;If file is omitted or is '-' then the current set context file is used.&#10;If file is not fully qualified and cannot be opened as specified, then&#10;a search for the file in the package[path] is performed using the usual&#10;&quot;require&quot; searching rules. If no file extension is given, .lua is used.&#10;Prints the lines from the source file around the given line.&#10;]],&#10;&#10;exit    = [[&#10;exit                -- exits debugger, re-start it using pause()|&#10;]],&#10;&#10;help    = [[&#10;help [command]      -- show this list or help for command|&#10;]],&#10;&#10;[&quot;&lt;statement&gt;&quot;] = [[&#10;&lt;statement&gt;         -- execute a statement in the current context|&#10;&#10;The statement can be anything that is legal in the context, including&#10;assignments. Such assignments affect the context and will be in force&#10;immediately. Any results returned are printed. Use '=' as a short-hand&#10;for 'return', e.g. &quot;=func(arg)&quot; will call 'func' with 'arg' and print&#10;the results, and &quot;=var&quot; will just print the value of 'var'.&#10;]],&#10;&#10;what    = [[&#10;what &lt;func&gt;         -- show where &lt;func&gt; is defined (if known)|&#10;]],&#10;&#10;}&#10;--}}}&#10;&#10;--{{{ Local function to get table size&#10;local function tsize(t)&#10;    local count=0&#10;&#10;    for k,v in pairs(t) do&#10;        count = count + 1&#10;    end&#10;&#10;    return count&#10;end&#10;---}}}&#10;&#10;---{{{ Global utility function to set breakpoints, used inside Ctrlr&#10;function setBreakpoint(line, file, shouldBeSet)&#10;    if not breakpoints[line] then&#10;        breakpoints[line] = {}&#10;    end&#10;&#10;    if shouldBeSet then&#10;        breakpoints[line][file] = true&#10;    else&#10;        breakpoints[line] = nil&#10;    end&#10;end&#10;---}}}&#10;&#10;&#10;--{{{  local function getinfo(level,field)&#10;&#10;--like debug.getinfo but copes with no activation record at the given level&#10;--and knows how to get 'field'. 'field' can be the name of any of the&#10;--activation record fields or any of the 'what' names or nil for everything.&#10;--only valid when using the stack level to get info, not a function name.&#10;&#10;local function getinfo(level,field)&#10;  level = level + 1  --to get to the same relative level as the caller&#10;  if not field then return debug.getinfo(level) end&#10;  local what&#10;  if field == 'name' or field == 'namewhat' then&#10;    what = 'n'&#10;  elseif field == 'what' or field == 'source' or field == 'linedefined' or field == 'lastlinedefined' or field == 'short_src' then&#10;    what = 'S'&#10;  elseif field == 'currentline' then&#10;    what = 'l'&#10;  elseif field == 'nups' then&#10;    what = 'u'&#10;  elseif field == 'func' then&#10;    what = 'f'&#10;  else&#10;    return debug.getinfo(level,field)&#10;  end&#10;  local ar = debug.getinfo(level,what)&#10;  if ar then return ar[field] else return nil end&#10;end&#10;&#10;--}}}&#10;--{{{  local function indented( level, ... )&#10;&#10;local function indented( level, ... )&#10;  ctrlrDebugger:write( string.format (&quot;%s%s\n&quot;, string.rep('  ',level), table.concat({...}) ))&#10;end&#10;&#10;--}}}&#10;--{{{  local function dumpval( level, name, value, limit )&#10;&#10;local dumpvisited&#10;&#10;local function dumpval( level, name, value, limit )&#10;    local index&#10;&#10;    if type(name) == 'number' then&#10;        index = string.format(&quot;%q,&quot;,name)&#10;    elseif type(name) == 'string' and (name == '__VARSLEVEL__' or name == '__ENVIRONMENT__' or name == '__GLOBALS__' or name == '__UPVALUES__' or name == '__LOCALS__') then&#10;        --ignore these, they are debugger generated&#10;        return&#10;    elseif type(name) == 'string' and string.find(name,'&#94;[_%a][_.%w]*$') then&#10;        index = string.format (&quot;%q: &quot;, name);&#10;    else&#10;        index = string.format (&quot;%q,&quot;, tostring(name))&#10;    end&#10;&#10;    if type(value) == 'table' then&#10;        if dumpvisited[value] then&#10;            indented (level, index, string.format(&quot;%q&quot;, dumpvisited[value]))&#10;        else&#10;            dumpvisited[value] = string.format (&quot;\&quot;table\&quot;: \&quot;%d\&quot;,&quot;, tsize (value))&#10;            if (limit or 0) &gt; 0 and level+1 &gt;= limit then&#10;                indented (level, index, string.format (&quot;{%s&quot;, string.gsub(dumpvisited[value], &quot;,&quot;, &quot;},&quot;)))&#10;            else&#10;                indented (level, index, &quot;{\n&quot;, dumpvisited[value])&#10;&#10;                for n,v in pairs(value) do&#10;                    dumpval (level+1, n, v, limit)&#10;                end&#10;&#10;                indented (level, &quot;}&quot;)&#10;            end&#10;        end&#10;    else&#10;        if type(value) == 'string' then&#10;            indented (level, index, string.format(&quot;{\&quot;string\&quot;: %q}&quot;,value), ',')&#10;        end&#10;&#10;        if type(value) == 'userdata' then&#10;            info = class_info (value)&#10;            indented (level, index, string.format (&quot;{\&quot;userdata\&quot;: %q}&quot;, info.name) , ',')&#10;        end&#10;&#10;        if type(value) == 'number' then&#10;            indented (level, index, string.format (&quot;{\&quot;number\&quot;: %q}&quot;,tostring(value)), ',')&#10;        end&#10;    end&#10;end&#10;&#10;--}}}&#10;--{{{  local function dumpvar( value, limit, name )&#10;&#10;local function dumpvar( value, limit, name )&#10;  ctrlrDebugger:write (&quot;\n::start dumpvar\n&quot;)&#10;  dumpvisited = {}&#10;  dumpval( 0, name or tostring(value), value, limit )&#10;  ctrlrDebugger:write (&quot;::end\n&quot;)&#10;end&#10;&#10;--}}}&#10;--{{{  local function show(file,line,before,after)&#10;&#10;--show +/-N lines of a file around line M&#10;&#10;local function show(file,line,before,after)&#10;&#10;  line   = tonumber(line   or 1)&#10;  before = tonumber(before or 10)&#10;  after  = tonumber(after  or before)&#10;&#10;  if not string.find(file,'%.') then file = file..'.lua' end&#10;&#10;  local f = io.open(file,'r')&#10;  if not f then&#10;    --{{{  try to find the file in the path&#10;&#10;    --&#10;    -- looks for a file in the package path&#10;    --&#10;    local path = package.path or LUA_PATH or ''&#10;    for c in string.gmatch (path, &quot;[&#94;;]+&quot;) do&#10;      local c = string.gsub (c, &quot;%?%.lua&quot;, file)&#10;      f = io.open (c,'r')&#10;      if f then&#10;        break&#10;      end&#10;    end&#10;&#10;    --}}}&#10;    if not f then&#10;      ctrlrDebugger:write('Cannot find '..file..'\n')&#10;      return&#10;    end&#10;  end&#10;&#10;  local i = 0&#10;  for l in f:lines() do&#10;    i = i + 1&#10;    if i &gt;= (line-before) then&#10;      if i &gt; (line+after) then break end&#10;      if i == line then&#10;        ctrlrDebugger:write(i..'***\t'..l..'\n')&#10;      else&#10;        ctrlrDebugger:write(i..'\t'..l..'\n')&#10;      end&#10;    end&#10;  end&#10;&#10;  f:close()&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function tracestack(l)&#10;&#10;local function gi( i )&#10;  return function() i=i+1 return debug.getinfo(i),i end&#10;end&#10;&#10;local function gl( level, j )&#10;  return function() j=j+1 return debug.getlocal( level, j ) end&#10;end&#10;&#10;local function gu( func, k )&#10;  return function() k=k+1 return debug.getupvalue( func, k ) end&#10;end&#10;&#10;local  traceinfo&#10;&#10;local function tracestack(l)&#10;  local l = l + 1                        --NB: +1 to get level relative to caller&#10;  traceinfo = {}&#10;  traceinfo.pausemsg = pausemsg&#10;  for ar,i in gi(l) do&#10;    table.insert( traceinfo, ar )&#10;    if ar.what ~= 'C' then&#10;      local names  = {}&#10;      local values = {}&#10;      for n,v in gl(i,0) do&#10;        if string.sub(n,1,1) ~= '(' then   --ignore internal control variables&#10;          table.insert( names, n )&#10;          table.insert( values, v )&#10;        end&#10;      end&#10;      if #names &gt; 0 then&#10;        ar.lnames  = names&#10;        ar.lvalues = values&#10;      end&#10;    end&#10;    if ar.func then&#10;      local names  = {}&#10;      local values = {}&#10;      for n,v in gu(ar.func,0) do&#10;        if string.sub(n,1,1) ~= '(' then   --ignore internal control variables&#10;          table.insert( names, n )&#10;          table.insert( values, v )&#10;        end&#10;      end&#10;      if #names &gt; 0 then&#10;        ar.unames  = names&#10;        ar.uvalues = values&#10;      end&#10;    end&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  local function trace()&#10;&#10;local function trace(set)&#10;  ctrlrDebugger:write (&quot;\n::start trace\n&quot;)&#10;  local mark&#10;  for level,ar in ipairs(traceinfo) do&#10;    if level == set then&#10;      mark = '***'&#10;    else&#10;      mark = ''&#10;    end&#10;    ctrlrDebugger:write('['..level..']'..mark..'\t'..(ar.name or ar.what)..' in '..ar.short_src..':'..ar.currentline..'\n')&#10;  end&#10;&#10;  ctrlrDebugger:write (&quot;::end\n&quot;)&#10;end&#10;&#10;--}}}&#10;--{{{  local function info()&#10;&#10;local function info()&#10;    dumpvar( traceinfo, 0, 'traceinfo' )&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  local function set_breakpoint(file, line, once)&#10;&#10;local function set_breakpoint(file, line, once)&#10;  if not breakpoints[line] then&#10;    breakpoints[line] = {}&#10;  end&#10;  if once then&#10;    breakpoints[line][file] = 1&#10;  else&#10;    breakpoints[line][file] = true&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  local function remove_breakpoint(file, line)&#10;&#10;local function remove_breakpoint(file, line)&#10;  if breakpoints[line] then&#10;    breakpoints[line][file] = nil&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  local function has_breakpoint(file, line)&#10;&#10;--allow for 'sloppy' file names&#10;--search for file and all variations walking up its directory hierachy&#10;--ditto for the file with no extension&#10;--a breakpoint can be permenant or once only, if once only its removed&#10;--after detection here, these are used for temporary breakpoints in the&#10;--debugger loop when executing the 'gotoo' command&#10;--a breakpoint on line 0 of a file means any line in that file&#10;&#10;local function has_breakpoint(file, line)&#10;  local isLine = breakpoints[line]&#10;  local isZero = breakpoints[0]&#10;  if not isLine and not isZero then return false end&#10;  local noext = string.gsub(file,&quot;(%..-)$&quot;,'',1)&#10;  if noext == file then noext = nil end&#10;  while file do&#10;    if isLine and isLine[file] then&#10;      if isLine[file] == 1 then isLine[file] = nil end&#10;      return true&#10;    end&#10;    if isZero and isZero[file] then&#10;      if isZero[file] == 1 then isZero[file] = nil end&#10;      return true&#10;    end&#10;    if IsWindows then&#10;      file = string.match(file,&quot;[:/\\](.+)$&quot;)&#10;    else&#10;      file = string.match(file,&quot;[:/](.+)$&quot;)&#10;    end&#10;  end&#10;  while noext do&#10;    if isLine and isLine[noext] then&#10;      if isLine[noext] == 1 then isLine[noext] = nil end&#10;      return true&#10;    end&#10;    if isZero and isZero[noext] then&#10;      if isZero[noext] == 1 then isZero[noext] = nil end&#10;      return true&#10;    end&#10;    if IsWindows then&#10;      noext = string.match(noext,&quot;[:/\\](.+)$&quot;)&#10;    else&#10;      noext = string.match(noext,&quot;[:/](.+)$&quot;)&#10;    end&#10;  end&#10;  return false&#10;end&#10;&#10;--}}}&#10;--{{{  local function capture_vars(ref,level,line)&#10;&#10;local function capture_vars(ref,level,line)&#10;  --get vars, file and line for the given level relative to debug_hook offset by ref&#10;&#10;  local lvl = ref + level                --NB: This includes an offset of +1 for the call to here&#10;&#10;  --{{{  capture variables&#10;&#10;  local ar = debug.getinfo(lvl, &quot;f&quot;)&#10;  if not ar then return {},'?',0 end&#10;&#10;  local vars = {__UPVALUES__={}, __LOCALS__={}}&#10;  local i&#10;&#10;  local func = ar.func&#10;  if func then&#10;    i = 1&#10;    while true do&#10;      local name, value = debug.getupvalue(func, i)&#10;      if not name then break end&#10;      if string.sub(name,1,1) ~= '(' then  --NB: ignoring internal control variables&#10;        vars[name] = value&#10;        vars.__UPVALUES__[i] = name&#10;      end&#10;      i = i + 1&#10;    end&#10;    vars.__ENVIRONMENT__ = getfenv(func)&#10;  end&#10;&#10;  vars.__GLOBALS__ = getfenv(0)&#10;&#10;  i = 1&#10;  while true do&#10;    local name, value = debug.getlocal(lvl, i)&#10;    if not name then break end&#10;    if string.sub(name,1,1) ~= '(' then    --NB: ignoring internal control variables&#10;      vars[name] = value&#10;      vars.__LOCALS__[i] = name&#10;    end&#10;    i = i + 1&#10;  end&#10;&#10;  vars.__VARSLEVEL__ = level&#10;&#10;  if func then&#10;    --NB: Do not do this until finished filling the vars table&#10;    setmetatable(vars, { __index = getfenv(func), __newindex = getfenv(func) })&#10;  end&#10;&#10;  --NB: Do not read or write the vars table anymore else the metatable functions will get invoked!&#10;&#10;  --}}}&#10;&#10;  local file = getinfo(lvl, &quot;source&quot;)&#10;  if string.find(file, &quot;@&quot;) == 1 then&#10;    file = string.sub(file, 2)&#10;  end&#10;  if IsWindows then file = string.lower(file) end&#10;&#10;  if not line then&#10;    line = getinfo(lvl, &quot;currentline&quot;)&#10;  end&#10;&#10;  return vars,file,line&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function restore_vars(ref,vars)&#10;&#10;local function restore_vars(ref,vars)&#10;&#10;  if type(vars) ~= 'table' then return end&#10;&#10;  local level = vars.__VARSLEVEL__       --NB: This level is relative to debug_hook offset by ref&#10;  if not level then return end&#10;&#10;  level = level + ref                    --NB: This includes an offset of +1 for the call to here&#10;&#10;  local i&#10;  local written_vars = {}&#10;&#10;  i = 1&#10;  while true do&#10;    local name, value = debug.getlocal(level, i)&#10;    if not name then break end&#10;    if vars[name] and string.sub(name,1,1) ~= '(' then     --NB: ignoring internal control variables&#10;      debug.setlocal(level, i, vars[name])&#10;      written_vars[name] = true&#10;    end&#10;    i = i + 1&#10;  end&#10;&#10;  local ar = debug.getinfo(level, &quot;f&quot;)&#10;  if not ar then return end&#10;&#10;  local func = ar.func&#10;  if func then&#10;&#10;    i = 1&#10;    while true do&#10;      local name, value = debug.getupvalue(func, i)&#10;      if not name then break end&#10;      if vars[name] and string.sub(name,1,1) ~= '(' then   --NB: ignoring internal control variables&#10;        if not written_vars[name] then&#10;          debug.setupvalue(func, i, vars[name])&#10;        end&#10;        written_vars[name] = true&#10;      end&#10;      i = i + 1&#10;    end&#10;&#10;  end&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function trace_event(event, line, level)&#10;&#10;local function print_trace(level,depth,event,file,line,name)&#10;&#10;  --NB: level here is relative to the caller of trace_event, so offset by 2 to get to there&#10;  level = level + 2&#10;&#10;  local file = file or getinfo(level,'short_src')&#10;  local line = line or getinfo(level,'currentline')&#10;  local name = name or getinfo(level,'name')&#10;&#10;  local prefix = ''&#10;  if current_thread ~= 'main' then prefix = '['..tostring(current_thread)..'] ' end&#10;&#10;  ctrlrDebugger:write(prefix..&#10;           string.format('%08.2f:%02i.',os.clock(),depth)..&#10;           string.rep('.',depth%32)..&#10;           (file or '')..' ('..(line or '')..') '..&#10;           (name or '')..&#10;           ' ('..event..')\n')&#10;&#10;end&#10;&#10;local function trace_event(event, line, level)&#10;&#10;  if event == 'return' and trace_returns then&#10;    --note the line info for later&#10;    ret_file = getinfo(level+1,'short_src')&#10;    ret_line = getinfo(level+1,'currentline')&#10;    ret_name = getinfo(level+1,'name')&#10;  end&#10;&#10;  if event ~= 'line' then return end&#10;&#10;  local slevel = stack_level[current_thread]&#10;  local tlevel = trace_level[current_thread]&#10;&#10;  if trace_calls and slevel &gt; tlevel then&#10;    --we are now in the function called, so look back 1 level further to find the calling file and line&#10;    print_trace(level+1,slevel-1,'c',nil,nil,getinfo(level+1,'name'))&#10;  end&#10;&#10;  if trace_returns and slevel &lt; tlevel then&#10;    print_trace(level,slevel,'r',ret_file,ret_line,ret_name)&#10;  end&#10;&#10;  if trace_lines then&#10;    print_trace(level,slevel,'l')&#10;  end&#10;&#10;  trace_level[current_thread] = stack_level[current_thread]&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function report(ev, vars, file, line, idx_watch)&#10;&#10;local function report(ev, vars, file, line, idx_watch)&#10;  local vars = vars or {}&#10;  local file = file or '?'&#10;  local line = line or 0&#10;  local prefix = ''&#10;  if current_thread ~= 'main' then prefix = '['..tostring(current_thread)..'] ' end&#10;  if ev == events.STEP then&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..')\n')&#10;  elseif ev == events.BREAK then&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..') (breakpoint)\n')&#10;  elseif ev == events.WATCH then&#10;    ctrlrDebugger:write(prefix..&quot;Paused at file &quot;..file..&quot; line &quot;..line..' ('..stack_level[current_thread]..')'..&quot; (watch expression &quot;..idx_watch.. &quot;: [&quot;..watches[idx_watch].exp..&quot;])\n&quot;)&#10;  elseif ev == events.SET then&#10;    --do nothing&#10;  else&#10;    ctrlrDebugger:write(prefix..&quot;Error in application: &quot;..file..&quot; line &quot;..line..&quot;\n&quot;)&#10;  end&#10;  if ev ~= events.SET then&#10;    if pausemsg and pausemsg ~= '' then ctrlrDebugger:write('Message: '..pausemsg..'\n') end&#10;    pausemsg = ''&#10;  end&#10;  return vars, file, line&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  local function debugger_loop(ev, vars, file, line, idx_watch)&#10;&#10;local function debugger_loop(ev, vars, file, line, idx_watch)&#10;&#10;  local eval_env  = vars or {}&#10;  local breakfile = file or '?'&#10;  local breakline = line or 0&#10;&#10;  local command, args&#10;&#10;  --{{{  local function getargs(spec)&#10;&#10;  --get command arguments according to the given spec from the args string&#10;  --the spec has a single character for each argument, arguments are separated&#10;  --by white space, the spec characters can be one of:&#10;  -- F for a filename    (defaults to breakfile if - given in args)&#10;  -- L for a line number (defaults to breakline if - given in args)&#10;  -- N for a number&#10;  -- V for a variable name&#10;  -- S for a string&#10;&#10;  local function getargs(spec)&#10;    local res={}&#10;    local char,arg&#10;    local ptr=1&#10;    for i=1,string.len(spec) do&#10;      char = string.sub(spec,i,i)&#10;      if     char == 'F' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '-' end&#10;        if arg == '-' then arg = breakfile end&#10;      elseif char == 'L' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '-' end&#10;        if arg == '-' then arg = breakline end&#10;        arg = tonumber(arg) or 0&#10;      elseif char == 'N' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '0' end&#10;        arg = tonumber(arg) or 0&#10;      elseif char == 'V' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '' end&#10;      elseif char == 'S' then&#10;        _,ptr,arg = string.find(args..' ',&quot;%s*([%w%p]*)%s*&quot;,ptr)&#10;        if not arg or arg == '' then arg = '' end&#10;      else&#10;        arg = ''&#10;      end&#10;      table.insert(res,arg or '')&#10;    end&#10;    return unpack(res)&#10;  end&#10;&#10;  --}}}&#10;&#10;  while true do&#10;    -- io.write(&quot;[DEBUG]&gt; &quot;)&#10;    ctrlrDebugger:write(&quot;[DEBUG]&gt; &quot;)&#10;    -- local line = io.read(&quot;*line&quot;)&#10;    local line = ctrlrDebugger:read()&#10;    if line == nil then ctrlrDebugger:write('\n'); line = 'exit' end&#10;&#10;    if string.find(line, &quot;&#94;[a-z]+&quot;) then&#10;      command = string.sub(line, string.find(line, &quot;&#94;[a-z]+&quot;))&#10;      args    = string.gsub(line,&quot;&#94;[a-z]+%s*&quot;,'',1)            --strip command off line&#10;    else&#10;      command = ''&#10;    end&#10;&#10;    if command == &quot;setb&quot; then&#10;      --{{{  set breakpoint&#10;&#10;      local line, filename  = getargs('LF')&#10;      if filename ~= '' and line ~= '' then&#10;        set_breakpoint(filename,line)&#10;        ctrlrDebugger:write(&quot;Breakpoint set in file &quot;..filename..' line '..line..'\n')&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;delb&quot; then&#10;      --{{{  delete breakpoint&#10;&#10;      local line, filename = getargs('LF')&#10;      if filename ~= '' and line ~= '' then&#10;        remove_breakpoint(filename, line)&#10;        ctrlrDebugger:write(&quot;Breakpoint deleted from file &quot;..filename..' line '..line..&quot;\n&quot;)&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;delallb&quot; then&#10;      --{{{  delete all breakpoints&#10;      breakpoints = {}&#10;      ctrlrDebugger:write('All breakpoints deleted\n')&#10;      --}}}&#10;&#10;    elseif command == &quot;listb&quot; then&#10;      --{{{  list breakpoints&#10;      for i, v in pairs(breakpoints) do&#10;        for ii, vv in pairs(v) do&#10;          ctrlrDebugger:write(&quot;Break at: &quot;..i..' in '..ii..'\n')&#10;        end&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;setw&quot; then&#10;      --{{{  set watch expression&#10;&#10;      if args and args ~= '' then&#10;        local func = loadstring(&quot;return(&quot; .. args .. &quot;)&quot;)&#10;        local newidx = #watches + 1&#10;        watches[newidx] = {func = func, exp = args}&#10;        ctrlrDebugger:write(&quot;Set watch exp no. &quot; .. newidx..'\n')&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;delw&quot; then&#10;      --{{{  delete watch expression&#10;&#10;      local index = tonumber(args)&#10;      if index then&#10;        watches[index] = nil&#10;        ctrlrDebugger:write(&quot;Watch expression deleted\n&quot;)&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;delallw&quot; then&#10;      --{{{  delete all watch expressions&#10;      watches = {}&#10;      ctrlrDebugger:write('All watch expressions deleted\n')&#10;      --}}}&#10;&#10;    elseif command == &quot;listw&quot; then&#10;      --{{{  list watch expressions&#10;      for i, v in pairs(watches) do&#10;        ctrlrDebugger:write(&quot;Watch exp. &quot; .. i .. &quot;: &quot; .. v.exp..'\n')&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;run&quot; then&#10;      --{{{  run until breakpoint&#10;      step_into = false&#10;      step_over = false&#10;      return 'cont'&#10;      --}}}&#10;&#10;    elseif command == &quot;step&quot; then&#10;      --{{{  step N lines (into functions)&#10;      local N = tonumber(args) or 1&#10;      step_over  = false&#10;      step_into  = true&#10;      step_lines = tonumber(N or 1)&#10;      return 'cont'&#10;      --}}}&#10;&#10;    elseif command == &quot;over&quot; then&#10;      --{{{  step N lines (over functions)&#10;      local N = tonumber(args) or 1&#10;      step_into  = false&#10;      step_over  = true&#10;      step_lines = tonumber(N or 1)&#10;      step_level[current_thread] = stack_level[current_thread]&#10;      return 'cont'&#10;      --}}}&#10;&#10;    elseif command == &quot;out&quot; then&#10;      --{{{  step N lines (out of functions)&#10;      local N = tonumber(args) or 1&#10;      step_into  = false&#10;      step_over  = true&#10;      step_lines = 1&#10;      step_level[current_thread] = stack_level[current_thread] - tonumber(N or 1)&#10;      return 'cont'&#10;      --}}}&#10;&#10;    elseif command == &quot;gotoo&quot; then&#10;      --{{{  step until reach line&#10;      local line, filename = getargs('LF')&#10;      if line ~= '' then&#10;        step_over  = false&#10;        step_into  = false&#10;        if has_breakpoint(filename,line) then&#10;          return 'cont'&#10;        else&#10;          set_breakpoint(filename,line,true)&#10;          return 'cont'&#10;        end&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;set&quot; then&#10;      --{{{  set/show context level&#10;      local level = args&#10;      if level and level == '' then level = nil end&#10;      if level then return level end&#10;      --}}}&#10;&#10;    elseif command == &quot;vars&quot; then&#10;      --{{{  list context variables&#10;      local depth = args&#10;      if depth and depth == '' then depth = nil end&#10;      depth = tonumber(depth) or 1&#10;      dumpvar(eval_env, depth+1, 'variables')&#10;      --}}}&#10;&#10;    elseif command == &quot;glob&quot; then&#10;      --{{{  list global variables&#10;      local depth = args&#10;      if depth and depth == '' then depth = nil end&#10;      depth = tonumber(depth) or 1&#10;      dumpvar(eval_env.__GLOBALS__,depth+1,'globals')&#10;      --}}}&#10;&#10;    elseif command == &quot;fenv&quot; then&#10;      --{{{  list function environment variables&#10;      local depth = args&#10;      if depth and depth == '' then depth = nil end&#10;      depth = tonumber(depth) or 1&#10;      dumpvar(eval_env.__ENVIRONMENT__,depth+1,'environment')&#10;      --}}}&#10;&#10;    elseif command == &quot;ups&quot; then&#10;      --{{{  list upvalue names&#10;      dumpvar(eval_env.__UPVALUES__,2,'upvalues')&#10;      --}}}&#10;&#10;    elseif command == &quot;locs&quot; then&#10;      --{{{  list locals names&#10;      dumpvar(eval_env.__LOCALS__,2,'upvalues')&#10;      --}}}&#10;&#10;    elseif command == &quot;what&quot; then&#10;      --{{{  show where a function is defined&#10;      if args and args ~= '' then&#10;        local v = eval_env&#10;        local n = nil&#10;        for w in string.gmatch(args,&quot;[%w_]+&quot;) do&#10;          v = v[w]&#10;          if n then n = n..'.'..w else n = w end&#10;          if not v then break end&#10;        end&#10;        if type(v) == 'function' then&#10;          local def = debug.getinfo(v,'S')&#10;          if def then&#10;            ctrlrDebugger:write(def.what..' in '..def.short_src..' '..def.linedefined..'..'..def.lastlinedefined..'\n')&#10;          else&#10;            ctrlrDebugger:write('Cannot get info for '..v..'\n')&#10;          end&#10;        else&#10;          ctrlrDebugger:write(v..' is not a function\n')&#10;        end&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;dump&quot; then&#10;      --{{{  dump a variable&#10;      local name, depth = getargs('VN')&#10;      if name ~= '' then&#10;        if depth == '' or depth == 0 then depth = nil end&#10;        depth = tonumber(depth or 1)&#10;        local v = eval_env&#10;        local n = nil&#10;        for w in string.gmatch(name,&quot;[&#94;%.]+&quot;) do     --get everything between dots&#10;          if tonumber(w) then&#10;            v = v[tonumber(w)]&#10;          else&#10;            v = v[w]&#10;          end&#10;          if n then n = n..'.'..w else n = w end&#10;          if not v then break end&#10;        end&#10;        dumpvar(v,depth+1,n)&#10;      else&#10;        ctrlrDebugger:write(&quot;Bad request\n&quot;)&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;show&quot; then&#10;      --{{{  show file around a line or the current breakpoint&#10;&#10;      local line, file, before, after = getargs('LFNN')&#10;      if before == 0 then before = 10     end&#10;      if after  == 0 then after  = before end&#10;&#10;      if file ~= '' and file ~= &quot;=stdin&quot; then&#10;        show(file,line,before,after)&#10;      else&#10;        ctrlrDebugger:write('Nothing to show\n')&#10;      end&#10;&#10;      --}}}&#10;&#10;    elseif command == &quot;poff&quot; then&#10;      --{{{  turn pause command off&#10;      pause_off = true&#10;      --}}}&#10;&#10;    elseif command == &quot;pon&quot; then&#10;      --{{{  turn pause command on&#10;      pause_off = false&#10;      --}}}&#10;&#10;    elseif command == &quot;tron&quot; then&#10;      --{{{  turn tracing on/off&#10;      local option = getargs('S')&#10;      trace_calls   = false&#10;      trace_returns = false&#10;      trace_lines   = false&#10;      if string.find(option,'c') then trace_calls   = true end&#10;      if string.find(option,'r') then trace_returns = true end&#10;      if string.find(option,'l') then trace_lines   = true end&#10;      --}}}&#10;&#10;    elseif command == &quot;trace&quot; then&#10;      --{{{  dump a stack trace&#10;      trace(eval_env.__VARSLEVEL__)&#10;      --}}}&#10;&#10;    elseif command == &quot;info&quot; then&#10;      --{{{  dump all debug info captured&#10;      info()&#10;      --}}}&#10;&#10;    elseif command == &quot;pause&quot; then&#10;      --{{{  not allowed in here&#10;      ctrlrDebugger:write('pause() should only be used in the script you are debugging\n')&#10;      --}}}&#10;&#10;    elseif command == &quot;help&quot; then&#10;      --{{{  help&#10;      local command = getargs('S')&#10;      if command ~= '' and hints[command] then&#10;        ctrlrDebugger:write(hints[command]..'\n')&#10;      else&#10;        for _,v in pairs(hints) do&#10;          local _,_,h = string.find(v,&quot;(.+)|&quot;)&#10;          ctrlrDebugger:write(h..'\n')&#10;        end&#10;      end&#10;      --}}}&#10;&#10;    elseif command == &quot;exit&quot; then&#10;      --{{{  exit debugger&#10;      return 'stop'&#10;      --}}}&#10;&#10;    elseif line ~= '' then&#10;      --{{{  just execute whatever it is in the current context&#10;&#10;      --map line starting with &quot;=...&quot; to &quot;return ...&quot;&#10;      if string.sub(line,1,1) == '=' then line = string.gsub(line,'=','return ',1) end&#10;&#10;      local ok, func = pcall(loadstring,line)&#10;      if func == nil then                             --Michael.Bringmann@lsi.com&#10;        ctrlrDebugger:write(&quot;Compile error: &quot;..line..'\n')&#10;      elseif not ok then&#10;        ctrlrDebugger:write(&quot;Compile error: &quot;..func..'\n')&#10;      else&#10;        setfenv(func, eval_env)&#10;        local res = {pcall(func)}&#10;        if res[1] then&#10;          if res[2] then&#10;            table.remove(res,1)&#10;            for _,v in ipairs(res) do&#10;              ctrlrDebugger:write(tostring(v))&#10;              ctrlrDebugger:write('\t')&#10;            end&#10;            ctrlrDebugger:write('\n')&#10;          end&#10;          --update in the context&#10;          return 0&#10;        else&#10;          ctrlrDebugger:write(&quot;Run error: &quot;..res[2]..'\n')&#10;        end&#10;      end&#10;&#10;      --}}}&#10;    end&#10;  end&#10;&#10;end&#10;&#10;--}}}&#10;--{{{  local function debug_hook(event, line, level, thread)&#10;&#10;local function debug_hook(event, line, level, thread)&#10;  if not started then debug.sethook(); coro_debugger = nil; return end&#10;  current_thread = thread or 'main'&#10;  local level = level or 2&#10;  trace_event(event,line,level)&#10;  if event == &quot;call&quot; then&#10;    stack_level[current_thread] = stack_level[current_thread] + 1&#10;  elseif event == &quot;return&quot; then&#10;    stack_level[current_thread] = stack_level[current_thread] - 1&#10;    if stack_level[current_thread] &lt; 0 then stack_level[current_thread] = 0 end&#10;  else&#10;    local vars,file,line = capture_vars(level,1,line)&#10;    local stop, ev, idx = false, events.STEP, 0&#10;    while true do&#10;      for index, value in pairs(watches) do&#10;        setfenv(value.func, vars)&#10;        local status, res = pcall(value.func)&#10;        if status and res then&#10;          ev, idx = events.WATCH, index&#10;          stop = true&#10;          break&#10;        end&#10;      end&#10;      if stop then break end&#10;      if (step_into)&#10;      or (step_over and (stack_level[current_thread] &lt;= step_level[current_thread] or stack_level[current_thread] == 0)) then&#10;        step_lines = step_lines - 1&#10;        if step_lines &lt; 1 then&#10;          ev, idx = events.STEP, 0&#10;          break&#10;        end&#10;      end&#10;      if has_breakpoint(file, line) then&#10;        ev, idx = events.BREAK, 0&#10;        break&#10;      end&#10;      return&#10;    end&#10;    if not coro_debugger then&#10;      ctrlrDebugger:write(&quot;Lua Debugger\n&quot;)&#10;      vars, file, line = report(ev, vars, file, line, idx)&#10;      ctrlrDebugger:write(&quot;Type 'help' for commands\n&quot;)&#10;      coro_debugger = true&#10;    else&#10;      vars, file, line = report(ev, vars, file, line, idx)&#10;    end&#10;    tracestack(level)&#10;    local last_next = 1&#10;    local next = 'ask'&#10;    local silent = false&#10;    while true do&#10;      if next == 'ask' then&#10;        next = debugger_loop(ev, vars, file, line, idx)&#10;      elseif next == 'cont' then&#10;        return&#10;      elseif next == 'stop' then&#10;        started = false&#10;        debug.sethook()&#10;        coro_debugger = nil&#10;        return&#10;      elseif tonumber(next) then --get vars for given level or last level&#10;        next = tonumber(next)&#10;        if next == 0 then silent = true; next = last_next else silent = false end&#10;        last_next = next&#10;        restore_vars(level,vars)&#10;        vars, file, line = capture_vars(level,next)&#10;        if not silent then&#10;          if vars and vars.__VARSLEVEL__ then&#10;            ctrlrDebugger:write('Level: '..vars.__VARSLEVEL__..'\n')&#10;          else&#10;            ctrlrDebugger:write('No level set\n')&#10;          end&#10;        end&#10;        ev = events.SET&#10;        next = 'ask'&#10;      else&#10;        ctrlrDebugger:write('Unknown command from debugger_loop: '..tostring(next)..'\n')&#10;        ctrlrDebugger:write('Stopping debugger\n')&#10;        next = 'stop'&#10;      end&#10;    end&#10;  end&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  coroutine.create&#10;&#10;--This function overrides the built-in for the purposes of propagating&#10;--the debug hook settings from the creator into the created coroutine.&#10;&#10;_G.coroutine.create = function(f)&#10;  local thread&#10;  local hook, mask, count = debug.gethook()&#10;  if hook then&#10;    local function thread_hook(event,line)&#10;      hook(event,line,3,thread)&#10;    end&#10;    thread = cocreate(function(...)&#10;                        stack_level[thread] = 0&#10;                        trace_level[thread] = 0&#10;                        step_level [thread] = 0&#10;                        debug.sethook(thread_hook,mask,count)&#10;                        return f(...)&#10;                      end)&#10;    return thread&#10;  else&#10;    return cocreate(f)&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  coroutine.wrap&#10;&#10;--This function overrides the built-in for the purposes of propagating&#10;--the debug hook settings from the creator into the created coroutine.&#10;&#10;_G.coroutine.wrap = function(f)&#10;  local thread&#10;  local hook, mask, count = debug.gethook()&#10;  if hook then&#10;    local function thread_hook(event,line)&#10;      hook(event,line,3,thread)&#10;    end&#10;    thread = cowrap(function(...)&#10;                      stack_level[thread] = 0&#10;                      trace_level[thread] = 0&#10;                      step_level [thread] = 0&#10;                      debug.sethook(thread_hook,mask,count)&#10;                      return f(...)&#10;                    end)&#10;    return thread&#10;  else&#10;    return cowrap(f)&#10;  end&#10;end&#10;&#10;--}}}&#10;&#10;--{{{  function pause(x,l,f)&#10;&#10;--&#10;-- Starts/resumes a debug session&#10;--&#10;&#10;function pause(x,l,f)&#10;  if not f and pause_off then return end       --being told to ignore pauses&#10;  pausemsg = x or 'pause'&#10;  local lines&#10;  local src = getinfo(2,'short_src')&#10;  if l then&#10;    lines = l   --being told when to stop&#10;  elseif src == &quot;stdin&quot; then&#10;    lines = 1   --if in a console session, stop now&#10;  else&#10;    lines = 2   --if in a script, stop when get out of pause()&#10;  end&#10;  if started then&#10;    --we'll stop now 'cos the existing debug hook will grab us&#10;    step_lines = lines&#10;    step_into  = true&#10;    debug.sethook(debug_hook, &quot;crl&quot;)         --reset it in case some external agent fiddled with it&#10;  else&#10;    --set to stop when get out of pause()&#10;    trace_level[current_thread] = 0&#10;    step_level [current_thread] = 0&#10;    stack_level[current_thread] = 1&#10;    step_lines = lines&#10;    step_into  = true&#10;    started    = true&#10;    debug.sethook(debug_hook, &quot;crl&quot;)         --NB: this will cause an immediate entry to the debugger_loop&#10;  end&#10;end&#10;&#10;--}}}&#10;--{{{  function dump(v,depth)&#10;&#10;--shows the value of the given variable, only really useful&#10;--when the variable is a table&#10;--see dump debug command hints for full semantics&#10;&#10;function dump(v,depth)&#10;  dumpvar(v,(depth or 1)+1,tostring(v))&#10;end&#10;&#10;--}}}&#10;--{{{  function debug.traceback(x)&#10;&#10;local _traceback = debug.traceback       --note original function&#10;&#10;--override standard function&#10;debug.traceback = function(x)&#10;  local assertmsg = _traceback(x)        --do original function&#10;  pause(x)                               --let user have a look at stuff&#10;  return assertmsg                       --carry on&#10;end&#10;&#10;_TRACEBACK = debug.traceback             --Lua 5.0 function&#10;&#10;--}}}"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000005"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="inspect" luaMethodCode="function getInspect()&#10;local inspect ={&#10;  _VERSION = 'inspect.lua 3.0.0',&#10;  _URL     = 'http://github.com/kikito/inspect.lua',&#10;  _DESCRIPTION = 'human-readable representations of tables',&#10;  _LICENSE = [[&#10;    MIT LICENSE&#10;&#10;    Copyright (c) 2013 Enrique Garc&#237;a Cota&#10;&#10;    Permission is hereby granted, free of charge, to any person obtaining a&#10;    copy of this software and associated documentation files (the&#10;    &quot;Software&quot;), to deal in the Software without restriction, including&#10;    without limitation the rights to use, copy, modify, merge, publish,&#10;    distribute, sublicense, and/or sell copies of the Software, and to&#10;    permit persons to whom the Software is furnished to do so, subject to&#10;    the following conditions:&#10;&#10;    The above copyright notice and this permission notice shall be included&#10;    in all copies or substantial portions of the Software.&#10;&#10;    THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS&#10;    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&#10;    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.&#10;    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY&#10;    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,&#10;    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE&#10;    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#10;  ]]&#10;}&#10;&#10;inspect.KEY       = setmetatable({}, {__tostring = function() return 'inspect.KEY' end})&#10;inspect.METATABLE = setmetatable({}, {__tostring = function() return 'inspect.METATABLE' end})&#10;&#10;-- Apostrophizes the string if it has quotes, but not aphostrophes&#10;-- Otherwise, it returns a regular quoted string&#10;local function smartQuote(str)&#10;  if str:match('&quot;') and not str:match(&quot;'&quot;) then&#10;    return &quot;'&quot; .. str .. &quot;'&quot;&#10;  end&#10;  return '&quot;' .. str:gsub('&quot;', '\\&quot;') .. '&quot;'&#10;end&#10;&#10;local controlCharsTranslation = {&#10;  [&quot;\a&quot;] = &quot;\\a&quot;,  [&quot;\b&quot;] = &quot;\\b&quot;, [&quot;\f&quot;] = &quot;\\f&quot;,  [&quot;\n&quot;] = &quot;\\n&quot;,&#10;  [&quot;\r&quot;] = &quot;\\r&quot;,  [&quot;\t&quot;] = &quot;\\t&quot;, [&quot;\v&quot;] = &quot;\\v&quot;&#10;}&#10;&#10;local function escape(str)&#10;  local result = str:gsub(&quot;\\&quot;, &quot;\\\\&quot;):gsub(&quot;(%c)&quot;, controlCharsTranslation)&#10;  return result&#10;end&#10;&#10;local function isIdentifier(str)&#10;  return type(str) == 'string' and str:match( &quot;&#94;[_%a][_%a%d]*$&quot; )&#10;end&#10;&#10;local function isSequenceKey(k, length)&#10;  return type(k) == 'number'&#10;     and 1 &lt;= k&#10;     and k &lt;= length&#10;     and math.floor(k) == k&#10;end&#10;&#10;local defaultTypeOrders = {&#10;  ['number']   = 1, ['boolean']  = 2, ['string'] = 3, ['table'] = 4,&#10;  ['function'] = 5, ['userdata'] = 6, ['thread'] = 7&#10;}&#10;&#10;local function sortKeys(a, b)&#10;  local ta, tb = type(a), type(b)&#10;&#10;  -- strings and numbers are sorted numerically/alphabetically&#10;  if ta == tb and (ta == 'string' or ta == 'number') then return a &lt; b end&#10;&#10;  local dta, dtb = defaultTypeOrders[ta], defaultTypeOrders[tb]&#10;  -- Two default types are compared according to the defaultTypeOrders table&#10;  if dta and dtb then return defaultTypeOrders[ta] &lt; defaultTypeOrders[tb]&#10;  elseif dta     then return true  -- default types before custom ones&#10;  elseif dtb     then return false -- custom types after default ones&#10;  end&#10;&#10;  -- custom types are sorted out alphabetically&#10;  return ta &lt; tb&#10;end&#10;&#10;local function getNonSequentialKeys(t)&#10;  local keys, length = {}, #t&#10;  for k,_ in pairs(t) do&#10;    if not isSequenceKey(k, length) then table.insert(keys, k) end&#10;  end&#10;  table.sort(keys, sortKeys)&#10;  return keys&#10;end&#10;&#10;local function getToStringResultSafely(t, mt)&#10;  local __tostring = type(mt) == 'table' and rawget(mt, '__tostring')&#10;  local str, ok&#10;  if type(__tostring) == 'function' then&#10;    ok, str = pcall(__tostring, t)&#10;    str = ok and str or 'error: ' .. tostring(str)&#10;  end&#10;  if type(str) == 'string' and #str &gt; 0 then return str end&#10;end&#10;&#10;local maxIdsMetaTable = {&#10;  __index = function(self, typeName)&#10;    rawset(self, typeName, 0)&#10;    return 0&#10;  end&#10;}&#10;&#10;local idsMetaTable = {&#10;  __index = function (self, typeName)&#10;    local col = setmetatable({}, {__mode = &quot;kv&quot;})&#10;    rawset(self, typeName, col)&#10;    return col&#10;  end&#10;}&#10;&#10;local function countTableAppearances(t, tableAppearances)&#10;  tableAppearances = tableAppearances or setmetatable({}, {__mode = &quot;k&quot;})&#10;&#10;  if type(t) == 'table' then&#10;    if not tableAppearances[t] then&#10;      tableAppearances[t] = 1&#10;      for k,v in pairs(t) do&#10;        countTableAppearances(k, tableAppearances)&#10;        countTableAppearances(v, tableAppearances)&#10;      end&#10;      countTableAppearances(getmetatable(t), tableAppearances)&#10;    else&#10;      tableAppearances[t] = tableAppearances[t] + 1&#10;    end&#10;  end&#10;&#10;  return tableAppearances&#10;end&#10;&#10;local copySequence = function(s)&#10;  local copy, len = {}, #s&#10;  for i=1, len do copy[i] = s[i] end&#10;  return copy, len&#10;end&#10;&#10;local function makePath(path, ...)&#10;  local keys = {...}&#10;  local newPath, len = copySequence(path)&#10;  for i=1, #keys do&#10;    newPath[len + i] = keys[i]&#10;  end&#10;  return newPath&#10;end&#10;&#10;local function processRecursive(process, item, path)&#10;  if item == nil then return nil end&#10;&#10;  local processed = process(item, path)&#10;  if type(processed) == 'table' then&#10;    local processedCopy = {}&#10;    local processedKey&#10;&#10;    for k,v in pairs(processed) do&#10;      processedKey = processRecursive(process, k, makePath(path, k, inspect.KEY))&#10;      if processedKey ~= nil then&#10;        processedCopy[processedKey] = processRecursive(process, v, makePath(path, processedKey))&#10;      end&#10;    end&#10;&#10;    local mt  = processRecursive(process, getmetatable(processed), makePath(path, inspect.METATABLE))&#10;    setmetatable(processedCopy, mt)&#10;    processed = processedCopy&#10;  end&#10;  return processed&#10;end&#10;&#10;&#10;-------------------------------------------------------------------&#10;&#10;local Inspector = {}&#10;local Inspector_mt = {__index = Inspector}&#10;&#10;function Inspector:puts(...)&#10;  local args   = {...}&#10;  local buffer = self.buffer&#10;  local len    = #buffer&#10;  for i=1, #args do&#10;    len = len + 1&#10;    buffer[len] = tostring(args[i])&#10;  end&#10;end&#10;&#10;function Inspector:down(f)&#10;  self.level = self.level + 1&#10;  f()&#10;  self.level = self.level - 1&#10;end&#10;&#10;function Inspector:tabify()&#10;  self:puts(self.newline, string.rep(self.indent, self.level))&#10;end&#10;&#10;function Inspector:alreadyVisited(v)&#10;  return self.ids[type(v)][v] ~= nil&#10;end&#10;&#10;function Inspector:getId(v)&#10;  local tv = type(v)&#10;  local id = self.ids[tv][v]&#10;  if not id then&#10;    id              = self.maxIds[tv] + 1&#10;    self.maxIds[tv] = id&#10;    self.ids[tv][v] = id&#10;  end&#10;  return id&#10;end&#10;&#10;function Inspector:putKey(k)&#10;  if isIdentifier(k) then return self:puts(k) end&#10;  self:puts(&quot;[&quot;)&#10;  self:putValue(k)&#10;  self:puts(&quot;]&quot;)&#10;end&#10;&#10;function Inspector:putTable(t)&#10;  if t == inspect.KEY or t == inspect.METATABLE then&#10;    self:puts(tostring(t))&#10;  elseif self:alreadyVisited(t) then&#10;    self:puts('&lt;table ', self:getId(t), '&gt;')&#10;  elseif self.level &gt;= self.depth then&#10;    self:puts('{...}')&#10;  else&#10;    if self.tableAppearances[t] &gt; 1 then self:puts('&lt;', self:getId(t), '&gt;') end&#10;&#10;    local nonSequentialKeys = getNonSequentialKeys(t)&#10;    local length            = #t&#10;    local mt                = getmetatable(t)&#10;    local toStringResult    = getToStringResultSafely(t, mt)&#10;&#10;    self:puts('{')&#10;    self:down(function()&#10;      if toStringResult then&#10;        self:puts(' -- ', escape(toStringResult))&#10;        if length &gt;= 1 then self:tabify() end&#10;      end&#10;&#10;      local count = 0&#10;      for i=1, length do&#10;        if count &gt; 0 then self:puts(',') end&#10;        self:puts(' ')&#10;        self:putValue(t[i])&#10;        count = count + 1&#10;      end&#10;&#10;      for _,k in ipairs(nonSequentialKeys) do&#10;        if count &gt; 0 then self:puts(',') end&#10;        self:tabify()&#10;        self:putKey(k)&#10;        self:puts(' = ')&#10;        self:putValue(t[k])&#10;        count = count + 1&#10;      end&#10;&#10;      if mt then&#10;        if count &gt; 0 then self:puts(',') end&#10;        self:tabify()&#10;        self:puts('&lt;metatable&gt; = ')&#10;        self:putValue(mt)&#10;      end&#10;    end)&#10;&#10;    if #nonSequentialKeys &gt; 0 or mt then -- result is multi-lined. Justify closing }&#10;      self:tabify()&#10;    elseif length &gt; 0 then -- array tables have one extra space before closing }&#10;      self:puts(' ')&#10;    end&#10;&#10;    self:puts('}')&#10;  end&#10;end&#10;&#10;function Inspector:putValue(v)&#10;  local tv = type(v)&#10;&#10;  if tv == 'string' then&#10;    self:puts(smartQuote(escape(v)))&#10;  elseif tv == 'number' or tv == 'boolean' or tv == 'nil' then&#10;    self:puts(tostring(v))&#10;  elseif tv == 'table' then&#10;    self:putTable(v)&#10;  else&#10;    self:puts('&lt;',tv,' ',self:getId(v),'&gt;')&#10;  end&#10;end&#10;&#10;-------------------------------------------------------------------&#10;&#10;function inspect.inspect(root, options)&#10;  options       = options or {}&#10;&#10;  local depth   = options.depth   or math.huge&#10;  local newline = options.newline or '\n'&#10;  local indent  = options.indent  or '  '&#10;  local process = options.process&#10;&#10;  if process then&#10;    root = processRecursive(process, root, {})&#10;  end&#10;&#10;  local inspector = setmetatable({&#10;    depth            = depth,&#10;    buffer           = {},&#10;    level            = 0,&#10;    ids              = setmetatable({}, idsMetaTable),&#10;    maxIds           = setmetatable({}, maxIdsMetaTable),&#10;    newline          = newline,&#10;    indent           = indent,&#10;    tableAppearances = countTableAppearances(root)&#10;  }, Inspector_mt)&#10;&#10;  inspector:putValue(root)&#10;&#10;  return table.concat(inspector.buffer)&#10;end&#10;&#10;setmetatable(inspect, { __call = function(_, ...) return inspect.inspect(...) end })&#10;&#10;return inspect&#10;end&#10;&#10;inspect = getInspect()"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="00000000000000000000000000000006"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="UserInterface" uuid="ebe24e6cea734c1c968f61fd2fce7718">
        <luaMethodGroup name="Settings" uuid="0ae099ca0b834b87b6ac6d768c867699">
          <luaMethod luaMethodName="requestEditBufferChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;requestEditBufferChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if ignoreModulatorUpdateEvent(&quot;requestEditBufferChanged&quot;, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;--&#9;addToLog(&quot;Request Edit Buffer = &quot;..tostring(value))&#13;&#10;&#9;pg_requestEditBuffer = value&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="33d35393a7404754ba3899441eebd135"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="firstVSTindexChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;firstVSTindexChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;firstVSTindexChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;firstVSTindexChanged value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;-- Create table of modulators by VST Index, plus array of old VST Index values&#10;&#9;local numMods, mod, VSTindex, newVSTindex&#10;&#9;numMods = panel:getNumModulators()&#10;&#9;local modsByOldVSTindex = {}&#10;&#9;local oldVSTindexArray = {}&#10;&#9;for i=0, numMods - 1, 1 do&#10;&#9;&#9;mod = panel:getModulatorByIndex(i)&#10;&#9;&#9;if mod:getPropertyInt(&quot;modulatorVstExported&quot;) == 1 then&#10;&#9;&#9;&#9;VSTindex = tonumber(mod:getVstIndex())&#10;&#9;&#9;&#9;if modsByOldVSTindex[VSTindex] == nil then&#10;&#9;&#9;&#9;&#9;modsByOldVSTindex[VSTindex] = {}&#10;&#9;&#9;&#9;&#9;table.insert(oldVSTindexArray, VSTindex)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;table.insert(modsByOldVSTindex[VSTindex], mod)&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;&#13;&#10;&#9;-- Sort array by old VST Index, then renumber VST Index in modulators while preserving their order&#10;&#9;table.sort(oldVSTindexArray)&#10;&#9;newVSTindex = value&#10;&#9;for k, v in ipairs(oldVSTindexArray) do&#10;--&#9;&#9;console(&quot;k=&quot;..tostring(k)..&quot; v=&quot;..tostring(v)..&quot; mod=&quot;..L(modsByOldVSTindex[v]:getName()))&#13;&#10;&#9;&#9;for k2, v2 in ipairs(modsByOldVSTindex[v]) do&#10;&#9;&#9;&#9;modsByOldVSTindex[v][k2]:setPropertyInt(&quot;vstIndex&quot;, newVSTindex)&#13;&#10;&#9;&#9;&#9;newVSTindex = newVSTindex + 1&#10;&#9;&#9;end&#10;&#9;end&#10;end"
                     luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                     uuid="90be8bb338e44f57b2c8eea32b005f44" luaMethodValid="1"/>
          <luaMethod luaMethodName="colorValueChanged" luaMethodCode="--&#10;-- Called when the contents of a Label are changed&#10;-- @label&#10;-- @newContent    a string that the label now contains&#10;--&#10;&#10;colorValueChanged = function(--[[ CtrlrLabel --]] label, --[[ String --]] newContent)&#10;&#9;local lblName = L(label:getOwner():getName())&#10;&#9;if ignoreModulatorUpdateEvent(&quot;colorValueChanged &quot;..lblName, source) then&#10;        return&#10;&#9;end&#10;&#9;addToLog(&quot;colorValueChanged &quot;..lblName..&quot; newContent=&quot;..newContent..&quot; type=&quot;..type(newContent))&#10;&#10;&#9;local newColor = string.upper(newContent)&#10;&#9;if #newContent &lt; 8 then&#10;&#9;&#9;addToLog(&quot;colorValueChanged Length of color value must be eight - invalid input ignored&quot;)&#10;&#9;&#9;displayMessage(&quot;Length of color value must be eight - invalid input ignored&quot;)&#10;&#9;&#9;newColor = _G[&quot;pg_c&quot;..lblName:sub(4 - #lblName)]&#10;&#9;&#9;customSetLabelText(label, newColor)&#10;        return&#10;&#9;end&#10;&#10;&#9;customSetLabelText(label, newColor)&#10;&#9;_G[&quot;pg_c&quot;..lblName:sub(4 - #lblName)] = newColor&#10;&#9;pg_colorLastChosen = lblName&#10;&#13;&#10;&#9;SetSliderFromColor(newColor)&#13;&#10;&#10;&#9;ChangeRequestedColor(lblName)&#10;end&#10;&#13;&#10;SetSliderFromColor = function(--[[ string --]] newColor)&#13;&#10;&#9;if newColor == nil then&#13;&#10;&#9;&#9;addToLog(&quot;SetSliderFromColor newColor=nil&quot;)&#13;&#10;&#9;end&#13;&#10;&#9;local mod, mb, value&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;sldColorChooseRed&quot;)&#13;&#10;&#9;mb = MemoryBlock()&#13;&#10;&#9;mb:loadFromHexString(string.sub(newColor, 3, 4))&#13;&#10;&#9;value = mb:getByte(0)&#13;&#10;&#9;mod:setModulatorValue(value, false, false, false)&#13;&#10;&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;sldColorChooseGreen&quot;)&#13;&#10;&#9;mb = MemoryBlock()&#13;&#10;&#9;mb:loadFromHexString(string.sub(newColor, 5, 6))&#13;&#10;&#9;value = mb:getByte(0)&#13;&#10;&#9;mod:setModulatorValue(value, false, false, false)&#13;&#10;&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;sldColorChooseBlue&quot;)&#13;&#10;&#9;mb = MemoryBlock()&#13;&#10;&#9;mb:loadFromHexString(string.sub(newColor, 7, 8))&#13;&#10;&#9;value = mb:getByte(0)&#13;&#10;&#9;mod:setModulatorValue(value, false, false, false)&#13;&#10;end&#13;&#10;&#10;ChangeRequestedColor = function(--[[ string --]] lblName)&#10;&#9;addToLog(&quot;ChangeRequestedColor lblName=&quot;..tostring(lblName))&#10;&#10;&#9;local compType&#10;&#9;for k,comp in ipairs(pg_compAllowColorChange) do&#10;&#9;&#9;compType = pg_compAllowColorChangeType[k]&#10;&#9;&#9;if lblName == nil or lblName == &quot;lblColorValueFG&quot; then&#10;&#9;&#9;&#9;if compType == &quot;uiSlider&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiSliderRotaryFillColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiSliderRotaryOutlineColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiSliderValueHighlightColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiSliderIncDecButtonColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;elseif compType == &quot;uiCombo&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiComboButtonColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiComboMenuBackgroundColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiComboOutlineColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;elseif compType == &quot;uiLabel&quot;&#10;&#9;&#9;&#9;and pg_compAllowValueTextColorChange[k] == true then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiLabelTextColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;elseif compType == &quot;uiListBox&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiListBoxTextColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiListBoxHighlightFgColour&quot;, pg_colorValueFG)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;&#9;if lblName == nil or lblName == &quot;lblColorValueBG&quot; then&#10;&#9;&#9;&#9;if compType == &quot;uiSlider&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiSliderValueBgColour&quot;, pg_colorValueBG)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiSliderThumbColour&quot;, pg_colorValueBG)&#10;&#9;&#9;&#9;elseif compType == &quot;uiCombo&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiComboBgColour&quot;, pg_colorValueBG)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;&#9;if lblName == nil or lblName == &quot;lblColorButtonOn&quot; then&#10;&#9;&#9;&#9;if compType == &quot;uiButton&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiButtonColourOn&quot;, pg_colorButtonOn)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;&#9;if lblName == nil or lblName == &quot;lblColorButtonOff&quot; then&#10;&#9;&#9;&#9;if compType == &quot;uiButton&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiButtonColourOff&quot;, pg_colorButtonOff)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;&#9;if lblName == nil or lblName == &quot;lblColorBackground&quot; then&#10;&#9;&#9;&#9;if compType == &quot;uiListBox&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiListBoxBackgroundColour&quot;, pg_colorBackground)&#10;&#9;&#9;&#9;elseif compType == &quot;uiLabel&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiLabelBgColour&quot;, pg_colorBackground)&#10;&#9;&#9;&#9;elseif compType == &quot;uiTabs&quot; then&#10;&#9;&#9;&#9;&#9;for i=0, comp:getObjectTree():getNumChildren() - 1, 1 do&#10;&#9;&#9;&#9;&#9;&#9;comp:getObjectTree():getChild(i):setProperty(&quot;uiTabsTabContentBackgroundColour&quot;, pg_colorBackground, nil)&#10;&#9;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;&#9;if lblName == nil or lblName == &quot;lblColorValueText&quot; then&#10;&#9;&#9;&#9;if compType == &quot;uiSlider&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiSliderValueTextColour&quot;, pg_colorValueText)&#10;&#9;&#9;&#9;elseif compType == &quot;uiCombo&quot; then&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiComboTextColour&quot;, pg_colorValueText)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiComboMenuFontColour&quot;, pg_colorValueText)&#10;&#9;&#9;&#9;&#9;comp:setPropertyString(&quot;uiComboArrowColour&quot;, pg_colorValueText)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;if lblName == nil or lblName == &quot;lblColorBackground&quot; then&#10;&#9;&#9;panel:getPanelEditor():setPropertyString(&quot;uiPanelBackgroundColour1&quot;, pg_colorBackground)&#10;&#9;end&#10;end&#10;"
                     luaMethodLinkedProperty="uiLabelChangedCbk" luaMethodSource="0"
                     uuid="eae2108ee3d842398110513996d333db" luaMethodValid="1"/>
          <luaMethod luaMethodName="colorsChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;colorsChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;colorsChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;colorsChanged begin value=&quot;..tostring(value))&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;&#10;&#9;local colorScheme = panel:getModulatorByName(&quot;cmbColorScheme&quot;):getModulatorValue()&#13;&#10;&#9;if colorScheme == 0 then&#13;&#10;&#9;&#9;pg_colorValueFG = &quot;FFB0C0FF&quot;&#13;&#10;&#9;&#9;pg_colorValueBG = &quot;FF6068B0&quot;&#13;&#10;&#9;&#9;pg_colorButtonOn = &quot;FFFF5000&quot;&#13;&#10;&#9;&#9;pg_colorButtonOff = &quot;FF404050&quot;&#13;&#10;&#9;&#9;pg_colorBackground = &quot;FF101010&quot;&#13;&#10;&#9;&#9;pg_colorValueText = &quot;FFFFFFFF&quot;&#13;&#10;&#9;elseif colorScheme == 1 then&#13;&#10;&#9;&#9;pg_colorValueFG = pg_user1ColorValueFG&#13;&#10;&#9;&#9;pg_colorValueBG = pg_user1ColorValueBG&#13;&#10;&#9;&#9;pg_colorButtonOn = pg_user1ColorButtonOn&#13;&#10;&#9;&#9;pg_colorButtonOff = pg_user1ColorButtonOff&#13;&#10;&#9;&#9;pg_colorBackground = pg_user1ColorBackground&#13;&#10;&#9;&#9;pg_colorValueText = pg_user1ColorValueText&#13;&#10;&#9;elseif colorScheme == 2 then&#13;&#10;&#9;&#9;pg_colorValueFG = pg_user2ColorValueFG&#13;&#10;&#9;&#9;pg_colorValueBG = pg_user2ColorValueBG&#13;&#10;&#9;&#9;pg_colorButtonOn = pg_user2ColorButtonOn&#13;&#10;&#9;&#9;pg_colorButtonOff = pg_user2ColorButtonOff&#13;&#10;&#9;&#9;pg_colorBackground = pg_user2ColorBackground&#13;&#10;&#9;&#9;pg_colorValueText = pg_user2ColorValueText&#13;&#10;&#9;end&#13;&#10;&#9;customSetLabelText(panel:getLabel(&quot;lblColorValueFG&quot;), pg_colorValueFG)&#13;&#10;&#9;customSetLabelText(panel:getLabel(&quot;lblColorValueBG&quot;), pg_colorValueBG)&#13;&#10;&#9;customSetLabelText(panel:getLabel(&quot;lblColorButtonOn&quot;), pg_colorButtonOn)&#13;&#10;&#9;customSetLabelText(panel:getLabel(&quot;lblColorButtonOff&quot;), pg_colorButtonOff)&#13;&#10;&#9;customSetLabelText(panel:getLabel(&quot;lblColorBackground&quot;), pg_colorBackground)&#13;&#10;&#9;customSetLabelText(panel:getLabel(&quot;lblColorValueText&quot;), pg_colorValueText)&#13;&#10;&#9;ChangeRequestedColor()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="1594a08471294d48baefc67ee6192346"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="colorFieldClicked" luaMethodCode="--&#10;-- Called when a mouse is down on this component&#10;--&#10;&#10;colorFieldClicked = function(--[[ CtrlrComponent --]] comp, --[[ MouseEvent --]] event)&#10;&#9;local lblName = L(comp:getOwner():getName())&#10;&#9;if ignoreModulatorUpdateEvent(&quot;colorFieldClicked &quot;..lblName) then&#10;        return&#10;&#9;end&#10;&#9;addToLog(&quot;colorFieldClicked &quot;..lblName)&#10;&#13;&#10;&#9;local newColor&#13;&#10;&#9;pg_colorLastChosen = lblName&#13;&#10;&#9;newColor = _G[&quot;pg_c&quot;..lblName:sub(4 - #lblName)]&#10;&#9;SetSliderFromColor(newColor)&#13;&#10;end"
                     luaMethodLinkedProperty="componentLuaMouseDown" luaMethodSource="0"
                     uuid="f2afb726dc634eb480a312e200e9bd54" luaMethodValid="1"/>
          <luaMethod luaMethodName="colorSliderChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;colorSliderChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;local modName = L(mod:getName())&#13;&#10;&#9;if ignoreModulatorUpdateEvent(&quot;colorSliderChanged &quot;..modName, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;colorSliderChanged &quot;..modName..&quot; value=&quot;..tostring(value)..&quot; source=&quot;..tostring(source))&#13;&#10;&#13;&#10;&#9;local txt = L(panel:getLabel(pg_colorLastChosen):getText())&#13;&#10;&#9;if modName == &quot;sldColorChooseRed&quot; then&#13;&#10;&#9;&#9;panel:getLabel(pg_colorLastChosen):setText(string.format(&quot;%s%02X%s&quot;, string.sub(txt, 1, 2), value, string.sub(txt, 5, 8)))&#13;&#10;&#9;elseif modName == &quot;sldColorChooseGreen&quot; then&#13;&#10;&#9;&#9;panel:getLabel(pg_colorLastChosen):setText(string.format(&quot;%s%02X%s&quot;, string.sub(txt, 1, 4), value, string.sub(txt, 7, 8)))&#13;&#10;&#9;else&#9;-- blue&#13;&#10;&#9;&#9;panel:getLabel(pg_colorLastChosen):setText(string.format(&quot;%s%02X&quot;, string.sub(txt, 1, 6), value))&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                     uuid="4d280c7483154c0c8401f81343e4a742" luaMethodValid="1"/>
          <luaMethod luaMethodName="saveColorScheme" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;saveColorScheme = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;saveColorScheme begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;saveColorScheme begin value=&quot;..tostring(value))&#13;&#10;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;&#9;local colorScheme = panel:getModulatorByName(&quot;cmbColorScheme&quot;):getModulatorValue()&#13;&#10;&#9;if colorScheme == 0 then&#13;&#10;&#9;&#9;displayMessage(&quot;Default color scheme cannot be modified&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;elseif colorScheme == 1 then&#13;&#10;&#9;&#9;pg_user1ColorValueFG = pg_colorValueFG&#13;&#10;&#9;&#9;pg_user1ColorValueBG = pg_colorValueBG&#13;&#10;&#9;&#9;pg_user1ColorButtonOn = pg_colorButtonOn&#13;&#10;&#9;&#9;pg_user1ColorButtonOff = pg_colorButtonOff&#13;&#10;&#9;&#9;pg_user1ColorBackground = pg_colorBackground&#13;&#10;&#9;&#9;pg_user1ColorValueText = pg_colorValueText&#13;&#10;&#9;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateUser1ColorScheme&quot;, string.format(&quot;%s|%s|%s|%s|%s|%s&quot;, pg_user1ColorValueFG,&#13;&#10;&#9;&#9;&#9;pg_user1ColorValueBG, pg_user1ColorButtonOn, pg_user1ColorButtonOff, pg_user1ColorBackground, pg_user1ColorValueText))&#10;&#9;elseif colorScheme == 2 then&#13;&#10;&#9;&#9;pg_user2ColorValueFG = pg_colorValueFG&#13;&#10;&#9;&#9;pg_user2ColorValueBG = pg_colorValueBG&#13;&#10;&#9;&#9;pg_user2ColorButtonOn = pg_colorButtonOn&#13;&#10;&#9;&#9;pg_user2ColorButtonOff = pg_colorButtonOff&#13;&#10;&#9;&#9;pg_user2ColorBackground = pg_colorBackground&#13;&#10;&#9;&#9;pg_user2ColorValueText = pg_colorValueText&#13;&#10;&#9;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateUser2ColorScheme&quot;, string.format(&quot;%s|%s|%s|%s|%s|%s&quot;, pg_user2ColorValueFG,&#13;&#10;&#9;&#9;&#9;pg_user2ColorValueBG, pg_user2ColorButtonOn, pg_user2ColorButtonOff, pg_user2ColorBackground, pg_user2ColorValueText))&#10;&#9;else&#13;&#10;&#9;&#9;displayMessage(&quot;Unknown color scheme &quot;..tostring(colorScheme))&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;displayMessage(&quot;User color scheme &quot;..tostring(colorScheme)..&quot; saved&quot;)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="11d3368930014519ac4c63bae726e2f0"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="openSettingsChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;openSettingsChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;openSettingsChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;openSettingsChanged begin&quot;)&#13;&#10;&#13;&#10;&#9;if value == 1 then&#13;&#10;&#9;&#9;panel:getCanvas():getLayerByName(&quot;SettingsLayer&quot;):setVisible(true)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;panel:getCanvas():getLayerByName(&quot;SettingsLayer&quot;):setVisible(false)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                     uuid="642b974a199b4b7eb88cd0c23ebeeedf" luaMethodValid="1"/>
          <luaMethod luaMethodName="SysExSendToFactoryChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;SysExSendToFactoryChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if value == 0 then&#13;&#10;&#9;&#9;pg_listBankSend = &quot;Bank User 0\nBank User 1\nBank User 2\nBank User 3\nBank User 4&quot;&#13;&#10;&#9;else&#13;&#10;&#9;&#9;pg_listBankSend = &quot;Bank User 0\nBank User 1\nBank User 2\nBank User 3\nBank User 4&quot;&#13;&#10;&#9;&#9;pg_listBankSend = pg_listBankSend..&quot;\nBank Fact 5\nBank Fact 6\nBank Fact 7\nBank Fact 8\nBank Fact 9&quot;&#13;&#10;&#9;end&#13;&#10;&#13;&#10; &#9;local mod2, comp, cmbValue&#13;&#10;&#9;mod2 = panel:getModulatorByName(&quot;cmbSaveBankAs&quot;)&#13;&#10;&#9;comp = mod2:getComponent()&#13;&#10;&#9;cmbValue = comp:getValue()&#9;-- selection is lost when changing content&#13;&#10;&#9;if pg_prePanelSts == &quot;PanelLoaded&quot; and pg_listBankTask[panel:getModulatorByName(&quot;cmbBankTaskTyp&quot;):getValue() + 1] == &quot;Left bank: Send as SysEx&quot; then&#13;&#10;&#9;&#9;comp:setPropertyString(&quot;uiComboContent&quot;, pg_listBankSend)&#13;&#10;&#9;&#9;comp:setValue(cmbValue, true)&#9;-- restore prior selection&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="f5599be7c25048368389fb23da718f33"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="MIDIParamSendRecvChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;MIDIParamSendRecvChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;local modName = L(mod:getName())&#13;&#10;&#9;if ignoreModulatorUpdateEvent(&quot;modulatorChanged &quot;..modName, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;MIDIParamSendRecvChanged &quot;..modName..&quot; value=&quot;..tostring(value)..&quot; source=&quot;..tostring(source))&#13;&#10;&#13;&#10;&#9;pg_MIDIParamSendRecv = value&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="8e1d88d36fb046eeb358a86142ec39a8"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethodGroup name="Program" uuid="ff2a0b06457f47249a2665b238179bfb">
          <luaMethod luaMethodName="radioButtonChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;radioButtonChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;radioButtonChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local s = L(mod:getName())&#13;&#10;&#9;addToLog(&quot;radioButtonChanged mod=&quot;..s..&quot;, value=&quot;..tostring(value)..&quot;, source=&quot;..tostring(source))&#13;&#10;&#13;&#10;&#9;-- Radio buttons select active program edit buffer 1-4&#13;&#10;&#9;if string.sub(s, 1, string.len(s) - 1) == &quot;btnEditBuffer&quot; then&#13;&#10;&#9;&#9;local bufNum = tonumber(string.sub(s, -1))&#13;&#10;&#9;&#9;if pg_activeEditBuffer ~= bufNum then&#13;&#10;&#9;&#9;&#9;pg_activeEditBuffer = bufNum&#13;&#10;&#9;&#9;&#9;renderProgramEditor()&#13;&#10;&#9;&#9;&#9;sendProgToSynth()&#13;&#10;&#9;&#9;&#9;addToLog(&quot;changed active edit buffer to &quot;..tostring(bufNum))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- At least one button in a radio button group needs to be switched On, but Ctrlr radio group allows the&#13;&#10;&#9;-- last button to be turned off if clicked twice. This method forces the value back to one if it's zero.&#13;&#10;&#9;-- NOTE: setValue will cause this button to re-invoke this method, so checking for value == 0 to avoid&#13;&#10;&#9;-- an infinite loop of value change invoking method which changes value which invokes method ...&#13;&#10;&#9;if value == 0 then&#13;&#10;&#9;&#9;mod:setModulatorValue(1, false, false, false)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="0c75797a586f4168a45f727316a860d8"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="updateBufProgName" luaMethodCode="function updateBufProgName(--[[ number --]] value)&#13;&#10;&#9;local parmValue&#10;&#9;parmValue = progParmGet(pg_editBuffer[value], &quot;ProgramName&quot;)&#13;&#10;&#9;panel:getComponent(&quot;lblBuf&quot;..tostring(value)..&quot;ProgName&quot;):setPropertyString(&quot;uiLabelText&quot;, parmValue)&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="ac17358037d14dcb9a5fb1163e78ff57"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="initBuffer" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;initBuffer = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;initBuffer BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;initBuffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#13;&#10;&#9;local programData = initProgram()&#13;&#10;&#9;pg_editBuffer[pg_activeEditBuffer] = programData&#13;&#10;&#9;displayMessage(&quot;Edit buffer &quot;..tostring(pg_activeEditBuffer)..&quot; initialized&quot;)&#13;&#10;&#9;renderProgramEditor()&#13;&#10;&#9;sendProgToSynth(true)&#13;&#10;&#9;updateBufProgName(pg_activeEditBuffer)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="e68ded4d3a954a76b5c30da28bad2fc8"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="loadFile" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;loadFile = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;loadFile begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;loadFile begin&quot;)&#13;&#10;&#13;&#10;    local file = utils.openFileWindow(&quot;Load edit buffer from file&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true)&#13;&#10;&#13;&#10;&#9;if file:existsAsFile() == false then&#13;&#10;&#9;&#9;addToLog(&quot;loadFile canceled&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Load file canceled&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local info1 = file:getFullPathName()&#13;&#10;&#9;loadFromFile(file)&#13;&#10;&#13;&#10;&#9;if next(pg_fileProgramData) == nil or #pg_fileProgramData == 0 then&#13;&#10;&#9;&#9;addToLog(&quot;loadFile no data retrieved&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Load file: no data retrieved&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if #pg_fileProgramData == 1 then&#13;&#10;&#9;&#9;pg_editBuffer[pg_activeEditBuffer] = pg_fileProgramData[1]&#13;&#10;&#9;&#9;renderProgramEditor()&#13;&#10;&#9;&#9;sendProgToSynth(true)&#13;&#10;&#9;&#9;updateBufProgName(pg_activeEditBuffer)&#13;&#10;&#9;&#9;displayMessage(&quot;File loaded to edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;    -- #pg_fileProgramData must be &gt; 1&#13;&#10;&#9;if utils.questionWindow(&quot;Load file to bank?&quot;, &quot;File contains multiple programs - load to bank &quot;..tostring(pg_leftBank)..&quot; instead of edit buffer?&quot;, &quot;Ok&quot;, &quot;Cancel&quot;) then&#13;&#10;&#9;&#9;pg_bankProgramData[pg_leftBank] = {}&#13;&#10;&#9;&#9;pg_bankInfo[pg_leftBank].fullPathName = info1&#13;&#10;&#9;&#9;pg_bankInfo[pg_leftBank].sourceOfContents = &quot;file&quot;&#13;&#10;&#9;&#9;pg_bankInfo[pg_leftBank].bankChoice = pg_fileBankNum&#13;&#10;&#9;&#9;for i = 1, #pg_fileProgramData do&#13;&#10;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][i] = pg_fileProgramData[i]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;loadLeftProgramNameList()&#13;&#10;&#9;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;&#9;loadRightProgramNameList()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;displayMessage(&quot;File loaded to bank &quot;..tostring(pg_leftBank)..&quot; with &quot;..tostring(#pg_bankProgramData[pg_leftBank])..&quot; programs&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;displayMessage(&quot;Load file canceled&quot;)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="fdcafc56cd814d8fbf4dde4454e924a1"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="saveFile" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;saveFile = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;saveFile begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;saveFile begin&quot;)&#13;&#10;&#13;&#10;    local programData, programEditCommand, data&#13;&#10;&#9;programData = utils.packDsiData(pg_editBuffer[pg_activeEditBuffer])&#13;&#10;&#9;programEditCommand = pg_synthInfo.programEditSysExHeader..&quot; &quot;..programData:toHexString(1)..&quot; f7&quot;&#13;&#10;&#9;data = MemoryBlock(programEditCommand)&#13;&#10;&#9;addToLog(&quot;saveFile SysEx size=&quot;..tostring(data:getSize()))&#13;&#10;&#9;&#13;&#10;&#9;local file = utils.saveFileWindow(&quot;Save program&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true)&#13;&#10;&#13;&#10;&#9;if file:isValid() == false then&#13;&#10;&#9;&#9;addToLog(&quot;saveFile canceled&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Save file canceled&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if file:existsAsFile() == false then&#13;&#10;&#9;&#9;if file:create() == false then&#13;&#10;&#9;&#9;&#9;utils.warnWindow(&quot;Save file&quot;, &quot;Error creating the file&quot;)&#13;&#10;&#9;&#9;&#9;addToLog(&quot;saveFile create error&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if file:replaceWithData(data) == false then&#13;&#10;&#9;&#9;utils.warnWindow(&quot;Save file&quot;, &quot;Failed to write data to file.&quot;)&#13;&#10;&#9;&#9;&#9;addToLog(&quot;saveFile Failed to write data to file&quot;)&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;addToLog(&quot;saveFile size=&quot;..tostring(data:getSize()))&#13;&#10;&#9;displayMessage(&quot;Edit buffer &quot;..tostring(pg_activeEditBuffer)..&quot; saved to file&quot;)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="1bb7c9785c76408db6ce05825ab45701"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="sendBuffer" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;sendBuffer = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if ignoreModulatorUpdateEvent(&quot;sendBuffer&quot;, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;sendBuffer value=&quot;..tostring(value)..&quot; source=&quot;..tostring(source))&#13;&#10;&#13;&#10;&#9;sendProgToSynth(true)&#13;&#10;end"
                     luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                     uuid="2b32aefeec4b4ae9b0178dbf8b9884d2" luaMethodValid="1"/>
          <luaMethod luaMethodName="doProgTask" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;doProgTask = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;doProgTask begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;doProgTask begin value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;pg_progTaskTyp = panel:getComponent(&quot;cmbProgTaskTyp&quot;):getValue()&#13;&#10;&#9;if pg_progTaskTyp &lt; 0 then&#13;&#10;&#9;&#9;addToLog(&quot;doProgTask No program task selected&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;No program task selected&quot;)&#13;&#10;&#9;&#9;mod:setValue(0, true, true)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if pg_listProgTask[pg_progTaskTyp + 1] == &quot;Init&quot; then&#13;&#10;&#9;&#9;initBuffer()&#13;&#10;&#9;elseif pg_listProgTask[pg_progTaskTyp + 1] == &quot;Copy&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;lblCopyDest&quot;):setPropertyString(&quot;uiLabelText&quot;, &quot;Destination: Edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;local buf = panel:getModulatorByName(&quot;cmbCopyFromEditBuffer&quot;):getValue()&#13;&#10;&#9;&#9;if buf + 1 == pg_activeEditBuffer then&#13;&#10;&#9;&#9;&#9;-- Start out with source buffer set to a different buffer than the active one&#13;&#10;&#9;&#9;&#9;if buf == 0 then&#13;&#10;&#9;&#9;&#9;&#9;panel:getModulatorByName(&quot;cmbCopyFromEditBuffer&quot;):setModulatorValue(1, false, false, false)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;panel:getModulatorByName(&quot;cmbCopyFromEditBuffer&quot;):setModulatorValue(buf - 1, false, false, false)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;panel:getCanvas():getLayerByName(&quot;CopyLayer&quot;):setVisible(true)&#13;&#10;&#9;elseif pg_listProgTask[pg_progTaskTyp + 1] == &quot;Compare&quot; then&#13;&#10;&#9;&#9;panel:getComponent(&quot;lblCompareFrom&quot;):setPropertyString(&quot;uiLabelText&quot;, &quot;Compare from: Edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;local buf = panel:getModulatorByName(&quot;cmbCompareToEditBuffer&quot;):getValue()&#13;&#10;&#9;&#9;if buf + 1 == pg_activeEditBuffer then&#13;&#10;&#9;&#9;&#9;-- Start out with compare buffer set to a different buffer than the active one&#13;&#10;&#9;&#9;&#9;if buf == 0 then&#13;&#10;&#9;&#9;&#9;&#9;panel:getModulatorByName(&quot;cmbCompareToEditBuffer&quot;):setModulatorValue(1, false, false, false)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;panel:getModulatorByName(&quot;cmbCompareToEditBuffer&quot;):setModulatorValue(buf - 1, false, false, false)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;panel:getComponent(&quot;boxProgCompResult&quot;):setPropertyString(&quot;uiListBoxContent&quot;, &quot;&quot;)&#13;&#10;&#9;&#9;panel:getCanvas():getLayerByName(&quot;CompareLayer&quot;):setVisible(true)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;addToLog(&quot;doProgTask Error - unknown program task &quot;..tostring(pg_progTaskTyp)..&quot;.&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Error - unknown program task &quot;..tostring(pg_progTaskTyp)..&quot;.&quot;)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="30d56cad78b041daa5fef1b6cf43df00"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="doProgTaskCopy" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;doProgTaskCopy = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;doProgTaskCopy begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;local modName = L(mod:getName())&#13;&#10;&#9;addToLog(&quot;doProgTaskCopy begin mod=&quot;..modName..&quot; value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local buf = panel:getModulatorByName(&quot;cmbCopyFromEditBuffer&quot;):getValue()&#13;&#10;&#9;if modName == &quot;btnProgCopyOk&quot; then&#13;&#10;&#9;&#9;if buf + 1 == pg_activeEditBuffer then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;doProgTaskCopy Copy source and destination are the same - nothing done&quot;)&#13;&#10;&#9;&#9;&#9;displayMessage(&quot;Copy source and destination are the same - nothing done&quot;)&#13;&#10;&#9;&#9;elseif panel:getModulatorByName(&quot;btnCopySequence&quot;):getValue() == 1 then&#13;&#10;&#9;&#9;&#9;-- Copy sequence notes, then tempo and clock divide&#13;&#10;&#9;&#9;&#9;progParmSet(pg_editBuffer[pg_activeEditBuffer], &quot;PolySequence&quot;, progParmGet(pg_editBuffer[buf + 1], &quot;PolySequence&quot;, true), true)&#13;&#10;&#9;&#9;&#9;progParmSet(pg_editBuffer[pg_activeEditBuffer], &quot;ClockBPM&quot;, progParmGet(pg_editBuffer[buf + 1], &quot;ClockBPM&quot;, true), true)&#13;&#10;&#9;&#9;&#9;renderProgramEditor(&quot;ClockBPM&quot;)&#13;&#10;&#9;&#9;&#9;progParmSet(pg_editBuffer[pg_activeEditBuffer], &quot;ClockTimeSig&quot;, progParmGet(pg_editBuffer[buf + 1], &quot;ClockTimeSig&quot;, true), true)&#13;&#10;&#9;&#9;&#9;renderProgramEditor(&quot;ClockTimeSig&quot;)&#13;&#10;&#9;&#9;&#9;addToLog(&quot;doProgTaskCopy edit buffer &quot;..tostring(buf + 1)..&quot; sequence copied to edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;&#9;sendProgToSynth(true)&#13;&#10;&#9;&#9;&#9;displayMessage(&quot;Edit buffer &quot;..tostring(buf + 1)..&quot; sequence copied to edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;&#9;panel:getCanvas():getLayerByName(&quot;CopyLayer&quot;):setVisible(false)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;pg_editBuffer[pg_activeEditBuffer] = MemoryBlock(pg_editBuffer[buf + 1])&#13;&#10;&#9;&#9;&#9;addToLog(&quot;doProgTaskCopy edit buffer &quot;..tostring(buf + 1)..&quot; copied to edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;&#9;renderProgramEditor()&#13;&#10;&#9;&#9;&#9;sendProgToSynth(true)&#13;&#10;&#9;&#9;&#9;displayMessage(&quot;Edit buffer &quot;..tostring(buf + 1)..&quot; copied to edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;&#9;updateBufProgName(pg_activeEditBuffer)&#13;&#10;&#9;&#9;&#9;panel:getCanvas():getLayerByName(&quot;CopyLayer&quot;):setVisible(false)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;panel:getCanvas():getLayerByName(&quot;CopyLayer&quot;):setVisible(false)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="a7bff5c300cd4ed58661659a539e89ac"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="doProgTaskCompare" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;doProgTaskCompare = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;doProgTaskCompare begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;local modName = L(mod:getName())&#13;&#10;&#9;addToLog(&quot;doProgTaskCompare begin mod=&quot;..modName..&quot; value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local buf = panel:getModulatorByName(&quot;cmbCompareToEditBuffer&quot;):getValue()&#13;&#10;&#9;if modName ~= &quot;btnProgCompareOk&quot; then&#13;&#10;&#9;&#9;panel:getCanvas():getLayerByName(&quot;CompareLayer&quot;):setVisible(false)&#13;&#10;&#9;&#9;mod:setValue(0, true, true)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;panel:getModulatorByName(&quot;boxProgCompResult&quot;):setValue(0, true, true) -- first row selected in combo box&#13;&#10;&#9;local compResult&#13;&#10;&#9;if buf + 1 == pg_activeEditBuffer then&#13;&#10;&#9;&#9;addToLog(&quot;doProgTaskCompare Compare source and destination are the same - nothing done&quot;)&#13;&#10;&#9;&#9;compResult = &quot;Compare source and destination are the same&quot;&#13;&#10;&#9;&#9;panel:getComponent(&quot;boxProgCompResult&quot;):setPropertyString(&quot;uiListBoxContent&quot;, compResult)&#13;&#10;&#9;&#9;mod:setValue(0, true, true)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;compResult = &quot;Parameter           Buffer &quot;..tostring(pg_activeEditBuffer)..&quot;             Buffer &quot;..tostring(buf + 1)&#13;&#10;&#9;local isTheSame, parmDiff, diffOffset, oldData, newData, parmName, parmLen, parmType, oldValue, newValue, i&#13;&#10;&#9;isTheSame = true&#13;&#10;&#9;for k,v in ipairs(pg_synthProg) do&#13;&#10;&#9;&#9;if v.parmType == &quot;text&quot; then&#13;&#10;&#9;&#9;&#9;oldData = pg_editBuffer[pg_activeEditBuffer]:getRange(v.parmSyxPos, 20):toString()&#13;&#10;&#9;&#9;&#9;newData = pg_editBuffer[buf + 1]:getRange(v.parmSyxPos, 20):toString()&#13;&#10;&#9;&#9;&#9;parmLen = v.parmLen&#13;&#10;&#9;&#9;&#9;parmType = &quot;text&quot;&#13;&#10;&#9;&#9;elseif v.parmType == &quot;blob&quot; then&#13;&#10;&#9;&#9;&#9;parmLen = v.parmLen&#13;&#10;&#9;&#9;&#9;oldData = pg_editBuffer[pg_activeEditBuffer]:getRange(v.parmSyxPos, parmLen)&#13;&#10;&#9;&#9;&#9;newData = pg_editBuffer[buf + 1]:getRange(v.parmSyxPos, parmLen)&#13;&#10;&#9;&#9;&#9;parmType = &quot;blob&quot;&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;oldData = pg_editBuffer[pg_activeEditBuffer]:getByte(v.parmSyxPos)&#13;&#10;&#9;&#9;&#9;newData = pg_editBuffer[buf + 1]:getByte(v.parmSyxPos)&#13;&#10;&#9;&#9;&#9;parmLen = 1&#13;&#10;&#9;&#9;&#9;parmType = &quot;other&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;parmDiff = false&#13;&#10;&#9;&#9;if parmType == &quot;text&quot; or parmType == &quot;other&quot; then&#13;&#10; &#9;&#9;&#9;if oldData ~= newData then&#13;&#10;&#9;&#9;&#9;&#9;parmDiff = true&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#9;-- &quot;blob&quot;&#13;&#10;&#9;&#9;&#9;for j=0, parmLen - 1, 1 do&#13;&#10;&#9;&#9;&#9;&#9;if oldData:getByte(j) ~= newData:getByte(j) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;parmDiff = true&#13;&#10;&#9;&#9;&#9;&#9;&#9;diffOffset = j&#13;&#10;&#9;&#9;&#9;&#9;&#9;break&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if parmDiff then&#13;&#10;&#9;&#9;&#9;isTheSame = false&#13;&#10;&#9;&#9;&#9;parmName = v.parmName&#13;&#10;&#9;&#9;&#9;if parmType == &quot;text&quot; then&#13;&#10;&#9;&#9;&#9;&#9;oldValue = oldData&#13;&#10;&#9;&#9;&#9;&#9;newValue = newData&#13;&#10;&#9;&#9;&#9;elseif parmType == &quot;blob&quot; then&#13;&#10;&#9;&#9;&#9;&#9;if diffOffset &lt; 7 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;oldValue = oldData:toHexString(1)&#13;&#10;&#9;&#9;&#9;&#9;&#9;newValue = newData:toHexString(1)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;oldValue = tostring(diffOffset)..&quot;:&quot;..oldData:getRange(diffOffset, parmLen - diffOffset):toHexString(1)&#13;&#10;&#9;&#9;&#9;&#9;&#9;newValue = tostring(diffOffset)..&quot;:&quot;..newData:getRange(diffOffset, parmLen - diffOffset):toHexString(1)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;elseif v.parmType:sub(1, 4) == &quot;list&quot; then&#13;&#10;&#9;&#9;&#9;&#9;oldValue = string.format(&quot;%s&quot;, pg_synthProgValList[v.parmType][oldData + 1])&#13;&#10;&#9;&#9;&#9;&#9;newValue = string.format(&quot;%s&quot;, pg_synthProgValList[v.parmType][newData + 1])&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;oldValue = string.format(&quot;%3d&quot;, oldData)&#13;&#10;&#9;&#9;&#9;&#9;newValue = string.format(&quot;%3d&quot;, newData)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;compResult = string.format(&quot;%s\n%-20s %-20s %-20s&quot;, compResult, parmName:sub(1, 20), oldValue:sub(1, 20) , newValue:sub(1, 20))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if isTheSame then&#13;&#10;&#9;&#9;addToLog(&quot;doProgTaskCopy edit buffer &quot;..tostring(buf + 1)..&quot; is the same as edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;compResult = &quot;Edit buffer &quot;..tostring(buf + 1)..&quot; is the same as edit buffer &quot;..tostring(pg_activeEditBuffer)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;addToLog(&quot;doProgTaskCopy edit buffer &quot;..tostring(buf + 1)..&quot; differs from edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;end&#13;&#10;&#9;panel:getComponent(&quot;boxProgCompResult&quot;):setPropertyString(&quot;uiListBoxContent&quot;, compResult)&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="6b854a7f884d443282447c4490d7883e"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="progParmGet" luaMethodCode="--&#10;-- Get parameter value from SysEx program data&#13;&#10;-- @editBuf   MemoryBlock containing SysEx program data&#10;-- @parmName   name as defined in pg_synthProg&#10;-- @noMap     if true, return raw SysEx value without mapping to component value&#10;--&#10;-- returns parameter value&#10;--&#10;progParmGet = function(--[[ MemoryBlock --]] editBuf, --[[ string --]] parmName, --[[ boolean --]] noMap)&#10;&#9;local i, j, v, parmValue, parmMin&#10;&#9;j = pg_synthProgInvertName[parmName]&#10;&#9;if j == nil then&#13;&#10;&#9;&#9;addToLog(&quot;progParmGet ERROR parmName=&quot;..parmName..&quot; not found&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;v = pg_synthProg[j]&#13;&#10;&#13;&#10;&#9;if v.parmType == &quot;text&quot; then&#10;&#9;&#9;parmValue = editBuf:getRange(v.parmSyxPos, v.parmLen):toString()&#10;&#9;elseif v.parmType == &quot;blob&quot; then&#10;&#9;&#9;parmValue = editBuf:getRange(v.parmSyxPos, v.parmLen)&#10;&#9;else&#13;&#10;&#9;&#9;parmValue = editBuf:getByte(v.parmSyxPos)&#10;&#9;&#9;parmMin = v.parmMin&#13;&#10;&#9;&#9;if parmMin == nil then&#13;&#10;&#9;&#9;&#9;parmMin = 0&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if parmValue &lt; parmMin then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;progParmGet Warning parmName=&quot;..parmName..&quot; value=&quot;..tostring(parmValue)..&quot; less than parmMin=&quot;..tostring(parmMin)..&quot; - using min instead&quot;)&#13;&#10;&#9;&#9;&#9;parmValue = parmMin&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if parmValue &gt; v.parmMax then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;progParmGet Warning parmName=&quot;..parmName..&quot; value=&quot;..tostring(parmValue)..&quot; greater than parmMax=&quot;..tostring(v.parmMax)..&quot; - using max instead&quot;)&#13;&#10;&#9;&#9;&#9;parmValue = v.parmMax&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if noMap then&#10;&#9;&#9;return parmValue&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return mapProgParmValToComp(parmValue, parmName)&#13;&#10;&#9;end&#10;end&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="6e0a760867e141bda8d7188c2612638e"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="progParmSet" luaMethodCode="--&#10;-- Set parameter value in SysEx program data&#13;&#10;-- @editBuf   MemoryBlock containing SysEx program data&#10;-- @parmName   name as defined in pg_synthProg&#10;-- @value   value to be stored&#10;-- @noMap     if true, input is raw SysEx value (no need to map from component value)&#10;--&#10;progParmSet = function(--[[ MemoryBlock --]] editBuf, --[[ string --]] parmName, --[[ string --]] value, --[[ boolean --]] noMap)&#10;&#9;local j, v, parmValue, parmMin&#10;&#9;j = pg_synthProgInvertName[parmName]&#10;&#9;if j == nil then&#13;&#10;&#9;&#9;addToLog(&quot;progParmSet ERROR parmName=&quot;..parmName..&quot; not found&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;v = pg_synthProg[j]&#13;&#10;&#13;&#10;&#9;if noMap then&#13;&#10;&#9;&#9;parmValue = value&#13;&#10;&#9;else&#13;&#10;&#9;&#9;parmValue = mapCompValToProgParm(value, parmName)&#13;&#10;&#9;end&#13;&#10;&#10;&#9;if v.parmType == &quot;blob&quot; then&#10;&#9;&#9;for i = 1, v.parmLen do&#13;&#10;&#9;&#9;&#9;editBuf:setByte(v.parmSyxPos + i - 1, value:getByte(i - 1))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if v.parmType == &quot;text&quot; then&#13;&#10;&#9;&#9;for i = 1, v.parmLen do&#13;&#10;&#9;&#9;&#9;editBuf:setByte(v.parmSyxPos + i - 1, string.byte(parmValue, i))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;parmMin = v.parmMin&#13;&#10;&#9;if parmMin == nil then&#13;&#10;&#9;&#9;parmMin = 0&#13;&#10;&#9;end&#13;&#10;&#9;if parmValue &lt; parmMin then&#13;&#10;&#9;&#9;addToLog(&quot;progParmSet Warning parmName=&quot;..parmName..&quot; value=&quot;..tostring(parmValue)..&quot; less than parmMin=&quot;..tostring(parmMin)..&quot; - using min instead&quot;)&#13;&#10;&#9;&#9;parmValue = parmMin&#13;&#10;&#9;end&#13;&#10;&#9;if parmValue &gt; v.parmMax then&#13;&#10;&#9;&#9;addToLog(&quot;progParmSet Warning parmName=&quot;..parmName..&quot; value=&quot;..tostring(parmValue)..&quot; greater than parmMax=&quot;..tostring(v.parmMax)..&quot; - using max instead&quot;)&#13;&#10;&#9;&#9;parmValue = v.parmMax&#13;&#10;&#9;end&#13;&#10;&#9;editBuf:setByte(v.parmSyxPos, parmValue)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="8644b66d9c4a4699a2b28dd84f535318"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="mapCompValToProgParm" luaMethodCode="--&#10;-- Map panel component value to SysEx program parameter value&#13;&#10;-- @compValue  value from panel component&#10;-- @parmName   name as defined in pg_synthProg&#10;--&#10;-- returns SysEx program parameter value&#10;--&#10;mapCompValToProgParm = function(--[[ string --]] compValue, --[[ string --]] parmName)&#13;&#10;&#9;local j, v, parmValue&#13;&#10;&#9;j = pg_synthProgInvertName[parmName]&#10;&#9;if j == nil then&#13;&#10;&#9;&#9;addToLog(&quot;mapCompValToProgParm ERROR parmName=&quot;..parmName..&quot; not found&quot;)&#13;&#10;&#9;&#9;return compValue&#13;&#10;&#9;end&#13;&#10;&#9;v = pg_synthProg[j]&#13;&#10;&#13;&#10;&#9;if v.parmType == &quot;signed&quot; then&#13;&#10;&#9;&#9;parmValue = compValue + (v.parmMax / 2)&#13;&#10;&#9;&#9;return parmValue&#13;&#10;&#9;elseif v.parmType == &quot;text&quot; then&#10;&#9;&#9;parmValue = string.sub(compValue..&quot;                    &quot;, 1, v.parmLen) -- pad with trailing spaces&#13;&#10;&#9;&#9;return parmValue&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return compValue&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="ed0110680f7048219f141a6598f2de6b"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="mapProgParmValToComp" luaMethodCode="--&#10;-- Map SysEx program parameter value to panel component value&#13;&#10;-- @parmValue   value from SysEx program parameter&#10;-- @parmName   name as defined in pg_synthProg&#10;--&#10;-- returns component value&#10;--&#10;mapProgParmValToComp = function(--[[ string --]] parmValue, --[[ string --]] parmName)&#13;&#10;&#9;local i, j, v, compValue&#13;&#10;&#9;j = pg_synthProgInvertName[parmName]&#10;&#9;if j == nil then&#13;&#10;&#9;&#9;addToLog(&quot;mapProgParmValToComp ERROR parmName=&quot;..parmName..&quot; not found&quot;)&#13;&#10;&#9;&#9;return parmValue&#13;&#10;&#9;end&#13;&#10;&#9;v = pg_synthProg[j]&#13;&#10;&#13;&#10;&#9;if v.parmType == &quot;signed&quot; then&#13;&#10;&#9;&#9;compValue = parmValue - (v.parmMax / 2)&#13;&#10;&#9;&#9;return compValue&#13;&#10;&#9;elseif v.parmType == &quot;text&quot; then&#10;&#9;&#9;i = string.len(parmValue)&#10;&#9;&#9;while i &gt; 1 and string.sub(parmValue, i, i) == &quot; &quot; do&#10;&#9;&#9;&#9;i = i - 1&#10;&#9;&#9;end&#10;&#9;&#9;compValue = string.sub(parmValue, 1, i) -- trim trailing blanks&#10;&#9;&#9;return compValue&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return parmValue&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="73d9477aad5f4b859f49a1832b6f1ae5"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="mapCompValToCC" luaMethodCode="--&#10;-- Map panel component value to MIDI CC value&#13;&#10;-- @compValue  value from panel component&#10;-- @parmName   name as defined in pg_synthProg&#10;--&#10;-- returns CC value&#10;--&#10;mapCompValToCC = function(--[[ string --]] compValue, --[[ string --]] parmName)&#13;&#10;&#9;local j, v, ccValue&#13;&#10;&#9;j = pg_synthProgInvertName[parmName]&#10;&#9;if j == nil then&#13;&#10;&#9;&#9;addToLog(&quot;mapCompValToCC ERROR parmName=&quot;..parmName..&quot; not found&quot;)&#13;&#10;&#9;&#9;return compValue&#13;&#10;&#9;end&#13;&#10;&#9;v = pg_synthProg[j]&#13;&#10;&#13;&#10;&#9;if v.parmType == &quot;unsigned&quot; and v.parmMax &gt; 127 then&#13;&#10;&#9;&#9;ccValue = math.floor((compValue * 127 / v.parmMax) + 0.5)&#13;&#10;&#9;&#9;return ccValue&#13;&#10;&#9;elseif v.parmType == &quot;signed&quot; then&#13;&#10; &#9;&#9;if v.parmMax &gt; 127 then  -- special case&#10;&#9;&#9;&#9;if compValue &lt;= 0 then&#13;&#10;&#9;&#9;&#9;&#9;ccValue = math.floor((compValue + (v.parmMax / 2)) * 63 / (v.parmMax / 2))&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;ccValue = math.floor((compValue + (v.parmMax / 2)) * 64 / (v.parmMax / 2)) - 1&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;return ccValue&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;ccValue = compValue + (v.parmMax / 2)&#13;&#10;&#9;&#9;&#9;return ccValue&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return compValue&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="548297ee271c4de8a95a80dae728c41f"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="mapCCValToComp" luaMethodCode="--&#10;-- Map MIDI CC value to panel component value&#13;&#10;-- @ccValue   value from MIDI CC&#10;-- @parmName   name as defined in pg_synthProg&#10;--&#10;-- returns component value&#10;--&#10;mapCCValToComp = function(--[[ string --]] ccValue, --[[ string --]] parmName)&#13;&#10;&#9;local i, j, v, compValue&#13;&#10;&#9;j = pg_synthProgInvertName[parmName]&#10;&#9;if j == nil then&#13;&#10;&#9;&#9;addToLog(&quot;mapCCValToComp ERROR parmName=&quot;..parmName..&quot; not found&quot;)&#13;&#10;&#9;&#9;return ccValue&#13;&#10;&#9;end&#13;&#10;&#9;v = pg_synthProg[j]&#13;&#10;&#13;&#10;&#9;if v.parmType == &quot;unsigned&quot;and v.parmMax &gt; 127 then&#13;&#10;&#9;&#9;compValue = math.floor((ccValue * v.parmMax / 127) + 0.5)&#13;&#10;&#9;&#9;return compValue&#13;&#10;&#9;elseif v.parmType == &quot;signed&quot; then&#13;&#10; &#9;&#9;if v.parmMax &gt; 127 then  -- special case&#13;&#10;&#9;&#9;&#9;if ccValue == 63 then&#13;&#10;&#9;&#9;&#9;&#9;compValue = 0&#13;&#10;&#9;&#9;&#9;elseif ccValue &lt; 63 then&#13;&#10;&#9;&#9;&#9;&#9;compValue = math.floor(ccValue * (v.parmMax / 2) / 63) - (v.parmMax / 2)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;compValue = math.floor((ccValue + 1) * (v.parmMax / 2) / 64) - (v.parmMax / 2)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;compValue = ccValue - (v.parmMax / 2)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return compValue&#13;&#10;&#9;else&#13;&#10;&#9;&#9;return ccValue&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="2b866a4070884d97889a5705369ba473"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethodGroup name="Bank" uuid="7f16fa8e844b45daa58990a140889f05">
          <luaMethodGroup name="BankTask" uuid="314b197acd2f4209952c973d359efbda">
            <luaMethod luaMethodName="doBankTaskLoad" luaMethodCode="doBankTaskLoad = function(--[[ number --]] bank, --[[ boolean --]] reloadFromFile)&#13;&#10;    local file&#13;&#10;&#9;if bank &gt; pg_numberOfBanks then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskLoad Cannot load file into search result bank&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Cannot load file into search result bank&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if reloadFromFile then&#13;&#10;    &#9;file = File(pg_bankInfo[bank].fullPathName)&#13;&#10;&#9;else&#13;&#10;    &#9;file = utils.openFileWindow(&quot;Load bank from file&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if file:existsAsFile() == false then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskLoad canceled&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Load bank from file canceled&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local info1 = file:getFullPathName()&#13;&#10;&#9;loadFromFile(file)&#13;&#10;&#13;&#10;&#9;if next(pg_fileProgramData) == nil or #pg_fileProgramData == 0 then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskLoad no data retrieved&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Load bank from file: no data retrieved&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_bankProgramData[bank] = {}&#13;&#10;&#9;pg_bankInfo[bank].fullPathName = info1&#13;&#10;&#9;panel:setPropertyString(&quot;ZZCustomBank&quot;..tostring(bank)..&quot;Path&quot;, info1)&#10;&#9;pg_bankInfo[bank].sourceOfContents = &quot;file&quot;&#13;&#10;&#9;pg_bankInfo[bank].bankChoice = pg_fileBankNum&#13;&#10;&#9;for i = 1, #pg_fileProgramData do&#13;&#10;&#9;&#9;pg_bankProgramData[bank][i] = pg_fileProgramData[i]&#13;&#10;&#9;end&#13;&#10;&#9;if pg_leftBank == bank then&#13;&#10;&#9;&#9;loadLeftProgramNameList()&#13;&#10;&#9;&#9;panel:getModulatorByName(&quot;cmbSaveBankAs&quot;):getComponent():setValue(pg_fileBankNum, true)&#13;&#10;&#9;end&#13;&#10;&#9;if pg_rightBank == bank then&#13;&#10;&#9;&#9;loadRightProgramNameList()&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;doBankTaskLoad File loaded to bank &quot;..tostring(bank)..&quot; with &quot;..tostring(#pg_bankProgramData[bank])..&quot; programs&quot;)&#13;&#10;&#9;displayMessage(&quot;File loaded to bank &quot;..tostring(bank)..&quot; with &quot;..tostring(#pg_bankProgramData[bank])..&quot; programs&quot;)&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="2ecbeaf08f264ec58e3b3fcdcc71fa05"
                       luaMethodValid="1"/>
            <luaMethod luaMethodName="doBankTaskSave" luaMethodCode="doBankTaskSave = function(--[[ boolean --]] promptForFile)&#13;&#10;&#9;if pg_bankProgramData[pg_leftBank] == nil or #pg_bankProgramData[pg_leftBank] == 0 then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskSave no programs in bank&quot;)&#13;&#10;&#9;&#9;utils.warnWindow(&quot;Save bank&quot;, &quot;No programs in bank - nothing to do&quot;)&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local bankNum = panel:getComponent(&quot;cmbSaveBankAs&quot;):getValue()&#13;&#10;&#9;local progLimit = #pg_bankProgramData[pg_leftBank]&#13;&#10;&#9;if bankNum &lt; 10 and progLimit &gt; 100 then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskSave More than 100 programs to user file - option to save first 100&quot;)&#13;&#10;&#9;&#9;if utils.questionWindow(&quot;Save beginning of bank to file?&quot;, &quot;Bank file holds 100 programs maximum - save only first 100 programs to file?&quot;, &quot;Ok&quot;, &quot;Cancel&quot;) then&#13;&#10;&#9;&#9;&#9;progLimit = 100&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;displayMessage(&quot;Save bank to file canceled&quot;)&#13;&#10;        &#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;    local file, programData, programEditCommand, data, fileData&#13;&#10;&#9;fileData = MemoryBlock(0)&#13;&#10;&#9;for j = 1, progLimit do&#13;&#10;    &#9;programData = utils.packDsiData(pg_bankProgramData[pg_leftBank][j])&#13;&#10;&#9;&#9;if bankNum == 10 then  -- Edit buffers&#13;&#10;    &#9;&#9;programEditCommand = pg_synthInfo.programEditSysExHeader..&quot; &quot;..programData:toHexString(1)..&quot; f7&quot;&#13;&#10;&#9;&#9;else&#13;&#10;    &#9;&#9;programEditCommand = pg_synthInfo.programDataSysExHeader..&quot; 0&quot;..tostring(bankNum)..&quot; &quot;..string.format(&quot;%02x&quot;,j - 1)..programData:toHexString(1)..&quot; f7&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#9; &#9;data = MemoryBlock(programEditCommand)&#13;&#10;&#9;&#9;fileData:append(data)&#13;&#10;--addToLog(&quot;doBankTask DEBUG: date size=&quot;..tostring(data:getSize())..&quot; fileData size=&quot;..fileData:getSize())&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if promptForFile then&#13;&#10;&#9;&#9;file = utils.saveFileWindow(&quot;Save bank&quot;, File(&quot;&quot;), &quot;*.syx&quot;, true)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;file = File(pg_bankInfo[pg_leftBank].fullPathName)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if file:isValid() == false then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskSave canceled&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Save bank to file canceled&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if file:existsAsFile() == false then&#13;&#10;&#9;&#9;if file:create() == false then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;doBankTaskSave create error&quot;)&#13;&#10;&#9;&#9;&#9;utils.warnWindow(&quot;Save bank&quot;, &quot;Error creating the file&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local info1 = file:getFullPathName()&#13;&#10;&#9;if file:replaceWithData(fileData) == false then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskSave Failed to write data to file&quot;)&#13;&#10;&#9;&#9;utils.warnWindow(&quot;Save bank&quot;, &quot;Failed to write data to file.&quot;)&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_bankInfo[pg_leftBank].sourceOfContents = &quot;file&quot;&#13;&#10;&#9;if bankNum &lt; 10 then&#13;&#10;&#9;&#9;pg_bankInfo[pg_leftBank].bankChoice = bankNum&#13;&#10;&#9;else&#13;&#10;&#9;&#9;pg_bankInfo[pg_leftBank].bankChoice = -1&#13;&#10;&#9;end&#13;&#10;&#9;pg_bankInfo[pg_leftBank].fullPathName = info1&#13;&#10;&#9;panel:setPropertyString(&quot;ZZCustomBank&quot;..tostring(pg_leftBank)..&quot;Path&quot;, info1)&#10;&#9;if #info1 &gt; 65 then&#13;&#10;&#9;&#9;info1 = &quot;...&quot;..string.sub(info1, -65)&#13;&#10;&#9;end&#13;&#10;&#9;panel:getComponent(&quot;lblLeftBankInfo1&quot;):setPropertyString(&quot;uiLabelText&quot;, info1)&#13;&#10;&#9;panel:getComponent(&quot;lblLeftBankInfo2&quot;):setPropertyString(&quot;uiLabelText&quot;, &quot;Source: file&quot;)&#13;&#10;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;loadRightProgramNameList()&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;doBankTaskSave size=&quot;..tostring(fileData:getSize()))&#13;&#10;&#9;displayMessage(&quot;Bank &quot;..tostring(pg_leftBank)..&quot; saved to file&quot;)&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="03c5fce4b47b4475ba56f76ea8764892"
                       luaMethodValid="1"/>
            <luaMethod luaMethodName="doBankTaskNamesToFile" luaMethodCode="doBankTaskNamesToFile = function(--[[ number --]] bank)&#13;&#10;&#9;if #pg_bankProgramData[bank] == 0 then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskNamesToFile Bank &quot;..tostring(bank)..&quot; is empty&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Bank &quot;..tostring(bank)..&quot; is empty&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if bank &gt; pg_numberOfBanks then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskNamesToFile Cannot save search result bank names to file&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Cannot save search result bank names to file&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local file2 = utils.saveFileWindow(&quot;Bank names to file&quot;, File(&quot;&quot;), &quot;*.txt&quot;, true)&#13;&#10;&#13;&#10;&#9;if file2:isValid() == false then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskNamesToFile canceled&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Bank names to file canceled&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local s = file2:getFullPathName()&#13;&#10;&#9;local file = io.open(s, &quot;w&quot;)&#13;&#10;&#9;if file == nil then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskNamesToFile create error&quot;)&#13;&#10;&#9;&#9;utils.warnWindow(&quot;Bank names to file&quot;, &quot;Error creating the file&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local keyName, progName&#13;&#10;&#9;keyName = pg_synthProgInvertName[&quot;ProgramName&quot;]&#13;&#10;&#9;for i = 1, #pg_bankProgramData[bank] do&#13;&#10;&#9;&#9;progName = pg_bankProgramData[bank][i]:getRange(pg_synthProg[keyName].parmSyxPos, pg_synthProg[keyName].parmLen):toString()&#13;&#10;&#9;&#9;progName = progName:gsub('[ ]+%f[%z]', '') -- trim trailing spaces&#13;&#10;&#9;&#9;file:write(string.format(&quot;%03d\t%s\n&quot;, i - 1, progName))&#13;&#10;&#9;end&#13;&#10;&#9;file:close()&#13;&#10;&#13;&#10;&#9;addToLog(&quot;doBankTaskNamesToFile saved to file&quot;)&#13;&#10;&#9;displayMessage(&quot;Bank names saved to file&quot;)&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="864d6fa0eed047b3b3ff76a7737525e1"
                       luaMethodValid="1"/>
            <luaMethod luaMethodName="doBankTaskErase" luaMethodCode="doBankTaskErase = function(--[[ number --]] bank)&#13;&#10;&#9;if #pg_bankProgramData[bank] == 0 then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskErase Bank &quot;..tostring(bank)..&quot; is already empty&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Bank &quot;..tostring(bank)..&quot; is already empty&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;if bank &gt; pg_numberOfBanks then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskErase Cannot erase search results bank&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Cannot erase search results bank&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if utils.questionWindow(&quot;Erase bank?&quot;, &quot;About to erase bank &quot;..tostring(bank)..&quot; - are you sure?&quot;, &quot;Ok&quot;, &quot;Cancel&quot;) then&#13;&#10;&#9;&#9;pg_bankProgramData[bank] = {}&#13;&#10;&#9;&#9;pg_bankInfo[bank].fullPathName = &quot;&quot;&#13;&#10;&#9;&#9;panel:setPropertyString(&quot;ZZCustomBank&quot;..tostring(bank)..&quot;Path&quot;, &quot;&quot;)&#10;&#9;&#9;pg_bankInfo[bank].sourceOfContents = &quot;&quot;&#13;&#10;&#9;&#9;if pg_leftBank == bank then&#13;&#10;&#9;&#9;&#9;loadLeftProgramNameList()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if pg_rightBank == bank then&#13;&#10;&#9;&#9;&#9;loadRightProgramNameList()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskErase Bank &quot;..tostring(bank)..&quot; erased&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Bank &quot;..tostring(bank)..&quot; erased&quot;)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="538a84aab10244229ba579cbb21d4523"
                       luaMethodValid="1"/>
            <luaMethod luaMethodName="doBankTaskDeleteProg" luaMethodCode="function doBankTaskDeleteProg()&#13;&#10;&#9;local lb, rowsSelected&#13;&#10;&#9;lb = panel:getListBox(&quot;boxLeftProgBank&quot;)&#13;&#10;&#9;rowsSelected = lb:getNumSelectedRows()&#13;&#10;&#9;if #pg_bankProgramData[pg_leftBank] == 0 then&#13;&#10;&#9;&#9;displayMessage(&quot;Bank is empty - nothing to delete&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;elseif rowsSelected == 0 then&#13;&#10;&#9;&#9;displayMessage(&quot;No program selected for delete&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local lastProg, msg, leftSelected, listSelected, rightSelected&#13;&#10;&#9;listSelected = {}&#13;&#10;&#9;-- uiListBox selected items are numbered from zero (and in ascending order), bank is numbered from one&#13;&#10;&#9;for j=1, rowsSelected, 1 do&#13;&#10;&#9;&#9;listSelected[j] = lb:getSelectedRow(j - 1) + 1&#13;&#10;&#9;end&#13;&#10; &#9;lastProg = #pg_bankProgramData[pg_leftBank]&#13;&#10;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;if panel:getListBox(&quot;boxRightProgBank&quot;):getNumSelectedRows() &gt; 0 then&#13;&#10;&#9;&#9;&#9;rightSelected = panel:getListBox(&quot;boxRightProgBank&quot;):getSelectedRow(0)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;rightSelected = nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Delete by copying next higher program over selected program (to the end of the bank), then&#13;&#10;&#9;-- erase last program in bank by setting it to nil&#13;&#10;&#9;for j=rowsSelected, 1, -1 do&#13;&#10;&#9;&#9;for i=listSelected[j], lastProg - 1, 1 do&#13;&#10;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][i] = pg_bankProgramData[pg_leftBank][i + 1]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;pg_bankProgramData[pg_leftBank][lastProg] = nil&#13;&#10;&#9;&#9;lastProg = lastProg - 1&#13;&#10;&#9;&#9;if pg_rightBank == pg_leftBank and rightSelected &gt;= listSelected[j] then&#13;&#10;&#9;&#9;&#9;rightSelected = rightSelected - 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;msg = tostring(rowsSelected)..&quot; program(s) deleted&quot;&#13;&#10;&#9;if lastProg == 0 then&#13;&#10;&#9;&#9;leftSelected = nil&#13;&#10;&#9;elseif listSelected[1] &gt; lastProg then&#13;&#10;&#9;&#9;leftSelected = lastProg - 1&#13;&#10;&#9;else&#13;&#10;&#9;&#9;leftSelected = listSelected[1] - 1&#13;&#10;&#9;end&#13;&#10;&#9;loadLeftProgramNameList(leftSelected)&#13;&#10;&#13;&#10;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;if rightSelected ~= nil and rightSelected &gt;= lastProg then&#13;&#10;&#9;&#9;&#9;rightSelected = lastProg - 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;loadRightProgramNameList(rightSelected)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;addToLog(&quot;doBankTaskDeleteProg &quot;..msg)&#13;&#10;&#9;displayMessage(msg)&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="9accf63eb2ee4be0bb1abc0e48a2a9b1"
                       luaMethodValid="1"/>
            <luaMethod luaMethodName="doBankTaskCopy" luaMethodCode="doBankTaskCopy = function(--[[ string --]] typ)&#13;&#10;&#9;local lbLeft, lbRight, rowsSelected, leftSelected, rightSelected, listSelected&#13;&#10;&#9;lbRight = panel:getListBox(&quot;boxRightProgBank&quot;)&#13;&#10;&#9;rowsSelected = lbRight:getNumSelectedRows()&#13;&#10;&#9;if rowsSelected == 0 then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskCopy &quot;..typ..&quot; source not selected&quot;)&#13;&#10;&#9;&#9;displayMessage(typ..&quot; source not selected&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;rightSelected = lbRight:getSelectedRow(0) + 1&#13;&#10;&#9;listSelected = {}&#13;&#10;&#9;-- uiListBox selected items are numbered from zero (and in ascending order), bank is numbered from one&#13;&#10;&#9;for j=1, rowsSelected, 1 do&#13;&#10;&#9;&#9;listSelected[j] = lbRight:getSelectedRow(j - 1) + 1&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;lbLeft = panel:getListBox(&quot;boxLeftProgBank&quot;)&#13;&#10;&#9;if lbLeft:getNumSelectedRows() == 0 then&#13;&#10;&#9;&#9;if #pg_bankProgramData[pg_leftBank] == 0 and typ ~= &quot;Swap&quot; then&#13;&#10;&#9;&#9;&#9;leftSelected = 1&#9;-- special case: left bank is empty, can't select program, so default to one&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;addToLog(&quot;doBankTaskCopy &quot;..typ..&quot; destination not selected&quot;)&#13;&#10;&#9;&#9;&#9;displayMessage(typ..&quot; destination not selected&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;leftSelected = lbLeft:getSelectedRow(0) + 1&#13;&#10;&#9;end&#13;&#10;&#9;if leftSelected == rightSelected and pg_leftBank == pg_rightBank then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskCopy Source and destination programs are the same - nothing done&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Source and destination programs are the same - nothing done&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local msg, offset&#13;&#10;&#9;offset = 0&#13;&#10;&#9;if typ == &quot;Replace&quot; then&#13;&#10;&#9;&#9;msg = tostring(rowsSelected)..&quot; program(s) replaced&quot;&#13;&#10;&#9;&#9;for j=1, rowsSelected, 1 do&#13;&#10;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][leftSelected] = MemoryBlock(pg_bankProgramData[pg_rightBank][listSelected[j]])&#13;&#10;&#9;&#9;&#9;leftSelected = leftSelected + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;elseif typ == &quot;Swap&quot; then&#13;&#10;&#9;&#9;msg = tostring(rowsSelected)..&quot; program(s) swapped&quot;&#13;&#10;&#9;&#9;for j=1, rowsSelected, 1 do&#13;&#10;&#9;&#9;&#9;local programData = MemoryBlock(pg_bankProgramData[pg_leftBank][leftSelected])&#13;&#10;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][leftSelected] = MemoryBlock(pg_bankProgramData[pg_rightBank][listSelected[j]])&#13;&#10;&#9;&#9;&#9;pg_bankProgramData[pg_rightBank][listSelected[j]] = programData&#13;&#10;&#9;&#9;&#9;leftSelected = leftSelected + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;elseif typ == &quot;Append&quot; then&#13;&#10;&#9;&#9;msg = tostring(rowsSelected)..&quot; program(s) appended&quot;&#13;&#10;&#9;&#9;if #pg_bankProgramData[pg_leftBank] &gt; 0 then&#9;-- special case: left bank is empty, default to one&#13;&#10;&#9;&#9;&#9;leftSelected = leftSelected + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;for j=1, rowsSelected, 1 do&#13;&#10;&#9;&#9;&#9;for i=#pg_bankProgramData[pg_leftBank], leftSelected, -1 do&#13;&#10;&#9;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][i + 1] = pg_bankProgramData[pg_leftBank][i]&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;if pg_leftBank == pg_rightBank and listSelected[j] + offset &gt;= leftSelected then&#13;&#10;&#9;&#9;&#9;&#9;offset = offset + 1&#13;&#10;&#9;&#9;&#9;&#9;rightSelected = rightSelected + 1&#13;&#10;&#9;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][leftSelected] = MemoryBlock(pg_bankProgramData[pg_rightBank][listSelected[j] + offset])&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][leftSelected] = MemoryBlock(pg_bankProgramData[pg_rightBank][listSelected[j]])&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;leftSelected = leftSelected + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#9;-- Insert&#13;&#10;&#9;&#9;msg = tostring(rowsSelected)..&quot; program(s) inserted&quot;&#13;&#10;&#9;&#9;for j=1, rowsSelected, 1 do&#13;&#10;&#9;&#9;&#9;for i=#pg_bankProgramData[pg_leftBank], leftSelected, -1 do&#13;&#10;&#9;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][i + 1] = pg_bankProgramData[pg_leftBank][i]&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;if pg_leftBank == pg_rightBank and listSelected[j] + offset &gt; leftSelected then&#13;&#10;&#9;&#9;&#9;&#9;offset = offset + 1&#13;&#10;&#9;&#9;&#9;&#9;rightSelected = rightSelected + 1&#13;&#10;&#9;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][leftSelected] = MemoryBlock(pg_bankProgramData[pg_rightBank][listSelected[j] + offset])&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][leftSelected] = MemoryBlock(pg_bankProgramData[pg_rightBank][listSelected[j]])&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;leftSelected = leftSelected + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;loadLeftProgramNameList(leftSelected - 1)&#13;&#10;&#13;&#10;&#9;if pg_rightBank == pg_leftBank or typ == &quot;Swap&quot; then&#13;&#10;&#9;&#9;loadRightProgramNameList(rightSelected - 1)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;addToLog(&quot;doBankTaskCopy &quot;..msg)&#13;&#10;&#9;displayMessage(msg)&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="06c1df71065641f899296bfd4525903e"
                       luaMethodValid="1"/>
            <luaMethod luaMethodName="doBankTaskEditBuffer" luaMethodCode="doBankTaskEditBuffer = function(--[[ string --]] typ)&#13;&#10;&#9;local lbLeft, rowsSelected, leftSelected, rightSelected&#13;&#10;&#9;lbLeft = panel:getListBox(&quot;boxLeftProgBank&quot;)&#13;&#10;&#9;rowsSelected = lbLeft:getNumSelectedRows()&#13;&#10;&#9;if rowsSelected == 0 then&#13;&#10;&#9;&#9;if #pg_bankProgramData[pg_leftBank] == 0 then&#13;&#10;&#9;&#9;&#9;leftSelected = 1&#9;-- special case: left bank is empty, can't select program, so default to one&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;addToLog(&quot;doBankTaskEditBuffer &quot;..typ..&quot; destination not selected&quot;)&#13;&#10;&#9;&#9;&#9;displayMessage(typ..&quot; destination not selected&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;-- uiListBox selected items are numbered from zero (and in ascending order), bank is numbered from one&#13;&#10;&#9;&#9;leftSelected = lbLeft:getSelectedRow(0) + 1&#13;&#10;&#9;end&#13;&#10;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;if panel:getListBox(&quot;boxRightProgBank&quot;):getNumSelectedRows() &gt; 0 then&#13;&#10;&#9;&#9;&#9;rightSelected = panel:getListBox(&quot;boxRightProgBank&quot;):getSelectedRow(0)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;rightSelected = nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local msg&#13;&#10;&#9;if typ == &quot;Replace&quot; then&#13;&#10;&#9;&#9;msg = &quot;Active program edit buffer replaced program in bank&quot;&#13;&#10;&#9;&#9;pg_bankProgramData[pg_leftBank][leftSelected] = MemoryBlock(pg_editBuffer[pg_activeEditBuffer])&#13;&#10;&#9;else&#9;-- Append&#13;&#10;&#9;&#9;msg = tostring(rowsSelected)..&quot; program(s) appended&quot;&#13;&#10;&#9;&#9;if #pg_bankProgramData[pg_leftBank] &gt; 0 then&#9;-- special case: left bank is empty, default to one&#13;&#10;&#9;&#9;&#9;leftSelected = leftSelected + 1&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;for i=#pg_bankProgramData[pg_leftBank], leftSelected, -1 do&#13;&#10;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][i + 1] = pg_bankProgramData[pg_leftBank][i]&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;pg_bankProgramData[pg_leftBank][leftSelected] = MemoryBlock(pg_editBuffer[pg_activeEditBuffer])&#13;&#10;&#9;end&#13;&#10;&#9;loadLeftProgramNameList(leftSelected - 1)&#13;&#10;&#13;&#10;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;loadRightProgramNameList(rightSelected)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;addToLog(&quot;doBankTaskEditBuffer &quot;..msg)&#13;&#10;&#9;displayMessage(msg)&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="b6bb552a14da413382ebf2e9ebb97d47"
                       luaMethodValid="1"/>
            <luaMethod luaMethodName="doBankTaskRecvSysEx" luaMethodCode="function doBankTaskRecvSysEx()&#13;&#10;&#9;if #pg_bankProgramData[pg_leftBank] &gt; 0 then&#13;&#10;&#9;&#9;if utils.questionWindow(&quot;Receive SysEx to bank?&quot;, &quot;Receive SysEx program dump from synth into bank &quot;..tostring(pg_leftBank)..&quot;? This will erase any programs currently in that bank&quot;, &quot;Ok&quot;, &quot;Cancel&quot;) == false then&#13;&#10;&#9;&#9;&#9;displayMessage(&quot;SysEx receive canceled&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_bankProgramData[pg_leftBank] = {}&#13;&#10;&#9;pg_bankInfo[pg_leftBank].fullPathName = &quot;&quot;&#13;&#10;&#9;loadLeftProgramNameList()&#13;&#10;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;loadRightProgramNameList()&#13;&#10;&#9;end&#13;&#10;&#9;pg_receiveSysExProgBankTarget = pg_leftBank&#13;&#10;&#9;local bankNum, msg&#13;&#10;&#9;bankNum = panel:getComponent(&quot;cmbSaveBankAs&quot;):getValue()&#13;&#10;&#9;if bankNum == 10 then&#9;-- Manual send&#13;&#10;&#9;&#9;pg_receiveSysExProgNumStart = -1&#13;&#10;&#9;&#9;pg_receiveSysExProgNumEnd = -1&#13;&#10;&#9;&#9;displayMessage(&quot;Ready to start receiving program SysEx into bank &quot;..tostring(pg_leftBank)..&quot;...&quot;)&#13;&#10;&#9;&#9;msg = &quot;Send SysEx program dump from synth now - click Ok when finished&quot;&#13;&#10;&#9;else&#13;&#10;&#9;&#9;pg_receiveSysExProgNumStart = 1&#13;&#10;&#9;&#9;pg_receiveSysExProgNumEnd = 100&#13;&#10;&#9;&#9;displayMessage(&quot;Requesting SysEx program &quot;..tostring(pg_receiveSysExProgNumStart)..&quot;into bank &quot;..tostring(pg_leftBank)..&quot;...&quot;)&#13;&#10;&#9;&#9;local SysEx = string.format(&quot;%s 0%d 00 f7&quot;, pg_synthInfo.programDataSysExRequestHeader, bankNum)&#13;&#10;&#9;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(SysEx))&#13;&#10;&#9;&#9;msg = &quot;Sending SysEx program dump requests - click Ok when finished, or to stop process&quot;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;recvSysExWindow = AlertWindow(&quot;Receiving SysEx into bank &quot;..tostring(pg_leftBank), msg, AlertWindow.InfoIcon)&#13;&#10;&#9;recvSysExWindow:addButton(&quot;OK&quot;, 1, KeyPress(KeyPress.returnKey), KeyPress())&#13;&#10;&#9;recvSysExWindow:setModalHandler(recvSysExWindowCallback)&#13;&#10;&#9;-- Never let Lua delete this window (3rd parameter), enter modal state&#13;&#10;&#9;recvSysExWindow:runModalLoop()&#13;&#10;&#13;&#10;&#9;pg_receiveSysExProgBankTarget = 0&#13;&#10;&#9;if #pg_bankProgramData[pg_leftBank] then&#13;&#10;&#9;&#9;pg_bankInfo[pg_leftBank].fullPathName = &quot;Received from synth&quot;&#13;&#10;&#9;&#9;panel:setPropertyString(&quot;ZZCustomBank&quot;..tostring(pg_leftBank)..&quot;Path&quot;, &quot;&quot;)&#10;&#9;&#9;pg_bankInfo[pg_leftBank].sourceOfContents = &quot;synth&quot;&#13;&#10;&#9;&#9;if bankNum == 10 then&#9;-- Manual send&#13;&#10;&#9;&#9;&#9;pg_bankInfo[pg_leftBank].bankChoice = -1&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;pg_bankInfo[pg_leftBank].bankChoice = bankNum&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;loadLeftProgramNameList()&#13;&#10;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;loadRightProgramNameList()&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;doBankTaskRecvSysEx Received &quot;..tostring(#pg_bankProgramData[pg_leftBank])..&quot; programs into bank &quot;..tostring(pg_leftBank))&#13;&#10;&#9;displayMessage(&quot;Received &quot;..tostring(#pg_bankProgramData[pg_leftBank])..&quot; programs into bank &quot;..tostring(pg_leftBank))&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="1190afb73b564ba7bcaa5ae023e6945a"
                       luaMethodValid="1"/>
            <luaMethod luaMethodName="doBankTaskSendSysEx" luaMethodCode="function doBankTaskSendSysEx()&#13;&#10;&#9;if #pg_bankProgramData[pg_leftBank] == 0 then&#13;&#10;&#9;&#9;displayMessage(&quot;Bank &quot;..tostring(pg_leftBank)..&quot; is empty - nothing to send&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_sendSysExBankNum = panel:getComponent(&quot;cmbSaveBankAs&quot;):getValue()&#13;&#10;&#9;local SysExSendToFactory = panel:getModulatorByName(&quot;cmbSysExSendToFactory&quot;):getValue()&#13;&#10;&#9;if pg_sendSysExBankNum &lt; 0&#13;&#10;&#9; or (SysExSendToFactory == 0 and pg_sendSysExBankNum &gt; 4)&#13;&#10;&#9; or (SysExSendToFactory == 1 and pg_sendSysExBankNum &gt; 9) then&#13;&#10;&#9;&#9;displayMessage(&quot;Select bank number to send&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;pg_sendSysExProgNumStart = 1&#13;&#10;&#9;pg_sendSysExProgNumEnd = 100&#13;&#10;&#9;if pg_sendSysExProgNumEnd &gt; #pg_bankProgramData[pg_leftBank] then&#13;&#10;&#9;&#9;pg_sendSysExProgNumEnd = #pg_bankProgramData[pg_leftBank]&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;doBankTaskSendSysEx Preparing to send &quot;..tostring(#pg_bankProgramData[pg_leftBank])..&quot; programs to synth, first prog=&quot;..tostring(pg_sendSysExProgNumStart))&#13;&#10;&#9;displayMessage(&quot;Preparing to send &quot;..tostring(#pg_bankProgramData[pg_leftBank])..&quot; programs to synth&quot;)&#13;&#10;&#9;local programData, SysEx&#13;&#10;   &#9;programData = utils.packDsiData(pg_bankProgramData[pg_leftBank][1])&#13;&#10;&#9;SysEx = string.format(&quot;%s 0%d 00 %s f7&quot;, pg_synthInfo.programDataSysExHeader, pg_sendSysExBankNum, programData:toHexString(1))&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(SysEx))&#13;&#10;&#9;addToLog(&quot;doBankTaskSendSysEx sending SysEx program 0&quot;)&#13;&#10;&#9;displayMessage(&quot;sending SysEx program 0&quot;)&#13;&#10;&#13;&#10;&#9;if #pg_bankProgramData[pg_leftBank] &gt; 1 then&#13;&#10;&#9;&#9;pg_sendSysExProgNumStart = 2&#13;&#10;&#9;&#9;timer:setCallback(33, timerCallback)&#13;&#10;&#9;&#9;timer:startTimer(33, panel:getModulatorByName(&quot;sldMIDISendDelay&quot;):getModulatorValue())&#13;&#10;&#9;else&#13;&#10;&#9;&#9;addToLog(&quot;doBankTaskSendSysEx One SysEx program sent&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;One SysEx program sent&quot;)&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;"
                       luaMethodLinkedProperty="" luaMethodSource="0" uuid="a1dda13c035a49deb48fe598076266d9"
                       luaMethodValid="1"/>
          </luaMethodGroup>
          <luaMethod luaMethodName="leftBankChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;leftBankChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if ignoreModulatorUpdateEvent(&quot;leftBankChanged&quot;, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_leftBank = value + 1&#13;&#10;&#9;loadLeftProgramNameList()&#13;&#10;&#9;if pg_bankInfo[pg_leftBank].bankChoice ~= -1 then&#13;&#10;&#9;&#9;panel:getModulatorByName(&quot;cmbSaveBankAs&quot;):getComponent():setValue(pg_bankInfo[pg_leftBank].bankChoice, true)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="267d0467bb7542098fa59f4100204441"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="loadLeftProgramNameList" luaMethodCode="function loadLeftProgramNameList(--[[ number --]] selectedItem)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;loadLeftProgramNameList begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;loadLeftProgramNameList begin - pg_leftBank=&quot;..tostring(pg_leftBank))&#13;&#10;&#13;&#10;&#9;local j, s, info1, info2&#13;&#10;&#9;local bankNames = &quot;&quot;&#13;&#10;&#9;if #pg_bankProgramData[pg_leftBank] &gt; 0 then&#13;&#10;&#9;&#9;j = pg_synthProgInvertName[&quot;ProgramName&quot;]&#13;&#10;&#9;&#9;for i = 1, #pg_bankProgramData[pg_leftBank] do&#13;&#10;&#9;&#9;&#9;s = pg_bankProgramData[pg_leftBank][i]:getRange(pg_synthProg[j].parmSyxPos, 20):toString()&#13;&#10;&#9;&#9;&#9;s = s:gsub('[ ]+%f[%z]', '') -- trim trailing spaces&#13;&#10;&#9;&#9;&#9;s = s:gsub('[=&quot;\']', '&#96;') -- remove reserved characters for list box&#13;&#10;&#9;&#9;&#9;bankNames = string.format(&quot;%s\n%03d %s&quot;, bankNames, i - 1, s)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;bankNames = string.sub(bankNames, 2) -- remove unneeded initial linefeed generated by the code above&#13;&#10;&#9;&#9;if selectedItem == nil then&#13;&#10;&#9;&#9;&#9;selectedItem = 0&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;panel:getModulatorByName(&quot;boxLeftProgBank&quot;):setValue(selectedItem, true, true) -- item is selected in combo box&#13;&#10;&#9;end&#13;&#10;&#9;panel:getComponent(&quot;boxLeftProgBank&quot;):setPropertyString(&quot;uiListBoxContent&quot;, bankNames)&#13;&#10;&#9;info1 = pg_bankInfo[pg_leftBank].fullPathName&#13;&#10;&#9;if #info1 &gt; 65 then&#13;&#10;&#9;&#9;info1 = &quot;...&quot;..string.sub(info1, -65)&#13;&#10;&#9;end&#13;&#10;&#9;panel:getComponent(&quot;lblLeftBankInfo1&quot;):setPropertyString(&quot;uiLabelText&quot;, info1)&#13;&#10;&#9;if pg_bankInfo[pg_leftBank].sourceOfContents == &quot;&quot; then&#13;&#10;&#9;&#9;info2 = &quot;&quot;&#13;&#10;&#9;else&#13;&#10;&#9;&#9;info2 = &quot;Source: &quot;..pg_bankInfo[pg_leftBank].sourceOfContents&#13;&#10;&#9;end&#13;&#10;&#9;panel:getComponent(&quot;lblLeftBankInfo2&quot;):setPropertyString(&quot;uiLabelText&quot;, info2)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="9a6013700df9401b80a8c9f425deaf88"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="leftBankItemAudition" luaMethodCode="--&#10;-- Called when an item is clicked&#10;--&#10;-- @modulator the modulator the event occured on&#10;-- @value      a integer that represents the clicked item&#10;--&#10;&#10;leftBankItemAudition = function(--[[ CtrlrModulator --]] modulator, --[[ number --]] value, --[[ number --]] source)&#13;&#10;&#9;if ignoreModulatorUpdateEvent(&quot;leftBankItemAudition&quot;, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;leftBankItemAudition value=&quot;..tostring(value)..&quot; source=&quot;..tostring(source))&#13;&#10;&#13;&#10;    if pg_bankProgramData[pg_leftBank] ~= nil and pg_bankProgramData[pg_leftBank][value + 1] ~= nil then&#13;&#10;&#9;&#9;pg_editBuffer[pg_activeEditBuffer] = MemoryBlock(pg_bankProgramData[pg_leftBank][value + 1])&#13;&#10;&#9;&#9;addToLog(&quot;pg_leftBankItemAudition edit buffer &quot;..tostring(pg_activeEditBuffer)..&quot; loaded&quot;)&#13;&#10;&#9;&#9;renderProgramEditor()&#13;&#10;&#9;&#9;sendProgToSynth(true)&#13;&#10;&#9;&#9;updateBufProgName(pg_activeEditBuffer)&#13;&#10;    end&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="4aa1e7f5eb0b45949e48d904e1c45a3b"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="rightBankChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;rightBankChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if ignoreModulatorUpdateEvent(&quot;rightBankChanged&quot;, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_rightBank = value + 1&#13;&#10;&#9;loadRightProgramNameList()&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="f9ed34910ff041829bcf783a7bcf817b"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="loadRightProgramNameList" luaMethodCode="function loadRightProgramNameList(--[[ number --]] selectedItem)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;loadRightProgramNameList begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;loadRightProgramNameList begin - pg_rightBank=&quot;..tostring(pg_rightBank))&#13;&#10;&#13;&#10;&#9;local j, s, info1, info2&#13;&#10;&#9;local bankNames = &quot;&quot;&#13;&#10;&#9;if #pg_bankProgramData[pg_rightBank] &gt; 0 then&#13;&#10;&#9;&#9;j = pg_synthProgInvertName[&quot;ProgramName&quot;]&#13;&#10;&#9;&#9;for i = 1, #pg_bankProgramData[pg_rightBank] do&#13;&#10;&#9;&#9;&#9;s = pg_bankProgramData[pg_rightBank][i]:getRange(pg_synthProg[j].parmSyxPos, 20):toString()&#13;&#10;&#9;&#9;&#9;s = s:gsub('[ ]+%f[%z]', '') -- trim trailing spaces&#13;&#10;&#9;&#9;&#9;s = s:gsub('[=&quot;\']', '&#96;') -- remove reserved characters for list box&#13;&#10;&#9;&#9;&#9;if pg_rightBank == pg_numberOfBanks + 1 then&#13;&#10;&#9;&#9;&#9;&#9;bankNames = string.format(&quot;%s\n%s %s&quot;, bankNames, pg_searchResultSourceBankProg[i], s)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;bankNames = string.format(&quot;%s\n%03d %s&quot;, bankNames, i - 1, s)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;bankNames = string.sub(bankNames, 2) -- remove unneeded initial linefeed generated by the code above&#13;&#10;&#9;&#9;if selectedItem == nil then&#13;&#10;&#9;&#9;&#9;selectedItem = 0&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;panel:getModulatorByName(&quot;boxRightProgBank&quot;):setValue(selectedItem, true, true) -- item is selected in combo box&#13;&#10;&#9;end&#13;&#10;&#9;panel:getComponent(&quot;boxRightProgBank&quot;):setPropertyString(&quot;uiListBoxContent&quot;, bankNames)&#13;&#10;&#9;info1 = pg_bankInfo[pg_rightBank].fullPathName&#13;&#10;&#9;if #info1 &gt; 65 then&#13;&#10;&#9;&#9;info1 = &quot;...&quot;..string.sub(info1, -65)&#13;&#10;&#9;end&#13;&#10;&#9;panel:getComponent(&quot;lblRightBankInfo1&quot;):setPropertyString(&quot;uiLabelText&quot;, info1)&#13;&#10;&#9;if pg_bankInfo[pg_rightBank].sourceOfContents == &quot;&quot; then&#13;&#10;&#9;&#9;info2 = &quot;&quot;&#13;&#10;&#9;else&#13;&#10;&#9;&#9;info2 = &quot;Source: &quot;..pg_bankInfo[pg_rightBank].sourceOfContents&#13;&#10;&#9;end&#13;&#10;&#9;panel:getComponent(&quot;lblRightBankInfo2&quot;):setPropertyString(&quot;uiLabelText&quot;, info2)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="516e5252872d4476bd33365563ad6570"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="rightBankItemAudition" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;rightBankItemAudition = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if ignoreModulatorUpdateEvent(&quot;rightBankItemAudition&quot;, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;rightBankItemAudition value=&quot;..tostring(value)..&quot; source=&quot;..tostring(source))&#13;&#10;&#13;&#10;    if pg_bankProgramData[pg_rightBank] ~= nil and pg_bankProgramData[pg_rightBank][value + 1] ~= nil then&#13;&#10;&#9;&#9;pg_editBuffer[pg_activeEditBuffer] = MemoryBlock(pg_bankProgramData[pg_rightBank][value + 1])&#13;&#10;&#9;&#9;addToLog(&quot;rightBankItemAudition edit buffer &quot;..tostring(pg_activeEditBuffer)..&quot; loaded&quot;)&#13;&#10;&#9;&#9;renderProgramEditor()&#13;&#10;&#9;&#9;sendProgToSynth(true)&#13;&#10;&#9;&#9;updateBufProgName(pg_activeEditBuffer)&#13;&#10;    end&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="0dd44d783bf544dd8764e9936d69351b"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="doBankTask" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;doBankTask = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTask begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;doBankTask begin value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;pg_bankTaskTyp = panel:getComponent(&quot;cmbBankTaskTyp&quot;):getValue()&#13;&#10;&#9;if pg_bankTaskTyp &lt; 0 then&#13;&#10;&#9;&#9;addToLog(&quot;doBankTask No bank task selected&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;No bank task selected&quot;)&#13;&#10;&#9;&#9;mod:setValue(0, true, true)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Load from file&quot; then&#13;&#10;&#9;&#9;doBankTaskLoad(pg_leftBank)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Save to file as&quot; then&#13;&#10;&#9;&#9;doBankTaskSave(true)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Recv SysEx&quot; then&#13;&#10;&#9;&#9;doBankTaskRecvSysEx()&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Send as SysEx&quot; then&#13;&#10;&#9;&#9;doBankTaskSendSysEx()&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Names to file&quot; then&#13;&#10;&#9;&#9;doBankTaskNamesToFile(pg_leftBank)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Erase&quot; then&#13;&#10;&#9;&#9;doBankTaskErase(pg_leftBank)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Edit buffer: replace prog&quot; then&#13;&#10;&#9;&#9;doBankTaskEditBuffer(&quot;Replace&quot;)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Edit buffer: append prog&quot; then&#13;&#10;&#9;&#9;doBankTaskEditBuffer(&quot;Append&quot;)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Prog: Replace in left bank&quot; then&#13;&#10;&#9;&#9;doBankTaskCopy(&quot;Replace&quot;)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Prog: Insert to left bank&quot; then&#13;&#10;&#9;&#9;doBankTaskCopy(&quot;Insert&quot;)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Prog: Append to left bank&quot; then&#13;&#10;&#9;&#9;doBankTaskCopy(&quot;Append&quot;)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Prog: Swap left-right&quot; then&#13;&#10;&#9;&#9;doBankTaskCopy(&quot;Swap&quot;)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Prog: Delete from left bank&quot; then&#13;&#10;&#9;&#9;doBankTaskDeleteProg()&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Right bank: Load from file&quot; then&#13;&#10;&#9;&#9;doBankTaskLoad(pg_rightBank)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Right bank: Names to file&quot; then&#13;&#10;&#9;&#9;doBankTaskNamesToFile(pg_rightBank)&#13;&#10;&#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Right bank: Erase&quot; then&#13;&#10;&#9;&#9;doBankTaskErase(pg_rightBank)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;addToLog(&quot;doBankTask Error - unknown bank task &quot;..tostring(pg_bankTaskTyp)..&quot;.&quot;)&#13;&#10;&#9;&#9;displayMessage(&quot;Error - unknown bank task &quot;..tostring(pg_bankTaskTyp)..&quot;.&quot;)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;end&#13;&#10;"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="b4c3b95f31b84953a279d5fad91f02c1"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="bankTaskTypChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;bankTaskTypChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;bankTaskTypChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;bankTaskTypChanged begin value=&quot;..tostring(value))&#13;&#10;&#9;if value == -1 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_bankTaskTyp = value&#13;&#10;&#9;local mod, comp, cmbValue&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;cmbSaveBankAs&quot;)&#13;&#10;&#9;comp = mod:getComponent()&#13;&#10;&#9;cmbValue = comp:getValue()&#9;-- selection is lost when changing content&#13;&#10;&#9;if pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Save to file as&quot; then&#13;&#10;&#9;&#9;comp:setPropertyInt(&quot;componentVisibility&quot;, 1)&#13;&#10;&#9;&#9;comp:setPropertyString(&quot;uiComboContent&quot;, pg_listBankSave)&#13;&#10;&#9;&#9;comp:setValue(cmbValue, true)&#9;-- restore prior selection&#13;&#10; &#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Recv SysEx&quot; then&#13;&#10;&#9;&#9;comp:setPropertyInt(&quot;componentVisibility&quot;, 1)&#13;&#10;&#9;&#9;comp:setPropertyString(&quot;uiComboContent&quot;, pg_listBankRecv)&#13;&#10;&#9;&#9;comp:setValue(cmbValue, true)&#9;-- restore prior selection&#13;&#10; &#9;elseif pg_listBankTask[pg_bankTaskTyp + 1] == &quot;Left bank: Send as SysEx&quot; then&#13;&#10;&#9;&#9;comp:setPropertyInt(&quot;componentVisibility&quot;, 1)&#13;&#10;&#9;&#9;comp:setPropertyString(&quot;uiComboContent&quot;, pg_listBankSend)&#13;&#10;&#9;&#9;comp:setValue(cmbValue, true)&#9;-- restore prior selection&#13;&#10;&#9;else&#13;&#10;&#9;&#9;comp:setPropertyInt(&quot;componentVisibility&quot;, 0)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="luaModulatorValueChange" luaMethodSource="0"
                     uuid="a39da7389f9d449a970fa7c62d786a86" luaMethodValid="1"/>
          <luaMethod luaMethodName="recvSysExWindowCallback" luaMethodCode="function recvSysExWindowCallback(result, window)&#10;&#9;addToLog(&quot;recvSysExWindowCallback begin, result=&quot;..tostring(result))&#13;&#10;&#13;&#10;&#9;window:setVisible(false)&#13;&#10;&#9;pg_receiveSysExProgBankTarget = 0&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="0453fc8e9f8e40128f0a7cab77409a02"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="saveBankChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;saveBankChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;saveBankChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;saveBankChanged begin value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if pg_bankInfo[pg_leftBank].sourceOfContents == &quot;file&quot; and pg_bankInfo[pg_leftBank].fullPathName ~= &quot;&quot; then&#13;&#10;&#9;&#9;doBankTaskSave(false)&#9;-- used existing filename&#13;&#10;&#9;else&#13;&#10;&#9;&#9;doBankTaskSave(true)&#9;-- prompt for filename&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="18968c892872478d81d3152ff6d85f13"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="openSearchChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;openSearchChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;openSearchChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;openSearchChanged begin value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;panel:getCanvas():getLayerByName(&quot;SearchLayer&quot;):setVisible(true)&#13;&#10;&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="617050b940494a14bade780efe1c1780"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="searchDoneChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;searchDoneChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;searchDoneChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;searchDoneChanged begin&quot;)&#13;&#10;&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;panel:getCanvas():getLayerByName(&quot;SearchLayer&quot;):setVisible(false)&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="71436bf5b6e84ad4be7dad2c9fd7a440"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="searchChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;searchChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;searchChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;searchChanged begin value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;if value ~= 1 then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local k, s, fromBank, thruBank, progName, parmNum1, parmName1, parmVal1, parmNum2, parmName2, parmVal2&#13;&#10; &#9;local parmNum3, parmName3, parmVal3, parmNum4, parmName4, parmVal4, oper1, oper2, oper3, oper4&#13;&#10;&#9;local matchesCriteriaName, matchesCriteria1, matchesCriteria2, matchesCriteria3, matchesCriteria4&#13;&#10;&#9;fromBank = panel:getModulatorByName(&quot;cmbSearchFromBank&quot;):getModulatorValue() + 1&#13;&#10;&#9;if fromBank &lt; 1 then&#13;&#10;&#9;&#9;fromBank = 1&#13;&#10;&#9;end&#13;&#10;&#9;thruBank = panel:getModulatorByName(&quot;cmbSearchThruBank&quot;):getModulatorValue() + 1&#13;&#10;&#9;if thruBank &gt; pg_numberOfBanks then&#13;&#10;&#9;&#9;thruBank = pg_numberOfBanks&#13;&#10;&#9;end&#13;&#10;&#9;if thruBank &lt; fromBank then&#13;&#10;&#9;&#9;displayMessage(&quot;Search not performed - Thru Bank is less than From Bank&quot;)&#13;&#10;&#9;&#9;mod:setValue(0, true, true)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_bankProgramData[pg_numberOfBanks + 1] = {}&#9;-- Clear search results bank&#13;&#10; &#9;progName = L(panel:getLabel(&quot;lblSearchProgName&quot;):getText())&#13;&#10;&#9;parmNum1 = panel:getModulatorByName(&quot;cmbSearchParm1&quot;):getModulatorValue()&#13;&#10;&#9;parmName1 = pg_searchParm[parmNum1 + 1]&#13;&#10;&#9;parmVal1 = panel:getModulatorByName(&quot;sldSearchValue1&quot;):getModulatorValue()&#13;&#10;&#9;oper1 = panel:getModulatorByName(&quot;cmbSearchOper1&quot;):getModulatorValue()&#13;&#10;&#9;parmNum2 = panel:getModulatorByName(&quot;cmbSearchParm2&quot;):getModulatorValue()&#13;&#10;&#9;parmName2 = pg_searchParm[parmNum2 + 1]&#13;&#10;&#9;parmVal2 = panel:getModulatorByName(&quot;sldSearchValue2&quot;):getModulatorValue()&#13;&#10;&#9;oper2 = panel:getModulatorByName(&quot;cmbSearchOper2&quot;):getModulatorValue()&#13;&#10;&#9;parmNum3 = panel:getModulatorByName(&quot;cmbSearchParm3&quot;):getModulatorValue()&#13;&#10;&#9;parmName3 = pg_searchParm[parmNum3 + 1]&#13;&#10;&#9;parmVal3 = panel:getModulatorByName(&quot;sldSearchValue3&quot;):getModulatorValue()&#13;&#10;&#9;oper3 = panel:getModulatorByName(&quot;cmbSearchOper3&quot;):getModulatorValue()&#13;&#10;&#9;parmNum4 = panel:getModulatorByName(&quot;cmbSearchParm4&quot;):getModulatorValue()&#13;&#10;&#9;parmName4 = pg_searchParm[parmNum4 + 1]&#13;&#10;&#9;parmVal4 = panel:getModulatorByName(&quot;sldSearchValue4&quot;):getModulatorValue()&#13;&#10;&#9;oper4 = panel:getModulatorByName(&quot;cmbSearchOper4&quot;):getModulatorValue()&#13;&#10;&#9;for i = fromBank, thruBank do&#13;&#10;&#9;&#9;for j = 1, #pg_bankProgramData[i] do&#13;&#10;&#9;&#9;&#9;matchesCriteriaName = false&#13;&#10;&#9;&#9;&#9;if #progName &gt; 0 then&#13;&#10;&#9;&#9;&#9;&#9;s = progParmGet(pg_bankProgramData[i][j], &quot;ProgramName&quot;)&#13;&#10;&#9;&#9;&#9;&#9;if string.find(s:upper(), progName:upper()) ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;matchesCriteriaName = true&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;matchesCriteria1 = false&#13;&#10;&#9;&#9;&#9;if parmNum1 &gt;= 1 then&#13;&#10;&#9;&#9;&#9;&#9;s = progParmGet(pg_bankProgramData[i][j], parmName1)&#13;&#10;&#9;&#9;&#9;&#9;if (oper1 == 0 and s == parmVal1)&#13;&#10; &#9;&#9;&#9;&#9; or (oper1 == 1 and s &gt; parmVal1)&#13;&#10; &#9;&#9;&#9;&#9; or (oper1 == 2 and s &lt; parmVal1)&#13;&#10; &#9;&#9;&#9;&#9; or (oper1 == 3 and s ~= parmVal1) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;matchesCriteria1 = true&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;matchesCriteria2 = false&#13;&#10;&#9;&#9;&#9;if parmNum2 &gt;= 1 then&#13;&#10;&#9;&#9;&#9;&#9;s = progParmGet(pg_bankProgramData[i][j], parmName2)&#13;&#10;&#9;&#9;&#9;&#9;if (oper2 == 0 and s == parmVal2)&#13;&#10; &#9;&#9;&#9;&#9; or (oper2 == 1 and s &gt; parmVal2)&#13;&#10; &#9;&#9;&#9;&#9; or (oper2 == 2 and s &lt; parmVal2)&#13;&#10; &#9;&#9;&#9;&#9; or (oper2 == 3 and s ~= parmVal2) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;matchesCriteria2 = true&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;matchesCriteria3 = false&#13;&#10;&#9;&#9;&#9;if parmNum3 &gt;= 1 then&#13;&#10;&#9;&#9;&#9;&#9;s = progParmGet(pg_bankProgramData[i][j], parmName3)&#13;&#10;&#9;&#9;&#9;&#9;if (oper3 == 0 and s == parmVal3)&#13;&#10; &#9;&#9;&#9;&#9; or (oper3 == 1 and s &gt; parmVal3)&#13;&#10; &#9;&#9;&#9;&#9; or (oper3 == 2 and s &lt; parmVal3)&#13;&#10; &#9;&#9;&#9;&#9; or (oper3 == 3 and s ~= parmVal3) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;matchesCriteria3 = true&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;matchesCriteria4 = false&#13;&#10;&#9;&#9;&#9;if parmNum4 &gt;= 1 then&#13;&#10;&#9;&#9;&#9;&#9;s = progParmGet(pg_bankProgramData[i][j], parmName4)&#13;&#10;&#9;&#9;&#9;&#9;if (oper4 == 0 and s == parmVal4)&#13;&#10; &#9;&#9;&#9;&#9; or (oper4 == 1 and s &gt; parmVal4)&#13;&#10; &#9;&#9;&#9;&#9; or (oper4 == 2 and s &lt; parmVal4)&#13;&#10; &#9;&#9;&#9;&#9; or (oper4 == 3 and s ~= parmVal4) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;matchesCriteria4 = true&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;if (matchesCriteriaName or #progName == 0)&#13;&#10; &#9;&#9;&#9; and (matchesCriteria1 or parmNum1 &lt; 1)&#13;&#10; &#9;&#9;&#9; and (matchesCriteria2 or parmNum2 &lt; 1)&#13;&#10; &#9;&#9;&#9; and (matchesCriteria3 or parmNum3 &lt; 1)&#13;&#10; &#9;&#9;&#9; and (matchesCriteria4 or parmNum4 &lt; 1)&#13;&#10; &#9;&#9;&#9; and (matchesCriteriaName or matchesCriteria1 or matchesCriteria2 or matchesCriteria3 or matchesCriteria4) then -- at least one criteria entered&#13;&#10;&#9;&#9;&#9;&#9;k = #pg_bankProgramData[pg_numberOfBanks + 1]&#13;&#10;&#9;&#9;&#9;&#9;pg_bankProgramData[pg_numberOfBanks + 1][k + 1] = MemoryBlock(pg_bankProgramData[i][j])&#13;&#10;&#9;&#9;&#9;&#9;pg_searchResultSourceBankProg[k + 1] = string.format(&quot;%d-%03d&quot;, i, j - 1)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;pg_rightBank = pg_numberOfBanks + 1&#13;&#10;&#9;panel:getModulatorByName(&quot;cmbRightBank&quot;):setModulatorValue(pg_numberOfBanks, false, false, false)&#13;&#10;&#9;loadRightProgramNameList()&#13;&#10;&#9;displayMessage(&quot;Search results: &quot;..tostring(#pg_bankProgramData[pg_numberOfBanks + 1])..&quot; programs found&quot;)&#13;&#10;&#13;&#10;&#9;mod:setValue(0, true, true)&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="899a6e517e1f4ed08f70be51bab6b4b8"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="searchParmChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;searchParmChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;searchParmChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;local modName = L(mod:getName())&#13;&#10;&#9;addToLog(&quot;searchParmChanged begin mod=&quot;..modName..&quot; value=&quot;..tostring(value))&#13;&#10;&#9;local searchParmNum, modSld, compSld, valueSld, modCmb, compCmb, valueCmb&#13;&#10; &#9;searchParmNum = modName:sub(#modName, #modName)&#13;&#10;&#9;modSld = panel:getModulatorByName(&quot;sldSearchValue&quot;..searchParmNum)&#13;&#10;&#9;compSld = modSld:getComponent()&#13;&#10;&#9;valueSld = modSld:getModulatorValue()&#13;&#10;&#9;modCmb = panel:getModulatorByName(&quot;cmbSearchValue&quot;..searchParmNum)&#13;&#10;&#9;compCmb = modCmb:getComponent()&#13;&#10;&#9;valueCmb = modCmb:getModulatorValue()&#13;&#10;&#13;&#10;&#9;if value &lt; 1 then&#13;&#10;&#9;&#9;compSld:setPropertyInt(&quot;uiSliderMin&quot;, 0)&#10;&#9;&#9;compSld:setPropertyInt(&quot;uiSliderMax&quot;, 0)&#10;&#9;&#9;customSetModulatorValue(modSld, 0)&#13;&#10;&#9;&#9;compSld:setPropertyInt(&quot;componentVisibility&quot;, 1)&#10;&#9;&#9;compCmb:setPropertyInt(&quot;componentVisibility&quot;, 0)&#10;&#9;else&#13;&#10;&#9;&#9;local parmName, j, v, min, max&#13;&#10;&#9;&#9;parmName = pg_searchParm[value + 1]&#13;&#10;&#9;&#9;j = pg_synthProgInvertName[parmName]&#13;&#10;&#9;&#9;v = pg_synthProg[j]&#13;&#10;&#9;&#9;if v.parmMin == nil then&#13;&#10;&#9;&#9;&#9;min = 0&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;min = v.parmMin&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if v.parmType == &quot;signed&quot; or v.parmType == &quot;signed2&quot; then&#13;&#10;&#9;&#9;&#9;min = 0 - (v.parmMax / 2)&#13;&#10;&#9;&#9;&#9;max = (v.parmMax / 2)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;max = v.parmMax&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;compSld:setPropertyInt(&quot;uiSliderMin&quot;, min)&#10;&#9;&#9;compSld:setPropertyInt(&quot;uiSliderMax&quot;, max)&#13;&#10;&#9;&#9;if valueSld &lt; min then&#10;&#9;&#9;&#9;customSetModulatorValue(modSld, min)&#13;&#10;&#9;&#9;elseif valueSld &gt; max then&#13;&#10;&#9;&#9;&#9;customSetModulatorValue(modSld, max)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;if v.parmType:sub(1, 4) == &quot;list&quot; then&#13;&#10;&#9;&#9;&#9;loadComboContentFromTable(modCmb, pg_synthProgValList[v.parmType])&#13;&#10;&#9;&#9;&#9;if valueCmb &lt; 0 then&#13;&#10;&#9;&#9;&#9;&#9;valueCmb = 0&#13;&#10;&#9;&#9;&#9;elseif valueCmb &gt; modCmb:getPropertyInt(&quot;modulatorMax&quot;) then&#13;&#10;&#9;&#9;&#9;&#9;valueCmb = modCmb:getPropertyInt(&quot;modulatorMax&quot;)&#13;&#10;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;compCmb:setValue(valueCmb, true)&#13;&#10;&#9;&#9;&#9;compSld:setPropertyInt(&quot;componentVisibility&quot;, 0)&#10;&#9;&#9;&#9;compCmb:setPropertyInt(&quot;componentVisibility&quot;, 1)&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;compSld:setPropertyInt(&quot;componentVisibility&quot;, 1)&#10;&#9;&#9;&#9;compCmb:setPropertyInt(&quot;componentVisibility&quot;, 0)&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="6405d836ad544bbc9415dd36806676a9"
                     luaMethodValid="1"/>
          <luaMethod luaMethodName="searchValueChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;searchValueChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;local modName = L(mod:getName())&#13;&#10;&#9;if ignoreModulatorUpdateEvent(&quot;searchValueChanged &quot;..modName, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;searchValueChanged begin mod=&quot;..modName..&quot; value=&quot;..tostring(value))&#13;&#10;&#13;&#10;&#9;if modName:sub(1, 3) == &quot;sld&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;searchValueChanged ERROR unexpected call from mod=&quot;..modName)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;customSetModulatorValue(panel:getModulatorByName(&quot;sld&quot;..modName:sub(4, #modName)), value) -- keeping search value in slider&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="" luaMethodSource="0" uuid="2066177877ec45feb1baf23861c05bcf"
                     luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethodGroup name="ProgramEditor" uuid="1219e7170af845f39114412dc3217120">
          <luaMethod luaMethodName="progNameChanged" luaMethodCode="--&#10;-- Called when the contents of a Label are changed&#10;-- @label&#10;-- @newContent    a string that the label now contains&#10;--&#10;&#10;progNameChanged = function(--[[ CtrlrLabel --]] label, --[[ String --]] newContent)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;progNameChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;if pg_methodIsUpdatingComponents then  -- updated via Lua&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;progNameChanged newContent=&quot;..newContent)&#13;&#10;&#13;&#10;&#9;local csKey, parmName&#13;&#10;&#9;csKey = pg_compSubscribeInvertName[&quot;lblProgName&quot;]&#13;&#10;&#9;if csKey ~= nil then&#13;&#10;&#9;&#9;parmName = pg_compSubscribe[csKey].parmName&#13;&#10;&#9;&#9;progParmSet(pg_editBuffer[pg_activeEditBuffer], parmName, newContent)&#13;&#10;&#9;&#9;sendProgToSynth(true)&#13;&#10;&#9;&#9;updateBufProgName(pg_activeEditBuffer)&#13;&#10;&#9;end&#13;&#10;end"
                     luaMethodLinkedProperty="uiLabelChangedCbk" luaMethodSource="0"
                     uuid="c3254440feaf46e4a3b31777a79243d9" luaMethodValid="1"/>
        </luaMethodGroup>
        <luaMethod luaMethodName="panelBeforeAnyModulators" luaMethodCode="--&#10;-- Called when the panel is created, no modulators will exist at this point&#10;-- consider this the panels constructor&#10;--&#10;panelBeforeAnyModulators = function()&#10;&#9;pg_prePanelSts = &quot;BeforeAnyModulators&quot;&#13;&#10;&#9;local s = L(panel:getPropertyString(&quot;ZZCustomPanelDebug&quot;))&#13;&#10;&#9;if s == &quot;&quot; then&#13;&#10;&#9;&#9;pg_panelDebug = 3&#9;-- no value, so setting a default value&#13;&#10;&#9;&#9;panel:setPropertyString(&quot;ZZCustomPanelDebug&quot;, &quot;3&quot;)&#10;&#9;else&#13;&#10;&#9;&#9;pg_panelDebug = tonumber(s)&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;panelBeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState())..&quot; &quot;..os.date(&quot;%Y/%m/%d %H:%M:%S&quot;) )&#13;&#10;&#13;&#10;&#9;defaultSettings()&#13;&#10;&#9;addToLog(&quot;panelBeforeAnyModulators pg_panelDebug is &quot;..pg_panelDebug)&#13;&#10;&#13;&#10;&#9;setupSynthData()&#13;&#10;end"
                   luaMethodLinkedProperty="luaPanelBeforeLoad" luaMethodSource="0"
                   uuid="f2503f4c1df445e48d0e024520702f91" luaMethodValid="1"/>
        <luaMethod luaMethodName="panelLoaded" luaMethodCode="--&#10;-- Called when the panel has finished loading&#10;--&#10;-- @type the type of instance beeing started, types available in the CtrlrPanel&#10;-- class as enum&#10;--&#10;-- InstanceSingle&#10;-- InstanceMulti&#10;-- InstanceSingleRestriced&#10;-- InstanceSingleEngine&#10;-- InstanceMultiEngine&#10;-- InstanceSingleRestrictedEngine&#10;--&#10;panelLoaded = function(--[[ CtrlrInstance --]] type)&#10;&#9;addToLog(&quot;panelLoaded begin pg_prePanelSts=&quot;..pg_prePanelSts..&quot; bootstrapState=&quot;..tostring(panel:getBootstrapState())..&quot; &quot;..os.date(&quot;%Y/%m/%d %H:%M:%S&quot;) )&#13;&#10;&#13;&#10;&#9;setupPanelComponents()&#13;&#10;&#13;&#10;&#9;-- Initialize edit buffers&#13;&#10;&#9;pg_editBuffer = {}&#13;&#10;&#9;if pg_savedEditBuffer == nil or next(pg_savedEditBuffer) == nil then&#13;&#10;&#9;&#9;loadStateData()&#13;&#10;&#9;else&#13;&#10;&#9;&#9;if pg_colorLastChosen == nil then&#13;&#10;&#9;&#9;&#9;pg_colorLastChosen = &quot;lblColorValueFG&quot;&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;for k=1, 4, 1 do&#13;&#10;&#9;&#9;if pg_savedEditBuffer[k] ~= nil then&#13;&#10;&#9;&#9;&#9;pg_editBuffer[k] = pg_savedEditBuffer[k]&#13;&#10;&#9;&#9;&#9;addToLog(&quot;panelLoaded Restoring edit buffer &quot;..tostring(k)..&quot; from saved state&quot;)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;pg_editBuffer[k] = initProgram()&#13;&#10;&#9;&#9;&#9;addToLog(&quot;panelLoaded Initializing edit buffer &quot;..tostring(k))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;updateBufProgName(k)&#13;&#10;&#9;end&#13;&#10;&#9;if panel:getModulatorByName(&quot;btnEditBuffer4&quot;):getModulatorValue() == 1 then&#13;&#10;&#9;&#9;pg_activeEditBuffer = 4&#13;&#10;&#9;elseif panel:getModulatorByName(&quot;btnEditBuffer3&quot;):getModulatorValue() == 1 then&#13;&#10;&#9;&#9;pg_activeEditBuffer = 3&#13;&#10;&#9;elseif panel:getModulatorByName(&quot;btnEditBuffer2&quot;):getModulatorValue() == 1 then&#13;&#10;&#9;&#9;pg_activeEditBuffer = 2&#13;&#10;&#9;else&#13;&#10;&#9;&#9;pg_activeEditBuffer = 1&#13;&#10;&#9;end&#13;&#10;&#9;pg_lastEditBufferSent = pg_activeEditBuffer&#13;&#10;&#13;&#10;&#9;-- Initialize program banks plus search result bank&#13;&#10;&#9;pg_numberOfBanks = 12&#13;&#10;&#9;pg_bankProgramData = {}&#13;&#10;&#9;pg_bankInfo = {}&#13;&#10;&#9;local bankComboList = {}&#13;&#10;&#9;for i = 1, pg_numberOfBanks do&#13;&#10;&#9;&#9;pg_bankProgramData[i] = {}&#13;&#10;&#9;&#9;pg_bankInfo[i] = { fullPathName = &quot;&quot;, sourceOfContents = &quot;&quot;, bankChoice = -1 }&#13;&#10;&#9;&#9;bankComboList[i] = i&#13;&#10;&#9;end&#13;&#10;&#9;local mod = panel:getModulatorByName(&quot;cmbLeftBank&quot;)&#13;&#10;&#9;loadComboContentFromTable(mod, bankComboList)&#13;&#10;&#9;pg_bankProgramData[pg_numberOfBanks + 1] = {}&#13;&#10;&#9;pg_bankInfo[pg_numberOfBanks + 1] = { fullPathName = &quot;&quot;, sourceOfContents = &quot;Search results&quot;, bankChoice = -1 }&#13;&#10;&#9;pg_searchResultSourceBankProg = {}&#13;&#10;&#9;pg_leftBank = mod:getModulatorValue() + 1&#13;&#10;&#9;if pg_leftBank &lt; 1 then&#13;&#10;&#9;&#9;pg_leftBank = 1&#13;&#10;&#9;&#9;mod:setModulatorValue(pg_leftBank - 1, false, false, false)&#13;&#10;&#9;end&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;cmbSearchFromBank&quot;)&#13;&#10;&#9;loadComboContentFromTable(mod, bankComboList)&#13;&#10;&#9;mod:setModulatorValue(0, false, false, false)&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;cmbSearchThruBank&quot;)&#13;&#10;&#9;loadComboContentFromTable(mod, bankComboList)&#13;&#10;&#9;mod:setModulatorValue(pg_numberOfBanks - 1, false, false, false)&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;cmbRightBank&quot;)&#13;&#10;&#9;pg_rightBank = mod:getModulatorValue() + 1&#13;&#10;&#9;if pg_rightBank &lt; 1 or pg_rightBank &gt; pg_numberOfBanks then&#13;&#10;&#9;&#9;pg_rightBank = 2&#13;&#10;&#9;&#9;mod:setModulatorValue(pg_rightBank - 1, false, false, false)&#13;&#10;&#9;end&#13;&#10;&#9;bankComboList[pg_numberOfBanks + 1] = &quot;Results&quot;&#13;&#10;&#9;loadComboContentFromTable(mod, bankComboList)&#13;&#10;&#13;&#10;&#9;-- Initialize certain global variables and component values&#13;&#10;&#9;renderProgramEditor()&#13;&#10;&#9;pg_prePanelSts = &quot;PanelLoaded&quot;&#9;-- This signals to modulator-changed methods that they can accept events&#13;&#10;&#9;displayMessage(&quot;&quot;)&#13;&#10;&#9;panel:getModulatorByName(&quot;cmbDebugLevel&quot;):setModulatorValue(pg_panelDebug, false, false, false)&#13;&#10;&#9;pg_MIDIParamSendRecv = panel:getModulatorByName(&quot;cmbMIDIParamSendRecv&quot;):getModulatorValue()&#13;&#10;&#9;pg_requestEditBuffer = panel:getModulatorByName(&quot;btnRequestEditBuffer&quot;):getModulatorValue()&#13;&#10;&#9;pg_bankTaskTyp = panel:getModulatorByName(&quot;cmbBankTaskTyp&quot;):getValue()&#13;&#10;&#9;pg_receiveSysExProgBankTarget = 0&#13;&#10;&#9;pg_colorValueFG = L(panel:getLabel(&quot;lblColorValueFG&quot;):getText())&#13;&#10;&#9;pg_colorValueBG = L(panel:getLabel(&quot;lblColorValueBG&quot;):getText())&#13;&#10;&#9;pg_colorButtonOn = L(panel:getLabel(&quot;lblColorButtonOn&quot;):getText())&#13;&#10;&#9;pg_colorButtonOff = L(panel:getLabel(&quot;lblColorButtonOff&quot;):getText())&#13;&#10;&#9;pg_colorBackground = L(panel:getLabel(&quot;lblColorBackground&quot;):getText())&#13;&#10;&#9;pg_colorValueText = L(panel:getLabel(&quot;lblColorValueText&quot;):getText())&#13;&#10;&#13;&#10;&#9;local bankPath&#13;&#10;&#9;for i = 1, pg_numberOfBanks do&#13;&#10;&#9;&#9;bankPath = L(panel:getPropertyString(&quot;ZZCustomBank&quot;..tostring(i)..&quot;Path&quot;))&#13;&#10;&#9;&#9;if bankPath ~= &quot;&quot; then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;panelLoaded attempting to reload bank &quot;..tostring(i)..&quot; from file&quot;)&#13;&#10;&#9;&#9;&#9;pg_bankInfo[i].fullPathName = bankPath&#13;&#10;&#9;&#9;&#9;doBankTaskLoad(i, true)&#13;&#10;&#9;&#9;&#9;if pg_bankInfo[i].sourceOfContents ~= &quot;file&quot; then&#9;-- reload failed&#10;&#9;&#9;&#9;&#9;pg_bankInfo[i].fullPathName = &quot;&quot;&#10;&#9;&#9;&#9;&#9;panel:setPropertyString(&quot;ZZCustomBank&quot;..tostring(i)..&quot;Path&quot;, &quot;&quot;)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Initialize program bank display&#13;&#10;&#9;loadLeftProgramNameList()&#13;&#10;&#9;loadRightProgramNameList()&#13;&#10;&#9;panel:getModulatorByName(&quot;cmbLeftBank&quot;):setModulatorValue(pg_leftBank - 1, false, false, false)&#13;&#10;&#9;panel:getModulatorByName(&quot;cmbRightBank&quot;):setModulatorValue(pg_rightBank - 1, false, false, false)&#13;&#10;&#13;&#10;&#9;-- Call method to correctly set field visibility&#13;&#10;&#9;bankTaskTypChanged(panel:getModulatorByName(&quot;cmbBankTaskTyp&quot;), pg_bankTaskTyp, 4)&#13;&#10;&#9;local mod&#13;&#10; &#9;mod = panel:getModulatorByName(&quot;cmbSearchParm1&quot;)&#13;&#10;&#9;searchParmChanged(mod, mod:getModulatorValue(), 4)&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;cmbSearchParm2&quot;)&#13;&#10;&#9;searchParmChanged(mod, mod:getModulatorValue(), 4)&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;cmbSearchParm3&quot;)&#13;&#10;&#9;searchParmChanged(mod, mod:getModulatorValue(), 4)&#13;&#10;&#9;mod = panel:getModulatorByName(&quot;cmbSearchParm4&quot;)&#13;&#10;&#9;searchParmChanged(mod, mod:getModulatorValue(), 4)&#13;&#10;&#9;addToLog(&quot;panelLoaded end&quot;)&#13;&#10;end"
                   luaMethodLinkedProperty="luaPanelLoaded" luaMethodSource="0"
                   uuid="b47942c34d1c4157a7f397425a83c5ae" luaMethodValid="1"/>
        <luaMethod luaMethodName="defaultSettings" luaMethodCode="function defaultSettings()&#10;&#9;addToLog(&quot;defaultSettings&quot;)&#13;&#10;&#13;&#10;&#9;addToLog(&quot;pg_panelDebug is &quot;..pg_panelDebug)&#13;&#10;&#13;&#10;&#9;-- Settings file for this panel&#13;&#10;&#9;local s, j&#10;&#9;s = panel:getProperty(&quot;panelFilePath&quot;)&#10;&#9;if string.sub(s, 0, 1) == &quot;/&quot; then  -- probably macOS or Linux&#10;&#9;&#9;j = string.len(s) - string.find(string.reverse(s), &quot;/&quot;, 1, true) + 1&#10;&#9;else  -- probably Windows&#10;&#9;&#9;j = string.len(s) - string.find(string.reverse(s), &quot;\\&quot;, 1, true) + 1&#10;&#9;end&#10;&#9;pg_synthSettingsFile = string.sub(s, 1, j)..&quot;OB6Settings.txt&quot;&#10;&#9;addToLog(&quot;defaultSettings settings file=&quot;..pg_synthSettingsFile)&#13;&#10;&#9;pg_initProgFilename = string.sub(s, 1, j)..&quot;OB6InitProg.syx&quot;&#13;&#10;&#9;pg_debugLogFilename = nil&#13;&#10;&#9;pg_debugLogFile = nil&#13;&#10;&#13;&#10;&#9;-- Read config file and set variables&#13;&#10;&#9;local file, line, initfile&#13;&#10; &#9;file = io.open(pg_synthSettingsFile, &quot;r&quot;)&#13;&#10;&#9;if file == nil then&#13;&#10;&#9;&#9;addToLog(&quot;defaultSettings unable to open settings file&quot;)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;line = file:read()&#13;&#10;&#9;&#9;while line ~= nil do&#13;&#10;&#9;&#9;&#9;console(line)&#13;&#10;&#9;&#9;&#9;if string.len(line) &gt; 6 and string.sub(line, 1, 6) == &quot;debug=&quot; then&#13;&#10;&#9;&#9;&#9;&#9;s = string.sub(line, 7, string.len(line))&#13;&#10;&#9;&#9;&#9;&#9;if string.find(&quot;0123&quot;, s, 1, true) ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;pg_panelDebug = tonumber(s)&#13;&#10;&#9;&#9;&#9;&#9;&#9;addToLog(&quot;pg_panelDebug is &quot;..pg_panelDebug)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;addToLog(&quot;pg_panelDebug unknow value &quot;..s..&quot; ignored&quot;)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;elseif string.len(line) &gt; 13 and string.sub(line, 1, 13) == &quot;initProgFile=&quot; then&#13;&#10;&#9;&#9;&#9;&#9;pg_initProgFilename = string.sub(line, 14, string.len(line))&#13;&#10;&#9;&#9;&#9;&#9;addToLog(&quot;defaultSettings settings file: pg_initProgFilename is &quot;..pg_initProgFilename)&#13;&#10;&#9;&#9;&#9;elseif string.len(line) &gt; 13 and string.sub(line, 1, 13) == &quot;debugLogFile=&quot; then&#13;&#10;&#9;&#9;&#9;&#9;pg_debugLogFilename = string.sub(line, 14, string.len(line))&#13;&#10;&#9;&#9;&#9;&#9;addToLog(&quot;defaultSettings settings file: pg_debugLogFilename is &quot;..pg_debugLogFilename)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;line = file:read()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;file:close()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;initfile = io.open(pg_initProgFilename, &quot;r&quot;)&#13;&#10;&#9;if initfile == nil then&#13;&#10;&#9;&#9;addToLog(&quot;initProgram open failed for &quot;..pg_initProgFilename)&#13;&#10;&#9;&#9;pg_initProgFilename = nil&#13;&#10;&#9;else&#13;&#10;&#9;&#9;initfile:close()&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if pg_debugLogFilename ~= nil then&#13;&#10;&#9;&#9;pg_debugLogFile = io.open(pg_debugLogFilename, &quot;w&quot;)&#13;&#10;&#9;&#9;if pg_debugLogFile == nil then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;defaultSettings open failed for &quot;..pg_debugLogFilename)&#13;&#10;&#9;&#9;&#9;pg_debugLogFilename = nil&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;pg_debugLogFile:write(string.format(&quot;[%s] Opened log file\n&quot;, os.date(&quot;%Y/%m/%d %H:%M:%S&quot;)))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="a77e2b4866f54275a985e1437cff596e"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="renderProgramEditor" luaMethodCode="-- Refresh contents of program editor components from active edit buffer&#10;--&#10;-- @parmName - if populated, only refresh components subscribed this one parm; otherwise, refresh all&#10;-- @sourceCompName - if populated along with parmName, only refresh components subscribed this one parm, and&#13;&#10;--      exclude this component (which was the source of the change, so it doesn't need to rendered again)&#10;--&#10;renderProgramEditor = function(--[[ String --]] parmName, --[[ String --]] sourceCompName)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;renderProgramEditor BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;renderProgramEditor parmName=&quot;..tostring(parmName)..&quot;, sourceCompName=&quot;..tostring(sourceCompName))&#13;&#10;&#13;&#10;&#9;pg_methodIsUpdatingComponents = true&#13;&#10;&#13;&#10;&#9;local j&#13;&#10;&#9;if parmName ~= nil then&#13;&#10;&#9;&#9;j = pg_compSubscribeInvertParm[parmName]&#13;&#10;&#9;&#9;if j == nil then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;renderProgramEditor parmName=&quot;..tostring(parmName)..&quot; not found&quot;)&#13;&#10;&#9;&#9;&#9;pg_methodIsUpdatingComponents = false&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;for k,v in ipairs(pg_compSubscribeInvertParm[parmName]) do&#13;&#10;&#9;&#9;&#9;if pg_compSubscribe[v].uiComp == sourceCompName then&#13;&#10;&#9;&#9;&#9;&#9;addToLog(&quot;renderProgramEditor do not render source component again&quot;)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;renderOneComp(v)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;else&#13;&#10;&#9;&#9;for k,v in pairs(pg_compSubscribeUnique) do&#13;&#10;&#9;&#9;&#9;renderOneComp(k)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;-- update other data field, showing parms which can't be edited&#13;&#10;&#9;&#9;local s, chordNote&#13;&#10;&#9;&#9;s = &quot;Chord&quot;&#13;&#10;&#13;&#10;&#9;&#9;-- Loop through chord notes, stopping with first value of 127 found&#13;&#10;&#9;&#9;j = 1&#13;&#10;&#9;&#9;while j &lt;= 6 do&#13;&#10;&#9;&#9;&#9;chordNote = pg_editBuffer[pg_activeEditBuffer]:getByte(pg_synthProg[pg_synthProgInvertName[&quot;Chord&quot;..tostring(j)]].parmSyxPos)&#13;&#10;&#9;&#9;&#9;if chordNote == 127 then&#13;&#10;&#9;&#9;&#9;&#9;j = 7&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;s = s..string.format(&quot; %d&quot;, chordNote)&#13;&#10;&#9;&#9;&#9;&#9;j = j + 1&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;panel:getComponent(&quot;lblOtherProgData&quot;):setPropertyString(&quot;uiLabelText&quot;, s)&#13;&#10;&#9;end&#10;&#13;&#10;&#9;pg_methodIsUpdatingComponents = false&#13;&#10;end&#13;&#10;&#13;&#10;renderOneComp = function(--[[ number --]] csKey)&#10;&#9;local v, j, parmValue&#13;&#10;&#9;v = pg_compSubscribe[csKey]&#13;&#10;&#9;j = pg_synthProgInvertName[v.parmName]&#13;&#10;&#9;parmValue = progParmGet(pg_editBuffer[pg_activeEditBuffer], v.parmName)&#13;&#10;&#9;if v.updateType == nil then&#13;&#10; &#9;&#9;-- Optimization to reference modulator rather than slower name lookup&#13;&#10;&#9;&#9;pg_compSubscribeMod[csKey]:setModulatorValue(parmValue, false, false, false)&#13;&#10;&#9;elseif v.updateType == &quot;label&quot; then&#13;&#10;&#9;&#9;pg_compSubscribeMod[csKey]:getComponent():setPropertyString(&quot;uiLabelText&quot;, parmValue)&#13;&#10;&#9;elseif v.updateType ~= nil then&#13;&#10;&#9;&#9;_G[v.updateType]()&#9;-- invokes method name&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="377ac68f749c4b12849989297dca97dc"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="modulatorChanged" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;modulatorChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#13;&#10;&#9;-- Call this from each individual modulator when changed, do not call from panel modulator-changed&#13;&#10;&#9;-- Works with uiCombo, uiSlider&#10;&#9;local modName = L(mod:getName())&#13;&#10;&#9;if ignoreModulatorUpdateEvent(&quot;modulatorChanged &quot;..modName, source) then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;modulatorChanged &quot;..modName..&quot; value=&quot;..tostring(value)..&quot; source=&quot;..tostring(source))&#13;&#10;&#13;&#10;&#9;if modName == &quot;cmbDebugLevel&quot; then&#13;&#10;&#9;&#9;pg_panelDebug = value&#13;&#10;&#9;&#9;panel:setPropertyString(&quot;ZZCustomPanelDebug&quot;, tostring(pg_panelDebug))&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local csKey, parmName, rpKey&#13;&#10;&#9;csKey = pg_compSubscribeInvertName[modName]&#13;&#10;&#9;if csKey ~= nil then&#13;&#10;&#9;&#9;parmName = pg_compSubscribe[csKey].parmName&#13;&#10;&#9;&#9;rpKey = pg_synthProgInvertName[parmName]&#13;&#10;&#9;&#9;if pg_synthProg[rpKey].parmType == &quot;text&quot; then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;modulatorChanged &quot;..modName..&quot; value=&quot;..tostring(value)..&quot; source=&quot;..tostring(source)..&quot;. Text update not implemented&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;progParmSet(pg_editBuffer[pg_activeEditBuffer], parmName, value)&#13;&#10;&#9;&#9;if pg_MIDIParamSendRecv == 1 then&#13;&#10;&#9;&#9;&#9;if pg_synthProg[rpKey].parmCC ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;sendCC(tonumber(pg_synthProg[rpKey].parmCC), mapCompValToCC(value, parmName))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;if pg_synthProg[rpKey].parmNRPN ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;sendNRPN(tonumber(pg_synthProg[rpKey].parmNRPN), mapCompValToProgParm(value, parmName))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;-- Render other components subscribed to this parm (except this one, which was the source of the change)&#13;&#10;&#9;&#9;renderProgramEditor(parmName, modName)&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="d247814e43844843b98bf0714c9acca2"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="customSetModulatorValue" luaMethodCode="-- Works around issue where updates via setModulatorValue trigger the value-changed method as if&#13;&#10;-- the user made the change with the GUI.&#13;&#10;--&#13;&#10;-- Methods must be modified to check: if pg_methodIsUpdatingComponents = true then return&#10;--&#10;customSetModulatorValue = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value)&#10;&#9;local wasStsAlreadySet&#13;&#10;&#9;if pg_methodIsUpdatingComponents then&#13;&#10;&#9;&#9;wasStsAlreadySet = true&#13;&#10;&#9;else&#13;&#10;&#9;&#9;wasStsAlreadySet = false&#13;&#10;&#9;&#9;pg_methodIsUpdatingComponents = true&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;mod:setModulatorValue(value, false, false, false)&#13;&#10;&#13;&#10;&#9;if wasStsAlreadySet == false then&#10;&#9;&#9;pg_methodIsUpdatingComponents = false&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="f81ebcaeb84c4363ad251eabd00d69f2"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="displayMessage" luaMethodCode="function displayMessage(--[[ String --]] msg)&#13;&#10;&#9;addToLog(&quot;displayMessage \&quot;&quot;..msg..&quot;\&quot;&quot;)&#10;&#9;panel:getComponent(&quot;lblMsgDisplay&quot;):setPropertyString(&quot;uiLabelText&quot;, msg)&#13;&#10;&#9;if msg ~= &quot;&quot; then&#13;&#10;&#9;&#9;timer:setCallback(32, timerCallback)&#13;&#10;&#9;&#9;timer:startTimer(32, tonumber(panel:getProperty(&quot;panelMessageTime&quot;)))&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="b6a94ad506554abe8e5919a364853a30"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="timerCallback" luaMethodCode="function timerCallback(timerId)&#10;&#9;addToLog(string.format(&quot;[%s] timerCallback begin id=%s&quot;, os.date(&quot;%Y/%m/%d %H:%M:%S&quot;), timerId))&#13;&#10;&#13;&#10;-- ========== Erase message after panel's message timeout expires ==========&#13;&#10;&#9;if timerId == 32 then&#13;&#10;&#9;&#9;displayMessage(&quot;&quot;)&#13;&#10;&#9;&#9;timer:stopTimer(32)&#13;&#10;&#13;&#10;-- ========== Sending bank programs as SysEx to synth - need delay between them ==========&#13;&#10;&#9;elseif timerId == 33 then&#13;&#10;&#9;&#9;local programData, SysEx&#13;&#10;   &#9;&#9;programData = utils.packDsiData(pg_bankProgramData[pg_leftBank][pg_sendSysExProgNumStart])&#13;&#10;&#9;&#9;SysEx = string.format(&quot;%s 0%d %02x %s f7&quot;, pg_synthInfo.programDataSysExHeader, pg_sendSysExBankNum, pg_sendSysExProgNumStart - 1, programData:toHexString(1))&#13;&#10;&#9;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(SysEx))&#13;&#10;&#9;&#9;addToLog(&quot;timerCallback SendSysEx sending program &quot;..tostring(pg_sendSysExProgNumStart))&#13;&#10;&#9;&#9;displayMessage(&quot;sending SysEx program &quot;..tostring(pg_sendSysExProgNumStart - 1))&#13;&#10;&#13;&#10;&#9;&#9;pg_sendSysExProgNumStart = pg_sendSysExProgNumStart + 1&#13;&#10;&#9;&#9;if pg_sendSysExProgNumStart &gt; pg_sendSysExProgNumEnd then&#13;&#10;&#9;&#9;&#9;timer:stopTimer(33)&#13;&#10;&#9;&#9;&#9;addToLog(&quot;timerCallback SendSysEx &quot;..tostring(pg_sendSysExProgNumEnd)..&quot; SysEx programs sent&quot;)&#13;&#10;&#9;&#9;&#9;displayMessage(tostring(pg_sendSysExProgNumEnd)..&quot; SysEx programs sent&quot;)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="7223e133217f4c1f8ed01829728f2b10"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="saveStateData" luaMethodCode="--&#10;-- Called when data needs saving&#10;--&#10;saveStateData = function(--[[ ValueTree --]]stateData)&#13;&#10;&#9;addToLog(&quot;saveStateData begin pg_prePanelSts=&quot;..pg_prePanelSts..&quot; bootstrapState=&quot;..tostring(panel:getBootstrapState())..&quot; &quot;..os.date(&quot;%Y/%m/%d %H:%M:%S&quot;) )&#13;&#10;&#13;&#10;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateEditBuffer1&quot;, pg_editBuffer[1]:toHexString(1))&#10;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateEditBuffer2&quot;, pg_editBuffer[2]:toHexString(1))&#10;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateEditBuffer3&quot;, pg_editBuffer[3]:toHexString(1))&#10;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateEditBuffer4&quot;, pg_editBuffer[4]:toHexString(1))&#10;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateColorLastChosen&quot;, pg_colorLastChosen)&#10;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateUser1ColorScheme&quot;, string.format(&quot;%s|%s|%s|%s|%s|%s&quot;, pg_user1ColorValueFG,&#13;&#10;&#9;&#9;pg_user1ColorValueBG, pg_user1ColorButtonOn, pg_user1ColorButtonOff, pg_user1ColorBackground, pg_user1ColorValueText))&#10;&#9;panel:setPropertyString(&quot;ZZCustomSaveStateUser2ColorScheme&quot;, string.format(&quot;%s|%s|%s|%s|%s|%s&quot;, pg_user2ColorValueFG,&#13;&#10;&#9;&#9;pg_user2ColorValueBG, pg_user2ColorButtonOn, pg_user2ColorButtonOff, pg_user2ColorBackground, pg_user2ColorValueText))&#10;end"
                   luaMethodLinkedProperty="luaPanelSaveState" luaMethodSource="0"
                   uuid="6e99d59b93cb4d26916092d36460c2a8" luaMethodValid="1"/>
        <luaMethod luaMethodName="loadStateData" luaMethodCode="--&#10;-- Called when data is restored&#10;--&#10;loadStateData = function(--[[ ValueTree --]] stateData)&#10;&#9;addToLog(&quot;loadStateData begin pg_prePanelSts=&quot;..pg_prePanelSts..&quot; bootstrapState=&quot;..tostring(panel:getBootstrapState())..&quot; &quot;..os.date(&quot;%Y/%m/%d %H:%M:%S&quot;) )&#13;&#10;&#13;&#10;&#9;pg_savedEditBuffer = {}&#13;&#10;&#13;&#10;&#9;local s&#13;&#10;&#9;for k=1, 4, 1 do&#13;&#10;&#9;&#9;s = L(panel:getPropertyString(&quot;ZZCustomSaveStateEditBuffer&quot;..tostring(k)))&#13;&#10;&#9;&#9;if string.len(s) == (pg_synthInfo.programSize * 3 - 1) then&#13;&#10;&#9;&#9;&#9;pg_savedEditBuffer[k] = MemoryBlock(s)&#13;&#10;&#9;&#9;&#9;addToLog(&quot;loadStateData Restoring pg_editBuffer&quot;..tostring(k))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;s = L(panel:getPropertyString(&quot;ZZCustomSaveStateColorLastChosen&quot;))&#13;&#10;&#9;if s ~= nil then&#13;&#10;&#9;&#9;pg_colorLastChosen = s&#13;&#10;&#9;else&#13;&#10;&#9;&#9;pg_colorLastChosen = &quot;lblColorValueFG&quot;&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;s = L(panel:getPropertyString(&quot;ZZCustomSaveStateUser1ColorScheme&quot;))&#13;&#10;&#9;if s ~= nil and #s == 53 then&#13;&#10;&#9;&#9;pg_user1ColorValueFG = s:sub(1, 8)&#13;&#10;&#9;&#9;pg_user1ColorValueBG = s:sub(10, 17)&#13;&#10;&#9;&#9;pg_user1ColorButtonOn = s:sub(19, 26)&#13;&#10;&#9;&#9;pg_user1ColorButtonOff = s:sub(28, 35)&#13;&#10;&#9;&#9;pg_user1ColorBackground = s:sub(37, 44)&#13;&#10;&#9;&#9;pg_user1ColorValueText = s:sub(46, 53)&#13;&#10;&#9;end&#13;&#10;&#9;s = L(panel:getPropertyString(&quot;ZZCustomSaveStateUser2ColorScheme&quot;))&#13;&#10;&#9;if s ~= nil and #s == 53 then&#13;&#10;&#9;&#9;pg_user2ColorValueFG = s:sub(1, 8)&#13;&#10;&#9;&#9;pg_user2ColorValueBG = s:sub(10, 17)&#13;&#10;&#9;&#9;pg_user2ColorButtonOn = s:sub(19, 26)&#13;&#10;&#9;&#9;pg_user2ColorButtonOff = s:sub(28, 35)&#13;&#10;&#9;&#9;pg_user2ColorBackground = s:sub(37, 44)&#13;&#10;&#9;&#9;pg_user2ColorValueText = s:sub(46, 53)&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="luaPanelRestoreState" luaMethodSource="0"
                   uuid="05a8d47b731a44abbea61a5c4e3d5c49" luaMethodValid="1"/>
        <luaMethod luaMethodName="sendBankProgChange" luaMethodCode="--&#10;-- Called when a modulator value changes&#10;-- @mod   http://ctrlr.org/api/class_ctrlr_modulator.html&#10;-- @value    new numeric value of the modulator&#10;--&#10;sendBankProgChange = function(--[[ CtrlrModulator --]] mod, --[[ number --]] value, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;sendBankProgChange begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local msg, chan, bankNum, progNum&#13;&#10;&#9;bankNum = panel:getComponent(&quot;sldBankNum&quot;):getValue()&#13;&#10;&#9;progNum = panel:getComponent(&quot;sldProgNum&quot;):getValue()&#13;&#10;&#13;&#10;&#9;if source == 5 or source == 6 then  -- updated via Lua or program, e.g. setModulatorValue()&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;if pg_methodIsUpdatingComponents then  -- updated via Lua&#13;&#10;&#9;&#9;addToLog(&quot;sendBankProgChange suppressed because pg_methodIsUpdatingComponents=true&quot;)&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Special logic to switch to next lower or higher bank when going &quot;past the end&quot; of program range 0-99&#13;&#10;&#9;if progNum &lt; 0 then&#13;&#10;&#9;&#9;if bankNum &gt; 0 then&#13;&#10;&#9;&#9;&#9;bankNum = bankNum - 1&#13;&#10;&#9;&#9;&#9;progNum = 99&#13;&#10;&#9;&#9;&#9;customSetModulatorValue(panel:getModulatorByName(&quot;sldBankNum&quot;), bankNum)&#13;&#10;&#9;&#9;&#9;customSetModulatorValue(panel:getModulatorByName(&quot;sldProgNum&quot;), progNum)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;progNum = 0&#13;&#10;&#9;&#9;&#9;customSetModulatorValue(panel:getModulatorByName(&quot;sldProgNum&quot;), progNum)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;elseif progNum &gt; 99 then&#13;&#10;&#9;&#9;if bankNum &lt; 9 then&#13;&#10;&#9;&#9;&#9;bankNum = bankNum + 1&#13;&#10;&#9;&#9;&#9;progNum = 0&#13;&#10;&#9;&#9;&#9;customSetModulatorValue(panel:getModulatorByName(&quot;sldBankNum&quot;), bankNum)&#13;&#10;&#9;&#9;&#9;customSetModulatorValue(panel:getModulatorByName(&quot;sldProgNum&quot;), progNum)&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;progNum = 99&#13;&#10;&#9;&#9;&#9;customSetModulatorValue(panel:getModulatorByName(&quot;sldProgNum&quot;), progNum)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;addToLog(string.format(&quot;sendBankProgChange to MIDI out, bank %d prog %d&quot;, bankNum, progNum))&#13;&#10;&#13;&#10;&#9;chan = string.format(&quot;%X&quot;, panel:getProperty(&quot;panelMidiOutputChannelDevice&quot;) - 1)&#10;&#9;msg = string.format(&quot;B%s 20 %02X&quot;, chan, bankNum)&#13;&#10;&#9;addToLog(&quot;sendBankProgChange midi msg=&quot;..msg)&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(msg))&#13;&#10;&#13;&#10;&#9;msg = string.format(&quot;C%s %02X&quot;, chan, progNum)&#13;&#10;&#9;addToLog(&quot;sendBankProgChange midi msg=&quot;..msg)&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(msg))&#13;&#10;&#13;&#10;&#9;if pg_requestEditBuffer == 1&#13;&#10;&#9;and panel:getModulatorByName(&quot;btnMuteEditBuffer&quot;..tostring(pg_activeEditBuffer)):getModulatorValue() == 0 then&#13;&#10;&#9;&#9;requestProgFromSynth()&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="8d96dccbbf6645c6940f1f330e7e8d73"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="tabsLayersChanged" luaMethodCode="--&#10;-- Called when the current tab in an uiTabs component is changed&#10;--&#10;&#10;tabsLayersChanged = function(--[[ CtrlrModulator --]] mod, --[[ number --]] tabIndex)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;tabsLayersChanged begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;if pg_methodIsUpdatingComponents then&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;tabsLayersChanged tabIndex=&quot;..tostring(tabIndex))&#13;&#10;&#13;&#10;&#9;local chan, msg&#13;&#10;&#9;chan = string.format(&quot;%X&quot;, panel:getProperty(&quot;panelMidiOutputChannelDevice&quot;) - 1)&#10;&#9;msg = string.format(&quot;B%s 50 %02X&quot;, chan, tabIndex)&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(msg))&#13;&#10;end"
                   luaMethodLinkedProperty="uiTabsCurrentTabChanged" luaMethodSource="0"
                   uuid="2610cb0ae4fb4f729d18f1a35e36c004" luaMethodValid="1"/>
        <luaMethod luaMethodName="ignoreModulatorUpdateEvent" luaMethodCode="-- Common module to signal to calling method that update event should be ignored because&#13;&#10;-- it originated from Lua rather than from user change.&#13;&#10;-- Returns true if event should be ignored.&#13;&#10;--&#10;ignoreModulatorUpdateEvent = function(--[[ string --]] methodName, --[[ number --]] source)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(methodName..&quot; begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return true&#13;&#10;&#9;elseif source == 5 or source == 6 then  -- updated via Lua or program, e.g. setModulatorValue()&#13;&#10;--&#9;&#9;addToLog(methodName..&quot; suppressed because source=&quot;..tostring(source))&#13;&#10;        return true&#13;&#10;&#9;elseif pg_methodIsUpdatingComponents then&#13;&#10;&#9;&#9;addToLog(methodName..&quot; suppressed because pg_methodIsUpdatingComponents=true&quot;)&#13;&#10;        return true&#13;&#10;&#9;end&#13;&#10;&#9;return false&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="e08d4b1a796149689aa414ff408bb8bf"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="customSetLabelText" luaMethodCode="-- Works around issue where updates via setText trigger the value-changed method as if&#13;&#10;-- the user made the change with the GUI.&#13;&#10;--&#13;&#10;-- Methods must be modified to check: if pg_methodIsUpdatingComponents = true then return&#10;--&#10;customSetLabelText = function(--[[ CtrlrLabel --]] label, --[[ String --]] newContent)&#10;&#9;local wasStsAlreadySet&#13;&#10;&#9;if pg_methodIsUpdatingComponents then&#13;&#10;&#9;&#9;wasStsAlreadySet = true&#13;&#10;&#9;else&#13;&#10;&#9;&#9;wasStsAlreadySet = false&#13;&#10;&#9;&#9;pg_methodIsUpdatingComponents = true&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;label:setText(newContent)&#13;&#10;&#13;&#10;&#9;if wasStsAlreadySet == false then&#10;&#9;&#9;pg_methodIsUpdatingComponents = false&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="0e41f5277606444dbbcdbd31866771eb"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="setupPanelComponents" luaMethodCode="function setupPanelComponents()&#10;&#9;addToLog(&quot;setupPanelComponents&quot;)&#13;&#10;&#13;&#10;&#9;-- User interface components which need to reflect changes to program parameters&#13;&#10;&#9;pg_compSubscribe = {&#13;&#10;&#9;&#9;{ uiComp = &quot;lblProgName&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;ProgramName&quot;, updateType = &quot;label&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbOscAFreq&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc1Freq&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnOscASync&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc1Sync&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldOscAShape&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc1Shape&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldOscAPW&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc1PW&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbOscBFreq&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc2Freq&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldOscBFine&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc2FreqFine&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldOscBShape&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc2Shape&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldOscBPW&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc2PW&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnOscBLoFreq&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc2LoFreq&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnOscBKbd&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc2Kbd&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldMixerOscA&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc1Level&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldMixerOscB&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Osc2Level&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldMixerSubOct&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;SubOctLevel&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnGlideOn&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;GlideOn&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbGlideMode&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;GlideMode&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldGlide&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;GlideRate&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbPBendRange&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PitchBendRange&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldMixerNoise&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;NoiseLevel&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldVintage&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;VintageAmt&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldFiltFreq&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltFreq&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldFiltRes&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltRes&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbFiltKbdTrack&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltKbdTrack&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnVelFilter&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltVel&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldFiltMode&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltMode&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnFiltBP&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltBP&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnVelAmp&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AmpVel&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldProgVolume&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;ProgVolume&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldPanSpread&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PanSpread&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldDistortion&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;Distortion&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldAmpEnvAmt&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AmpEnvAmt&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldAmpEnvAttack&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AmpEnvAttack&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldAmpEnvDecay&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AmpEnvDecay&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldAmpEnvSustain&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AmpEnvSustain&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldAmpEnvRelease&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AmpEnvRelease&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldFiltEnvAmt&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltEnvAmt&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldFiltEnvAttack&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltEnvAttack&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldFiltEnvDecay&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltEnvDecay&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldFiltEnvSustain&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltEnvSustain&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldFiltEnvRelease&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;FiltEnvRelease&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldLFOFreq&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFOFreq&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldLFOInitAmt&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFOInitAmt&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbLFOShape&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFOShape&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnLFOSync&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFOSync&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnLFODestOsc1&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFODestOsc1&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnLFODestOsc2&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFODestOsc2&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbLFODestPW&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFODestPW&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnLFOFiltFreq&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFODestFFreq&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnLFOFiltMode&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFODestFMode&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnLFOAmp&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;LFODestAmp&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldAftAmt&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AftertouchAmt&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnAftOsc1&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AftertouchOsc1&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnAftOsc2&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AftertouchOsc2&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnAftFiltFreq&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AftertouchFFreq&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnAftFiltMode&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AftertouchFMode&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnAftAmp&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AftertouchAmp&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnAftLFOAmt&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;AftertouchLFOAmt&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbEffectAType&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectAType&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldEffectAMix&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectAMix&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldEffectAParam1&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectAParam1&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldEffectAParam2&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectAParam2&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnEffectASync&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectASync&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbEffectASyncRate&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectASyncRate&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbEffectBType&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectBType&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldEffectBMix&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectBMix&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldEffectBParam1&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectBParam1&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldEffectBParam2&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectBParam2&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnEffectBSync&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectBSync&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbEffectBSyncRate&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectBSyncRate&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnEffectsOn&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;EffectsOn&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldPModFiltEnv&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PModFiltEnvAmt&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldPModOsc2&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PModOsc2Amt&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnPModOsc1&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PModOsc1&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnPModShape1&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PModShape1&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnPModPW1&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PModPW1&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnPModFFreq&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PModFFreq&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnPModFMode&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PModFMode&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnPModNormBP&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;PModNormBP&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnUnison&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;UnisonOn&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbUniVoices&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;UnisonMode&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbKeyPriority&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;KeyPriority&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;btnArpOn&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;ArpOn&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbArpMode&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;ArpMode&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbArpRange&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;ArpRange&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;cmbClockTimeSig&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;ClockTimeSig&quot; }&#13;&#10;&#9;,&#9;{ uiComp = &quot;sldClockBPM&quot;, source = &quot;pg_synthProg&quot;, parmName = &quot;ClockBPM&quot; }&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;-- Table to allow fast lookup by component name to get numeric key.&#13;&#10;&#9;-- Used by modulatorChanged() to update program parm when component is changed.&#13;&#10;&#9;-- Note: this only stores one entry per component; assumes if multiple parms are connected to one component,&#13;&#10;&#9;-- then that component is display-only, so storing just the first parm is ok.&#13;&#10;&#9;pg_compSubscribeInvertName = {}&#13;&#10;&#9;-- Table of components each listed once, used when rendering all components&#13;&#10;&#9;pg_compSubscribeUnique = {}&#13;&#10;&#9;for k,v in ipairs(pg_compSubscribe) do&#13;&#10;&#9;&#9;if pg_compSubscribeInvertName[v.uiComp] == nil then&#10;&#9;&#9;&#9;pg_compSubscribeInvertName[v.uiComp] = k&#13;&#10;&#9;&#9;&#9;table.insert(pg_compSubscribeUnique, k)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Table to allow fast lookup by parameter name to get numeric key&#13;&#10;&#9;pg_compSubscribeInvertParm = {}&#13;&#10;&#9;for k,v in ipairs(pg_compSubscribe) do&#13;&#10;&#9;&#9;if pg_compSubscribeInvertParm[v.parmName] == nil then&#13;&#10;&#9;&#9;&#9;pg_compSubscribeInvertParm[v.parmName] = {}&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;table.insert(pg_compSubscribeInvertParm[v.parmName], k)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Table to allow fast lookup of modulators, instead of running getModulatorByName over and over&#13;&#10;&#9;pg_compSubscribeMod = {}&#13;&#10;&#9;for k,v in ipairs(pg_compSubscribe) do&#13;&#10;&#9;&#9;pg_compSubscribeMod[k] = panel:getModulatorByName(v.uiComp)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;pg_listBankSave = &quot;Bank User 0\nBank User 1\nBank User 2\nBank User 3\nBank User 4&quot;&#13;&#10;&#9;pg_listBankSave = pg_listBankSave..&quot;\nBank Fact 5\nBank Fact 6\nBank Fact 7\nBank Fact 8\nBank Fact 9\nEdit Buffers&quot;&#13;&#10;&#9;pg_listBankRecv = &quot;Bank User 0\nBank User 1\nBank User 2\nBank User 3\nBank User 4&quot;&#13;&#10;&#9;pg_listBankRecv = pg_listBankRecv..&quot;\nBank Fact 5\nBank Fact 6\nBank Fact 7\nBank Fact 8\nBank Fact 9\nManual send&quot;&#13;&#10;&#9;SysExSendToFactoryChanged(nil, panel:getModulatorByName(&quot;cmbSysExSendToFactory&quot;):getValue())&#13;&#10;&#13;&#10;&#9;-- Defining list of program tasks, and loading its combo box&#10;&#9;pg_listProgTask = { &quot;Init&quot;, &quot;Copy&quot;, &quot;Compare&quot; }&#10;&#13;&#10;&#9;-- Defining list of bank tasks, and loading its combo box&#10;&#9;pg_listBankTask = { &quot;Left bank: Load from file&quot;, &quot;Left bank: Save to file as&quot;, &quot;Left bank: Recv SysEx&quot;,&#10;&#9;&#9;&quot;Left bank: Send as SysEx&quot;, &quot;Left bank: Names to file&quot;, &quot;Left bank: Erase&quot;,&#13;&#10;&#9;&#9;&quot;Edit buffer: replace prog&quot;, &quot;Edit buffer: append prog&quot;,&#10;&#9;&#9;&quot;Prog: Replace in left bank&quot;, &quot;Prog: Insert to left bank&quot;, &quot;Prog: Append to left bank&quot;,&#10;&#9;&#9;&quot;Prog: Swap left-right&quot;, &quot;Prog: Delete from left bank&quot;,&#10;&#9;&#9;&quot;Right bank: Load from file&quot;, &quot;Right bank: Names to file&quot;, &quot;Right bank: Erase&quot; }&#10;&#10;&#9;-- These are overall panel feature components - don't change their color&#13;&#10;&#9;pg_compGroupExemptFromColorChange = { grpSettings = 1, grpProgCopy = 1, grpProgCompare = 1,&#10;&#9;&#9;grpControls = 1 }&#10;&#9;pg_compNameExemptFromColorChange = { btnOpenSettings = 1, lblMsgDisplay = 1,&#10;&#9;&#9;btnEditBuffer1 = 1, btnEditBuffer2 = 1, btnEditBuffer3 = 1, btnEditBuffer4 = 1,&#10;&#9;&#9;btnDoBankTask = 1, btnSeqPlay = 1, lblMuteEditBuffer = 1, btnSaveLeftBank = 1, btnOpenSearch = 1,&#10;--&#9;&#9;btnMuteEditBuffer1 = 1, btnMuteEditBuffer2 = 1, btnMuteEditBuffer3 = 1,btnMuteEditBuffer4 = 1,&#13;&#10;&#9;&#9;btnLoadFile = 1, btnSaveFile = 1, btnRecvBuffer = 1, btnSendBuffer = 1, btnDoProgTask = 1,&#13;&#10;&#9;&#9;btnLoadFile = 1, btnSaveFile = 1, btnRecvBuffer = 1, btnSendBuffer = 1, btnDoProgTask = 1,&#13;&#10; &#9;&#9;boxProgCompResult = 1 }&#10;&#9;pg_compNameExemptFromValueTextColorChange = { lblPanelName = 1, lblSysExEdLib = 1 }&#10;&#13;&#10;&#9;local numMods, mod, modName, comp, compType, groupName, j&#10;&#9;pg_compAllowColorChange = {}&#9;-- Table of components which allow color change, for fast lookup&#10;&#9;pg_compAllowColorChangeType = {}&#9;-- Matching table of component types&#10;&#9;pg_compAllowValueTextColorChange = {}&#9;-- Matching table records if value text color change is allowed&#10;&#9;numMods = panel:getNumModulators()&#10;&#9;j = 0&#10;&#9;for i=0, numMods - 1, 1 do&#10;&#9;&#9;mod = panel:getModulatorByIndex(i)&#10;&#9;&#9;modName = L(mod:getName())&#10;&#9;&#9;comp = mod:getComponent()&#13;&#10;&#9;&#9;compType = L(comp:getPropertyString(&quot;uiType&quot;))&#10;&#9;&#9;groupName = L(comp:getPropertyString(&quot;componentGroupName&quot;))&#10;&#9;&#9;if string.find(&quot;uiSlider|uiCombo|uiLabel|uiListBox|uiButton|uiTabs&quot;, compType, 1, true) ~= nil&#10;&#9;&#9;and pg_compGroupExemptFromColorChange[groupName] == nil&#10;&#9;&#9;and pg_compNameExemptFromColorChange[modName] == nil then&#10;&#9;&#9;&#9;j = j + 1&#10;&#9;&#9;&#9;pg_compAllowColorChange[j] = comp&#10;&#9;&#9;&#9;pg_compAllowColorChangeType[j] = compType&#10;&#9;&#9;&#9;if pg_compNameExemptFromValueTextColorChange[modName] == nil then&#10;&#9;&#9;&#9;&#9;pg_compAllowValueTextColorChange[j] = true&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;pg_compAllowValueTextColorChange[j] = false&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="f6e02307d1654078a0caa3fd88d0f2f1"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="PresetData" uuid="56e318b8809947b5be2126c13cf8c468">
        <luaMethod luaMethodName="newMidiMessage" luaMethodCode="--&#10;-- Called when a panel receives a midi message (does not need to match any modulator mask)&#10;-- @midi   CtrlrMidiMessage object&#10;--&#10;&#10;newMidiMessage = function(--[[ CtrlrMidiMessage --]] midiMessage)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;newMidiMessage begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;      &#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local j = pg_synthInfo.programSysExHeaderSize&#13;&#10;    local size = midiMessage:getSize()&#13;&#10;&#9;if j &gt; size then&#13;&#10;&#9;&#9;j = size&#13;&#10;&#9;end&#13;&#10;&#9;local msgHexString = midiMessage:getData():getRange(0, j):toHexString(1)&#13;&#10;--&#9;addToLog(&quot;newMidiMessage begin, size=&quot;..tostring(size)..&quot;, starts with &quot;..msgHexString)&#13;&#10;&#13;&#10;-- ========== Look for SysEx program edit buffer ==========&#13;&#10;&#9;if size == pg_synthInfo.programEditPackedSize and msgHexString == pg_synthInfo.programEditSysExHeader then&#13;&#10;&#9;&#9;local programData = utils.unpackDsiData(midiMessage:getData():getRange(pg_synthInfo.programSysExHeaderSize, pg_synthInfo.programPackedSize))&#13;&#10;&#9;&#9;if programData:getSize() ~= pg_synthInfo.programSize then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;loadFromFile Unexpected unpacked program data size &quot;..tostring(programData:getSize()) )&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;addToLog(&quot;newMidiMessage edit buffer dump received&quot;)&#13;&#10;&#9;&#9;&#9;if panel:getModulatorByName(&quot;btnMuteEditBuffer&quot;..tostring(pg_activeEditBuffer)):getModulatorValue() == 1 then&#13;&#10;&#9;&#9;&#9;&#9;displayMessage(&quot;Edit buffer dump from synth ignored because edit buffer &quot;..tostring(pg_activeEditBuffer)..&quot; is muted&quot;)&#13;&#10;&#9;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;pg_editBuffer[pg_activeEditBuffer] = programData&#13;&#10;&#9;&#9;&#9;updateBufProgName(pg_activeEditBuffer)&#13;&#10;&#9;&#9;&#9;renderProgramEditor()&#13;&#10;&#9;&#9;&#9;displayMessage(&quot;Edit buffer dump received from synth into panel edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return&#13;&#10;&#13;&#10;-- ========== Look for SysEx program dump ==========&#13;&#10;&#9;elseif size == pg_synthInfo.programDataPackedSize and msgHexString == pg_synthInfo.programDataSysExHeader then&#13;&#10;&#9;&#9;local bankNum, progNum&#13;&#10;&#9;&#9;bankNum = midiMessage:getData():getByte(pg_synthInfo.programSysExHeaderSize)&#13;&#10;&#9;&#9;progNum = midiMessage:getData():getByte(pg_synthInfo.programSysExHeaderSize + 1)&#13;&#10;&#9;&#9;addToLog(string.format(&quot;newMidiMessage synth bank %d program %d dump received&quot;, bankNum, progNum))&#13;&#10;&#9;&#9;if&#9;pg_receiveSysExProgBankTarget == 0 then&#13;&#10;&#9;&#9;&#9;displayMessage(string.format(&quot;Program data dump %d-%d from synth ignored because bank receive task not active&quot;, bankNum, progNum))&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;local recvProgNum = #pg_bankProgramData[pg_leftBank] + 1&#13;&#10;&#9;&#9;&#9;local programData = utils.unpackDsiData(midiMessage:getData():getRange(pg_synthInfo.programSysExHeaderSize + 2, pg_synthInfo.programPackedSize))&#13;&#10;&#9;&#9;&#9;pg_bankProgramData[pg_leftBank][recvProgNum] = programData&#13;&#10;&#9;&#9;&#9;displayMessage(string.format(&quot;Program data dump %d-%d from synth accepted into bank %d program %d&quot;, bankNum, progNum, pg_leftBank, recvProgNum))&#13;&#10;&#9;&#9;&#9;if pg_receiveSysExProgNumStart &gt; 0 then&#13;&#10;&#9;&#9;&#9;&#9;pg_receiveSysExProgNumStart = pg_receiveSysExProgNumStart + 1&#13;&#10;&#9;&#9;&#9;&#9;if pg_receiveSysExProgNumStart &gt; pg_receiveSysExProgNumEnd then&#13;&#10;&#9;&#9;&#9;&#9;&#9;pg_receiveSysExProgBankTarget = 0&#13;&#10;&#9;&#9;&#9;&#9;&#9;recvSysExWindow:triggerButtonClick(&quot;OK&quot;)&#9;-- Closes Recv SysEx dialog window if still open&#13;&#10;&#9;&#9;&#9;&#9;&#9;if #pg_bankProgramData[pg_leftBank] then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;pg_bankInfo[pg_leftBank].fullPathName = &quot;Received from synth&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;pg_bankInfo[pg_leftBank].sourceOfContents = &quot;synth&quot;&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;loadLeftProgramNameList()&#13;&#10;&#9;&#9;&#9;&#9;&#9;if pg_rightBank == pg_leftBank then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;loadRightProgramNameList()&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;addToLog(&quot;newMidiMessage Received &quot;..tostring(#pg_bankProgramData[pg_leftBank])..&quot; programs into bank &quot;..tostring(pg_leftBank))&#13;&#10;&#9;&#9;&#9;&#9;&#9;displayMessage(&quot;Received &quot;..tostring(#pg_bankProgramData[pg_leftBank])..&quot; programs into bank &quot;..tostring(pg_leftBank))&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;local bank = panel:getComponent(&quot;cmbSaveBankAs&quot;):getValue()&#13;&#10;&#9;&#9;&#9;&#9;&#9;local prog = pg_receiveSysExProgNumStart - 1&#13;&#10;&#9;&#9;&#9;&#9;&#9;local SysEx = string.format(&quot;%s 0%d %02x f7&quot;, pg_synthInfo.programDataSysExRequestHeader, bank, prog)&#13;&#10;&#9;&#9;&#9;&#9;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(SysEx))&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;-- ========== Look for MIDI NRPN ==========&#13;&#10;&#9;local NRPNnum, NRPNval, outCh, cc, aft, progChange, CCnum, CCnumDec, value, rpKey&#13;&#10;&#9;outCh = panel:getProperty(&quot;panelMidiOutputChannelDevice&quot;) - 1&#13;&#10; &#9;cc = string.format(&quot;b%x&quot;, outCh)&#10; &#9;aft = string.format(&quot;d%x&quot;, outCh)&#10; &#9;progChange = string.format(&quot;c%x&quot;, outCh)&#10;&#9;if size == 3 and msgHexString:sub(1, 2) == cc then&#13;&#10;&#9;&#9;CCnum = msgHexString:sub(4, 5)&#13;&#10;&#9;&#9;value = tonumber(msgHexString:sub(7, 8), 16)&#13;&#10;&#9;&#9;if CCnum == &quot;63&quot; then  -- start of 4-message NRPN&#13;&#10;&#9;&#9;&#9;NRPNnumMSB = msgHexString:sub(7, 8)&#13;&#10;--&#9;&#9;&#9;addToLog(&quot;newMidiMessage NRPN num MSB=&quot;..NRPNnumMSB)&#13;&#10;&#9;&#9;&#9;NRPNnumLSB = nil&#13;&#10;&#9;&#9;&#9;NRPNvalMSB = nil&#13;&#10;&#9;&#9;&#9;NRPNvalLSB = nil&#13;&#10;&#9;&#9;elseif CCnum == &quot;62&quot; then  -- 2 of 4-message NRPN&#13;&#10;&#9;&#9;&#9;NRPNnumLSB = msgHexString:sub(7, 8)&#13;&#10;--&#9;&#9;&#9;addToLog(&quot;newMidiMessage NRPN num LSB=&quot;..NRPNnumLSB)&#13;&#10;&#9;&#9;elseif CCnum == &quot;06&quot; then  -- 3 of 4-message NRPN&#13;&#10;&#9;&#9;&#9;NRPNvalMSB = msgHexString:sub(7, 8)&#13;&#10;--&#9;&#9;&#9;addToLog(&quot;newMidiMessage NRPN value MSB=&quot;..NRPNvalMSB)&#13;&#10;&#9;&#9;elseif CCnum == &quot;26&quot; then  -- 4 of 4-message NRPN&#13;&#10;&#9;&#9;&#9;NRPNvalLSB = msgHexString:sub(7, 8)&#13;&#10;--&#9;&#9;&#9;addToLog(&quot;newMidiMessage NRPN value LSB=&quot;..NRPNvalLSB)&#13;&#10;&#9;&#9;&#9;if NRPNnumMSB ~=nil and NRPNnumLSB ~= nil and NRPNvalMSB ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;-- Entire NRPN message received - update parameter with matching NRPN number&#13;&#10;&#9;&#9;&#9;&#9;local NRPNdata = MemoryBlock()&#13;&#10;&#9;&#9;&#9;&#9;NRPNdata:loadFromHexString(NRPNnumMSB..&quot; &quot;..NRPNnumLSB..&quot; &quot;..NRPNvalMSB..&quot; &quot;..NRPNvalLSB)&#13;&#10;&#9;&#9;&#9;&#9;NRPNnum = NRPNdata:getByte(0) * 128 + NRPNdata:getByte(1)&#13;&#10;&#9;&#9;&#9;&#9;NRPNval = NRPNdata:getByte(2) * 128 + NRPNdata:getByte(3)&#13;&#10;&#9;&#9;&#9;&#9;local rpKey = pg_synthProgInvertNRPN[NRPNnum]&#13;&#10;&#9;&#9;&#9;&#9;addToLog(&quot;newMidiMessage NRPN number=&quot;..tostring(NRPNnum)..&quot; value=&quot;..tostring(NRPNval)..&quot; rpKey=&quot;..tostring(rpKey))&#13;&#10;&#9;&#9;&#9;&#9;if pg_MIDIParamSendRecv == 1  -- CC mode&#13;&#10;&#9;&#9;&#9;&#9; or rpKey == nil then  -- this NRPN not used in synth parameter table&#13;&#10;&#9;&#9;&#9;&#9;&#9;if NRPNnum == 1088 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;customSetModulatorValue(panel:getModulatorByName(&quot;btnSeqPlay&quot;), NRPNval)&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;local v = pg_synthProg[rpKey]&#13;&#10;&#9;&#9;&#9;&#9;if v.parmType == &quot;text&quot; then&#13;&#10;&#9;&#9;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;progParmSet(pg_editBuffer[pg_activeEditBuffer], v.parmName, NRPNval, true)&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;-- Update UI component to show new value&#13;&#10;&#9;&#9;&#9;&#9;if pg_compSubscribeInvertParm[v.parmName] ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;&#9;renderProgramEditor(v.parmName)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;-- ========== Look for MIDI control change for mod wheel ==========&#13;&#10;&#9;&#9;elseif CCnum == &quot;01&quot; then&#13;&#10;&#9;&#9;&#9;panel:getModulatorByName(&quot;sldModWheel&quot;):setModulatorValue(value, false, false, false)&#13;&#10;&#13;&#10;-- ========== Look for MIDI bank select ==========&#13;&#10;&#9;&#9;elseif CCnum == &quot;20&quot; then&#13;&#10;&#9;&#9;&#9;local BankSelectNum = msgHexString:sub(7, 8)&#13;&#10;&#9;&#9;&#9;addToLog(&quot;newMidiMessage bank select=&quot;..BankSelectNum)&#13;&#10;&#9;&#9;&#9;local mod = panel:getModulatorByName(&quot;sldBankNum&quot;)&#13;&#10;&#9;&#9;&#9;if mod:getModulatorValue() ~= tonumber(BankSelectNum, 16) then&#13;&#10;&#9;&#9;&#9;&#9;customSetModulatorValue(mod, tonumber(BankSelectNum, 16))&#13;&#10;&#9;&#9;&#9;&#9;pg_MIDIBankSelectChangeWasReceived = true&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;-- ========== Look for MIDI CC for parameter change ==========&#13;&#10;&#9;&#9;elseif pg_MIDIParamSendRecv == 1 then  -- CC mode&#13;&#10;&#9;&#9;&#9;CCnumDec = tonumber(CCnum, 16)&#13;&#10;&#9;&#9;&#9;rpKey = pg_synthProgInvertCC[CCnumDec]&#13;&#10;&#9;&#9;&#9;addToLog(&quot;newMidiMessage CC number=&quot;..tostring(CCnumDec)..&quot; value=&quot;..tostring(value)..&quot; rpKey=&quot;..tostring(rpKey))&#13;&#10;&#9;&#9;&#9;if rpKey == nil then  -- this CC not used in synth parameter table&#13;&#10;&#9;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;progParmSet(pg_editBuffer[pg_activeEditBuffer], pg_synthProg[rpKey].parmName, mapCCValToComp(value, pg_synthProg[rpKey].parmName))&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- Update UI component to show new value&#13;&#10;&#9;&#9;&#9;if pg_compSubscribeInvertParm[pg_synthProg[rpKey].parmName] ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;renderProgramEditor(pg_synthProg[rpKey].parmName)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;-- ========== Look for MIDI control change for channel aftertouch ==========&#13;&#10;&#9;elseif size == 2 and msgHexString:sub(1, 2) == aft then&#13;&#10;&#9;&#9;value = tonumber(msgHexString:sub(4, 5), 16)&#13;&#10;&#9;&#9;panel:getModulatorByName(&quot;sldAftertouch&quot;):setModulatorValue(value, false, false, false)&#13;&#10;&#13;&#10;-- ========== Look for MIDI program change ==========&#13;&#10;&#9;elseif size == 2 and msgHexString:sub(1, 2) == progChange then&#13;&#10;&#9;&#9;local ProgChangeNum = msgHexString:sub(4, 5)&#13;&#10;&#9;&#9;addToLog(&quot;newMidiMessage program change=&quot;..ProgChangeNum)&#13;&#10;&#9;&#9;local mod = panel:getModulatorByName(&quot;sldProgNum&quot;)&#13;&#10;&#9;&#9;if mod:getModulatorValue() ~= tonumber(ProgChangeNum, 16) or pg_MIDIBankSelectChangeWasReceived then&#13;&#10;&#9;&#9;&#9;customSetModulatorValue(mod, tonumber(ProgChangeNum, 16))&#13;&#10;&#9;&#9;&#9;if pg_requestEditBuffer == 1 then&#13;&#10;&#9;&#9;&#9;&#9;requestProgFromSynth()&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;pg_MIDIBankSelectChangeWasReceived = false&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="luaPanelMidiReceived" luaMethodSource="0"
                   uuid="fecaeb18e52e4052a6db9656e2d887a1" luaMethodValid="1"/>
        <luaMethod luaMethodName="setupSynthData" luaMethodCode="function setupSynthData()&#10;&#9;addToLog(&quot;setupSynthData&quot;)&#13;&#10;&#13;&#10;&#9;-----------------------------&#13;&#10;&#9;-- Sequential / Oberheim OB-6&#13;&#10;&#9;-----------------------------&#13;&#10;&#13;&#10;&#9;pg_synthInfo = {&#13;&#10;&#9;&#9;programEditPackedSize = 1176  -- program edit buffer SysEx size&#13;&#10;&#9;,&#9;programDataPackedSize = 1178  -- program data dump SysEx size&#13;&#10;&#9;,&#9;programPackedSize = 1171  -- packed (7 to 8) program data size&#13;&#10;&#9;,&#9;programSize = 1024  -- program size&#13;&#10;&#9;,&#9;programSysExHeaderSize = 4&#13;&#10;&#9;,&#9;programEditSysExHeader = &quot;f0 01 2e 03&quot;&#13;&#10;&#9;,&#9;programDataSysExHeader = &quot;f0 01 2e 02&quot;&#13;&#10;&#9;,&#9;programEditSysExRequest = &quot;f0 01 2e 06 f7&quot;&#13;&#10;&#9;,&#9;programDataSysExRequestHeader = &quot;f0 01 2e 05&quot;&#13;&#10;&#13;&#10;&#9;,&#9;numMIDIBanksOfPrograms = 10&#13;&#10;&#9;,&#9;numMIDIProgramsInBank = 100&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;-- Table pg_synthProg is used by panel logic to get/set values from a MemoryBlock containing a SysEx program,&#13;&#10;&#9;-- and also serves as documentation of parameters within program SysEx.&#13;&#10;&#9;--------------------&#13;&#10;&#9;-- parmName = SysEx parameter name&#13;&#10;&#9;-- parmType = parameter type - values are:&#13;&#10;&#9;--   blob = block of binary data&#13;&#10;&#9;--   list* = list of values, defined in pg_synthProgValList&#13;&#10;&#9;--   signed = signed value, e.g. parmMax=100 then range is -50 to +50&#13;&#10;&#9;--   text = program name&#13;&#10;&#9;--   unsigned = unsigned value&#13;&#10;&#9;-- parmSyxPos = offset of parameter in SysEx memory block (0 = first byte)&#13;&#10;&#9;-- parmMax = maximum parameter value&#13;&#10;&#9;-- parmMin (optional) = minimum parameter value (if not included, minimum = zero)&#13;&#10;&#9;-- parmLen (optional) = length in bytes of parameter (if not included, length = one)&#13;&#10;&#9;-- parmNRPN (optional) = MIDI NRPN associated with parameter (if one exists)&#13;&#10;&#9;-- parmCC (optional) = MIDI CC associated with parameter (if one exists)&#13;&#10;&#9;--------------------&#13;&#10;&#9;pg_synthProg = {&#13;&#10;&#9;&#9;{ parmName = &quot;ProgramName&quot;, parmType = &quot;text&quot;, parmSyxPos = 107, parmLen = 20 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc1Freq&quot;, parmType = &quot;listOscNote&quot;, parmSyxPos = 0, parmMax = 60, parmNRPN = 0, parmCC = 67 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc1Sync&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 11, parmMax = 1, parmNRPN = 1 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc1Level&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 7, parmMax = 127, parmNRPN = 2, parmCC = 69 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc1Shape&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 3, parmMax = 255, parmNRPN = 3, parmCC = 70 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc1PW&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 5, parmMax = 255, parmNRPN = 4, parmCC = 71 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc2Freq&quot;, parmType = &quot;listOscNote&quot;, parmSyxPos = 1, parmMax = 60, parmNRPN = 5, parmCC = 75 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc2FreqFine&quot;, parmType = &quot;signed&quot;, parmSyxPos = 2, parmMax = 254, parmNRPN = 6, parmCC = 76 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc2Level&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 8, parmMax = 127, parmNRPN = 7, parmCC = 77 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc2Shape&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 4, parmMax = 255, parmNRPN = 8, parmCC = 78 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc2PW&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 6, parmMax = 255, parmNRPN = 9, parmCC = 79 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc2LoFreq&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 13, parmMax = 1, parmNRPN = 10 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Osc2Kbd&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 12, parmMax = 1, parmNRPN = 11 }&#13;&#10;&#9;,&#9;{ parmName = &quot;SubOctLevel&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 9, parmMax = 127, parmNRPN = 27, parmCC = 8 }&#13;&#10;&#9;,&#9;{ parmName = &quot;GlideMode&quot;, parmType = &quot;listGlideMode&quot;, parmSyxPos = 15, parmMax = 3, parmNRPN = 28 }&#13;&#10;&#9;,&#9;{ parmName = &quot;GlideOn&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 16, parmMax = 1, parmNRPN = 29, parmCC = 65 }&#13;&#10;&#9;,&#9;{ parmName = &quot;GlideRate&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 14, parmMax = 127, parmNRPN = 30 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PitchBendRange&quot;, parmType = &quot;listPitchBendRange&quot;, parmSyxPos = 17, parmMax = 12, parmNRPN = 31 }&#13;&#10;&#9;,&#9;{ parmName = &quot;NoiseLevel&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 10, parmMax = 127, parmNRPN = 32 }&#13;&#10;&#9;,&#9;{ parmName = &quot;VintageAmt&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 18, parmMax = 127, parmNRPN = 33 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltFreq&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 19, parmMax = 255, parmNRPN = 45, parmCC = 102 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltRes&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 20, parmMax = 255, parmNRPN = 46, parmCC = 103 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltKbdTrack&quot;, parmType = &quot;listFiltKbdTrack&quot;, parmSyxPos = 21, parmMax = 2, parmNRPN = 47, parmCC = 104 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltVel&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 22, parmMax = 1, parmNRPN = 48, parmCC = 105 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltMode&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 23, parmMax = 254, parmNRPN = 49, parmCC = 106 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltBP&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 26, parmMax = 1, parmNRPN = 50, parmCC = 107 }&#13;&#10;&#9;,&#9;{ parmName = &quot;ProgVolume&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 27, parmMax = 127, parmNRPN = 62 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PanSpread&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 28, parmMax = 127, parmNRPN = 63 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Distortion&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 58, parmMax = 127, parmNRPN = 64, parmCC = 9 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AmpEnvAmt&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 31, parmMax = 127, parmNRPN = 66, parmCC = 40 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AmpEnvAttack&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 36, parmMax = 127, parmNRPN = 67, parmCC = 43 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AmpEnvDecay&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 38, parmMax = 127, parmNRPN = 68, parmCC = 44 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AmpEnvSustain&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 40, parmMax = 127, parmNRPN = 69, parmCC = 45 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AmpEnvRelease&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 42, parmMax = 127, parmNRPN = 70, parmCC = 46 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AmpVel&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 43, parmMax = 1, parmNRPN = 71, parmCC = 41 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltEnvAmt&quot;, parmType = &quot;signed&quot;, parmSyxPos = 29, parmMax = 254, parmNRPN = 77, parmCC = 47 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltEnvAttack&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 35, parmMax = 127, parmNRPN = 78, parmCC = 50 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltEnvDecay&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 37, parmMax = 127, parmNRPN = 79, parmCC = 51 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltEnvSustain&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 39, parmMax = 127, parmNRPN = 80, parmCC = 52 }&#13;&#10;&#9;,&#9;{ parmName = &quot;FiltEnvRelease&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 41, parmMax = 127, parmNRPN = 81, parmCC = 53 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFOFreq&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 59, parmMax = 254, parmNRPN = 88 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFOInitAmt&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 63, parmMax = 255, parmNRPN = 89 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFOShape&quot;, parmType = &quot;listLFOShape&quot;, parmSyxPos = 62, parmMax = 4, parmNRPN = 90 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFOSync&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 61, parmMax = 1, parmNRPN = 91 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFODestOsc1&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 64, parmMax = 1, parmNRPN = 93 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFODestOsc2&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 65, parmMax = 1, parmNRPN = 94 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFODestPW&quot;, parmType = &quot;listLFODestPW&quot;, parmSyxPos = 66, parmMax = 3, parmNRPN = 95 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFODestFFreq&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 67, parmMax = 1, parmNRPN = 96 }&#13;&#10;&#9;,&#9;{ parmName = &quot;LFODestFMode&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 68, parmMax = 1, parmNRPN = 97 } --FIXME check&#13;&#10;&#9;,&#9;{ parmName = &quot;LFODestAmp&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 69, parmMax = 1, parmNRPN = 98 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AftertouchAmt&quot;, parmType = &quot;signed&quot;, parmSyxPos = 70, parmMax = 254, parmNRPN = 109 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AftertouchOsc1&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 71, parmMax = 1, parmNRPN = 110 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AftertouchOsc2&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 72, parmMax = 1, parmNRPN = 111 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AftertouchFFreq&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 73, parmMax = 1, parmNRPN = 112 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AftertouchFMode&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 74, parmMax = 1, parmNRPN = 113 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AftertouchAmp&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 75, parmMax = 1, parmNRPN = 114 }&#13;&#10;&#9;,&#9;{ parmName = &quot;AftertouchLFOAmt&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 76, parmMax = 1, parmNRPN = 115 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectAType&quot;, parmType = &quot;listEffectAType&quot;, parmSyxPos = 44, parmMax = 9, parmNRPN = 119 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectAMix&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 48, parmMax = 127, parmNRPN = 120 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectAParam1&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 50, parmMax = 255, parmNRPN = 121 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectAParam2&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 52, parmMax = 127, parmNRPN = 122 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectASync&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 54, parmMax = 1, parmNRPN = 123 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectASyncRate&quot;, parmType = &quot;listEffectSyncRate&quot;, parmSyxPos = 56, parmMax = 10, parmNRPN = 124 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectBType&quot;, parmType = &quot;listEffectBType&quot;, parmSyxPos = 45, parmMax = 13, parmNRPN = 127 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectBMix&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 49, parmMax = 127, parmNRPN = 128 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectBParam1&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 51, parmMax = 255, parmNRPN = 129 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectBParam2&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 53, parmMax = 127, parmNRPN = 130 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectBSync&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 55, parmMax = 1, parmNRPN = 131 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectBSyncRate&quot;, parmType = &quot;listEffectSyncRate&quot;, parmSyxPos = 57, parmMax = 10, parmNRPN = 132 }&#13;&#10;&#9;,&#9;{ parmName = &quot;EffectsOn&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 46, parmMax = 1, parmNRPN = 135 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PModFiltEnvAmt&quot;, parmType = &quot;signed&quot;, parmSyxPos = 77, parmMax = 254, parmNRPN = 143 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PModOsc2Amt&quot;, parmType = &quot;signed&quot;, parmSyxPos = 78, parmMax = 254, parmNRPN = 144 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PModOsc1&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 79, parmMax = 1, parmNRPN = 145 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PModShape1&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 80, parmMax = 1, parmNRPN = 146 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PModPW1&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 81, parmMax = 1, parmNRPN = 147 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PModFFreq&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 82, parmMax = 1, parmNRPN = 148 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PModFMode&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 83, parmMax = 1, parmNRPN = 149 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PModNormBP&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 88, parmMax = 1, parmNRPN = 150 }&#13;&#10;&#9;,&#9;{ parmName = &quot;UnisonOn&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 84, parmMax = 1, parmNRPN = 156 }&#13;&#10;&#9;,&#9;{ parmName = &quot;UnisonMode&quot;, parmType = &quot;listUnisonVoices&quot;, parmSyxPos = 85, parmMax = 6, parmNRPN = 157 }&#13;&#10;&#9;,&#9;{ parmName = &quot;KeyPriority&quot;, parmType = &quot;listKeyPriority&quot;, parmSyxPos = 86, parmMax = 5, parmNRPN = 158 }&#13;&#10;&#9;,&#9;{ parmName = &quot;ArpOn&quot;, parmType = &quot;listOffOn&quot;, parmSyxPos = 91, parmMax = 1, parmNRPN = 160, parmCC = 58 }&#13;&#10;&#9;,&#9;{ parmName = &quot;ArpMode&quot;, parmType = &quot;listArpMode&quot;, parmSyxPos = 89, parmMax = 4, parmNRPN = 161, parmCC = 59 }&#13;&#10;&#9;,&#9;{ parmName = &quot;ArpRange&quot;, parmType = &quot;listArpRange&quot;, parmSyxPos = 90, parmMax = 2, parmNRPN = 162, parmCC = 60 }&#13;&#10;&#9;,&#9;{ parmName = &quot;ClockTimeSig&quot;, parmType = &quot;listClockTimeSig&quot;, parmSyxPos = 92, parmMax = 9, parmNRPN = 163, parmCC = 62 }&#13;&#10;&#9;,&#9;{ parmName = &quot;ClockBPM&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 87, parmMax = 250, parmMin = 30, parmNRPN = 167, parmCC = 3 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Chord1&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 97, parmMax = 60 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Chord2&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 98, parmMax = 60 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Chord3&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 99, parmMax = 60 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Chord4&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 100, parmMax = 60 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Chord5&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 101, parmMax = 60 }&#13;&#10;&#9;,&#9;{ parmName = &quot;Chord6&quot;, parmType = &quot;unsigned&quot;, parmSyxPos = 102, parmMax = 60 }&#13;&#10;&#9;,&#9;{ parmName = &quot;PolySequence&quot;, parmType = &quot;blob&quot;, parmSyxPos = 128, parmMax = 255, parmLen = 768 }&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;pg_synthProgValList = {&#13;&#10;&#9;&#9;listOffOn = { &quot;Off&quot;, &quot;On&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listArpMode = { &quot;Up&quot;, &quot;Down&quot;, &quot;Up Down&quot;, &quot;Random&quot;, &quot;Assign&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listArpRange = { &quot;1&quot;, &quot;2&quot;, &quot;3&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listClockTimeSig = { &quot;Half&quot;, &quot;Qtr&quot;, &quot;8th dot&quot;, &quot;8th&quot;, &quot;8th swing&quot;, &quot;8th trip&quot;, &quot;16th&quot;,&#13;&#10;&#9;&#9;&#9;&quot;16th swing&quot;, &quot;16th trip&quot;, &quot;32nd&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listEffectAType = { &quot;Off&quot;, &quot;bbd Bucket Brigade Delay&quot;, &quot;ddL Digital Delay&quot;, &quot;cho Chorus&quot;, &quot;PH1 Phaser 1&quot;,&#13;&#10; &#9;&#9;&#9;&quot;PH2 Phaser 2&quot;, &quot;PH3 Phaser 3&quot;, &quot;rm Ring Modulator&quot;, &quot;FL1 Flanger 1&quot;, &quot;FL2 Flanger 2&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listEffectBType = { &quot;Off&quot;, &quot;bbd Bucket Brigade Delay&quot;, &quot;ddL Digital Delay&quot;, &quot;cho Chorus&quot;, &quot;PH1 Phaser 1&quot;,&#13;&#10; &#9;&#9;&#9;&quot;PH2 Phaser 2&quot;, &quot;PH3 Phaser 3&quot;, &quot;rm Ring Modulator&quot;, &quot;FL1 Flanger 1&quot;, &quot;FL2 Flanger 2&quot;,&#13;&#10; &#9;&#9;&#9;&quot;HAL Hall Reverb&quot;, &quot;rOO Room Reverb&quot;, &quot;PLA Plate Reverb&quot;, &quot;SPr Spring Reverb&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listEffectSyncRate = { &quot;16&quot;, &quot;16 d&quot;, &quot;8 t&quot;, &quot;8&quot;, &quot;8 d&quot;, &quot;4 t&quot;, &quot;4&quot;, &quot;4 d&quot;,&#13;&#10;&#9;&#9;&#9;&quot;2&quot;, &quot;2 d&quot;, &quot;1&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listFiltKbdTrack = { &quot;Off&quot;, &quot;Half&quot;, &quot;Full&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listGlideMode = { &quot;Fr Fixed Rate&quot;, &quot;Ft Fixed Time&quot;, &quot;FrA Fixed Rate A&quot;, &quot;FtA Fixed Time A&quot; }&#13;&#10;&#13;&#10;&#9;, &#9;listKeyPriority = { &quot;Lo&quot;, &quot;Hi&quot;, &quot;Las&quot;, &quot;LoR&quot;, &quot;HiR&quot;, &quot;LaR&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listLFODestPW = { &quot;none&quot;, &quot;VCO1&quot;, &quot;VCO2&quot;, &quot;1 + 2&quot; }&#13;&#10;&#13;&#10;&#9;, &#9;listLFOShape = { &quot;Sine&quot;, &quot;Sawtooth&quot;, &quot;Rev Saw&quot;, &quot;Square&quot;, &quot;Random&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listOscNote = { &quot;C0 &quot;, &quot;C#0&quot;, &quot;D0 &quot;, &quot;D#0&quot;, &quot;E0 &quot;, &quot;F0 &quot;, &quot;F#0&quot;, &quot;G0 &quot;, &quot;G#0&quot;, &quot;A0 &quot;, &quot;A#0&quot;, &quot;B0 &quot;,&#10;            &quot;C1 &quot;, &quot;C#1&quot;, &quot;D1 &quot;, &quot;D#1&quot;, &quot;E1 &quot;, &quot;F1 &quot;, &quot;F#1&quot;, &quot;G1 &quot;, &quot;G#1&quot;, &quot;A1 &quot;, &quot;A#1&quot;, &quot;B1 &quot;,&#10;            &quot;C2 &quot;, &quot;C#2&quot;, &quot;D2 &quot;, &quot;D#2&quot;, &quot;E2 &quot;, &quot;F2 &quot;, &quot;F#2&quot;, &quot;G2 &quot;, &quot;G#2&quot;, &quot;A2 &quot;, &quot;A#2&quot;, &quot;B2 &quot;,&#10;            &quot;C3 &quot;, &quot;C#3&quot;, &quot;D3 &quot;, &quot;D#3&quot;, &quot;E3 &quot;, &quot;F3 &quot;, &quot;F#3&quot;, &quot;G3 &quot;, &quot;G#3&quot;, &quot;A3 &quot;, &quot;A#3&quot;, &quot;B3 &quot;,&#10;            &quot;C4 &quot;, &quot;C#4&quot;, &quot;D4 &quot;, &quot;D#4&quot;, &quot;E4 &quot;, &quot;F4 &quot;, &quot;F#4&quot;, &quot;G4 &quot;, &quot;G#4&quot;, &quot;A4 &quot;, &quot;A#4&quot;, &quot;B4 &quot;,&#10;            &quot;C5 &quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listPitchBendRange = { &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot; }&#13;&#10;&#13;&#10;&#9;,&#9;listUnisonVoices = { &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;Chord&quot; }&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;-- Table to allow fast lookup by SysEx position to get numeric key&#13;&#10;&#9;pg_synthProgInvertSyxPos = {}&#13;&#10;&#9;for k,v in ipairs(pg_synthProg) do&#13;&#10;&#9;&#9;if pg_synthProgInvertSyxPos[v.parmSyxPos] ~= nil then&#10;&#9;&#9;&#9;addToLog(string.format(&quot;setupSynthData ERROR: parmName=%s already at SysEx position %d, same as %s\n&quot;,&#13;&#10; &#9;&#9;&#9;&#9;pg_synthProg[pg_synthProgInvertSyxPos[v.parmSyxPos]].parmName, v.parmSyxPos, v.parmName))&#10;&#9;&#9;else&#10;&#9;&#9;&#9;pg_synthProgInvertSyxPos[v.parmSyxPos] = k&#10;&#9;&#9;end&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Filling in gaps in pg_synthProg with generated entries&#13;&#10;&#9;local i, t, gapStart, gapEnd, gapNum&#10;&#9;i = 0&#10;&#9;gapStart = nil&#10;&#9;gapNum = 0&#10;&#9;while i &lt; pg_synthInfo.programSize do&#10;&#9;&#9;if pg_synthProgInvertSyxPos[i] == nil then&#10;&#9;&#9;&#9;if gapStart == nil then&#10;&#9;&#9;&#9;&#9;gapStart = i&#10;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;gapEnd = i&#10;&#9;&#9;&#9;i = i + 1&#10;&#9;&#9;else&#10;&#9;&#9;&#9;if gapStart ~= nil then&#10;&#9;&#9;&#9;&#9;gapNum = gapNum + 1&#10;&#9;&#9;&#9;&#9;addToLog(string.format(&quot;setupSynthData Generating pg_synthProg Unknown%d for gap from %d to %d\n&quot;, gapNum, gapStart, gapEnd))&#10;&#9;&#9;&#9;&#9;t = { parmName = &quot;Unknown&quot;..tostring(gapNum), parmType = &quot;blob&quot;, parmSyxPos = gapStart, parmMax = 255, parmLen = gapEnd - gapStart + 1 }&#10;&#9;&#9;&#9;&#9;table.insert(pg_synthProg, t)&#10;&#9;&#9;&#9;&#9;pg_synthProgInvertSyxPos[gapStart] = #pg_synthProg&#10;&#9;&#9;&#9;&#9;gapStart = nil&#10;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;if pg_synthProg[pg_synthProgInvertSyxPos[i]].parmLen ~= nil then&#10;&#9;&#9;&#9;&#9;i = i + pg_synthProg[pg_synthProgInvertSyxPos[i]].parmLen&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;i = i + 1&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#9;if gapStart ~= nil then&#10;&#9;&#9;gapNum = gapNum + 1&#10;&#9;&#9;addToLog(string.format(&quot;setupSynthData Generating pg_synthProg Unknown%d for gap from %d to %d\n&quot;, gapNum, gapStart, gapEnd))&#10;&#9;&#9;t = { parmName = &quot;Unknown&quot;..tostring(gapNum), parmType = &quot;blob&quot;, parmSyxPos = gapStart, parmMax = 255, parmLen = gapEnd - gapStart + 1 }&#10;&#9;&#9;table.insert(pg_synthProg, t)&#10;&#9;&#9;pg_synthProgInvertSyxPos[gapStart] = #pg_synthProg&#10;&#9;end&#10;&#13;&#10;&#9;-- Table to allow fast lookup by parameter name to get numeric key&#13;&#10;&#9;pg_synthProgInvertName = {}&#13;&#10;&#9;for k,v in ipairs(pg_synthProg) do&#13;&#10;&#9;&#9;if pg_synthProgInvertName[v.parmName] ~= nil then&#10;&#9;&#9;&#9;addToLog(string.format(&quot;setupSynthData pg_synthProgInvertName ERROR: parmName=%s already at position %d, same as %s position %d\n&quot;,&#13;&#10; &#9;&#9;&#9;&#9;pg_synthProg[pg_synthProgInvertName[v.parmName]].parmName, pg_synthProgInvertName[v.parmName], v.parmName, k))&#10;&#9;&#9;else&#10;&#9;&#9;&#9;pg_synthProgInvertName[v.parmName] = k&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Table to allow fast lookup by NRPN to get numeric key&#13;&#10;&#9;pg_synthProgInvertNRPN = {}&#13;&#10;&#9;for k,v in ipairs(pg_synthProg) do&#13;&#10;&#9;&#9;if v.parmNRPN ~= nil then&#13;&#10;&#9;&#9;&#9;if pg_synthProgInvertNRPN[v.parmNRPN] ~= nil then&#10;&#9;&#9;&#9;&#9;addToLog(string.format(&quot;setupSynthData pg_synthProgInvertNRPN ERROR: parmName=%s already has NRPN %d, same as %s\n&quot;,&#13;&#10; &#9;&#9;&#9;&#9;&#9;pg_synthProg[pg_synthProgInvertNRPN[v.parmNRPN]].parmName, v.parmNRPN, v.parmName))&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;pg_synthProgInvertNRPN[v.parmNRPN] = k&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- Table to allow fast lookup by CC to get numeric key&#13;&#10;&#9;pg_synthProgInvertCC = {}&#13;&#10;&#9;for k,v in ipairs(pg_synthProg) do&#13;&#10;&#9;&#9;if v.parmCC ~= nil then&#13;&#10;&#9;&#9;&#9;if pg_synthProgInvertCC[v.parmCC] ~= nil then&#10;&#9;&#9;&#9;&#9;addToLog(string.format(&quot;setupSynthData pg_synthProgInvertCC ERROR: parmName=%s already has CC %d, same as %s\n&quot;,&#13;&#10; &#9;&#9;&#9;&#9;&#9;pg_synthProg[pg_synthProgInvertCC[v.parmCC]].parmName, v.parmCC, v.parmName))&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;pg_synthProgInvertCC[v.parmCC] = k&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local j = 1&#13;&#10;&#9;local searchExcludesParm = { ProgramName=1, Chord1=1, Chord2=1, Chord3=1, Chord4=1,&#13;&#10;&#9;&#9;Chord5=1, Chord6=1, PolySequence=1 }&#13;&#10;&#9;pg_searchParm = { &quot;none&quot; }&#10;&#9;pg_searchParmString = &quot;none&quot;&#10;&#9;for k,v in ipairs(pg_synthProg) do&#10;&#9;&#9;if searchExcludesParm[v.parmName] == nil and v.parmName:sub(1, 7) ~= &quot;Unknown&quot; then&#10;&#9;&#9;&#9;pg_searchParmString = pg_searchParmString..&quot;\n&quot;..v.parmName&#13;&#10;&#9;&#9;&#9;j = j + 1&#13;&#10;&#9;&#9;&#9;pg_searchParm[j] = v.parmName&#10;&#9;&#9;end&#10;&#9;end&#10;&#13;&#10;--------------------&#13;&#10;-- Parameters which are not in SysEx&#13;&#10;-- NRPN 1088 - Sequence play on/off&#13;&#10;--------------------&#13;&#10;end&#13;&#10;"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="9404ab852a0c4d4495ab81e29e32e0f7"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="sendNRPN" luaMethodCode="function sendNRPN(--[[ number --]] NRPNnum, --[[ number --]] value)&#13;&#10;&#9;addToLog(&quot;sendNRPN to MIDI number=&quot;..tostring(NRPNnum)..&quot; value=&quot;..tostring(value))&#13;&#10;&#9;if panel:getModulatorByName(&quot;btnMuteEditBuffer&quot;..tostring(pg_activeEditBuffer)):getModulatorValue() == 1 then&#13;&#10;&#9;&#9;addToLog(&quot;sendNRPN suppressed - buffer is muted&quot;)&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local numMSB, numLSB, valMSB, valLSB&#13;&#10;&#9;numMSB = NRPNnum / 128&#13;&#10;&#9;numLSB = NRPNnum % 128&#13;&#10;&#9;valMSB = value / 128&#13;&#10;&#9;valLSB = value % 128&#13;&#10;--console(string.format(&quot;sendNRPN num=%d val=%d NRPNnum=%02x %02x NRPNval=%02x %02x&quot;, NRPNnum, value, numMSB, numLSB, valMSB, valLSB))&#10;&#9;local outCh = panel:getProperty(&quot;panelMidiOutputChannelDevice&quot;) - 1&#13;&#10;&#9;local cc = string.format(&quot;%x&quot;, outCh + 176)&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(string.format(&quot;%s 63 %02x&quot;, cc, numMSB)))&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(string.format(&quot;%s 62 %02x&quot;, cc, numLSB)))&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(string.format(&quot;%s 06 %02x&quot;, cc, valMSB)))&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(string.format(&quot;%s 26 %02x&quot;, cc, valLSB)))&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="7ce215e031124c93b9104b51133e2c4c"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="initProgram" luaMethodCode="function initProgram()&#13;&#10;&#9;addToLog(&quot;initProgram&quot;)&#13;&#10;&#10;&#9;local programData, s&#13;&#10;&#9;&#13;&#10;&#9;-- Fallback in case init program is not found&#13;&#10;&#9;programData = MemoryBlock(pg_synthInfo.programEditPackedSize, true)&#13;&#10;&#9;if pg_initProgFilename == nil then&#13;&#10;&#9;&#9;s = L(panel:getPropertyString(&quot;ZZCustomInitProgram&quot;))&#13;&#10;&#9;&#9;if string.len(s) == (pg_synthInfo.programSize * 3 - 1) then&#13;&#10;&#9;&#9;&#9;programData = MemoryBlock(s)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;return programData&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local k&#13;&#10;&#9;local file = File(pg_initProgFilename)&#13;&#10;&#9;if file == nil then&#13;&#10;&#9;&#9;addToLog(&quot;open failed for &quot;..pg_initProgFilename)&#13;&#10;&#9;else&#13;&#10;&#9;&#9;k = file:getSize()&#13;&#10;&#9;&#9;if k ~= pg_synthInfo.programEditPackedSize then&#13;&#10;&#9;&#9;&#9;console(tostring(&quot;unexpected file size=&quot;..tostring(k)))&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;local fileData = MemoryBlock(pg_synthInfo.programEditPackedSize)&#13;&#10;&#9;&#9;&#9;file:loadFileAsData(fileData)&#13;&#10;&#9;&#9;&#9;addToLog(tostring(&quot;init file loaded, size=&quot;..tostring(fileData:getSize())))&#13;&#10;&#9;&#9;&#9;programData = utils.unpackDsiData(fileData:getRange(pg_synthInfo.programSysExHeaderSize, pg_synthInfo.programPackedSize)) -- single edit buffer program&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;return programData&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="ae4226f2af384f1b945f86d50991a40f"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="sendProgToSynth" luaMethodCode="function sendProgToSynth(--[[ boolean --]] forceToSend)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;sendProgToSynth begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;addToLog(&quot;sendProgToSynth begin&quot;)&#13;&#10;&#9;if panel:getModulatorByName(&quot;btnMuteEditBuffer&quot;..tostring(pg_activeEditBuffer)):getModulatorValue() == 1 then&#13;&#10;&#9;&#9;addToLog(&quot;sendProgToSynth suppressed - buffer is muted&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;elseif pg_lastEditBufferSent == pg_activeEditBuffer and forceToSend ~= true then&#13;&#10;&#9;&#9;addToLog(&quot;sendProgToSynth suppressed - last buffer sent is active buffer&quot;)&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local programData&#13;&#10;&#9;programData = utils.packDsiData(pg_editBuffer[pg_activeEditBuffer])&#13;&#10;&#9;displayMessage(&quot;Edit buffer &quot;..tostring(pg_activeEditBuffer)..&quot; sent to synth edit buffer&quot;)&#13;&#10;&#9;local sysEx = pg_synthInfo.programEditSysExHeader..&quot; &quot;..programData:toHexString(1)..&quot; f7&quot;&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(sysEx))&#13;&#10;&#9;pg_lastEditBufferSent = pg_activeEditBuffer&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="28544b6745574be48947054c5ed86bcd"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="requestProgFromSynth" luaMethodCode="function requestProgFromSynth()&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;requestProgFromSynth begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;addToLog(&quot;requestProgFromSynth begin&quot;)&#13;&#10;&#13;&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(pg_synthInfo.programEditSysExRequest))&#13;&#10;&#9;displayMessage(&quot;Requesting edit buffer from synth ...&quot;)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="458ff50cfd954dec8a18223d2de82006"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="loadFromFile" luaMethodCode="--&#10;-- returns global variables pg_fileProgramData, pg_fileBankNum&#10;--&#10;loadFromFile = function(--[[ File --]] file)&#10;&#9;if pg_prePanelSts ~= &quot;PanelLoaded&quot; then&#13;&#10;&#9;&#9;addToLog(&quot;loadFromFile begin BeforeAnyModulators bootstrapState=&quot;..tostring(panel:getBootstrapState()) )&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#9;addToLog(&quot;loadFromFile begin&quot;)&#13;&#10;&#13;&#10;&#9;pg_fileProgramData = {}&#13;&#10;&#9;pg_fileBankNum = -1&#13;&#10;    if file:existsAsFile() then&#13;&#10;&#9;    local fileData = MemoryBlock()&#13;&#10;        file:loadFileAsData(fileData)&#13;&#10;&#13;&#10;        local offset = 0&#13;&#10;        local numPrograms = 0&#13;&#10;&#9;&#9;local s&#13;&#10;        local size = fileData:getSize()&#13;&#10;&#13;&#10;        if size % pg_synthInfo.programEditPackedSize == 0 then&#13;&#10;            numPrograms = size / pg_synthInfo.programEditPackedSize&#13;&#10;        elseif size % pg_synthInfo.programDataPackedSize == 0 then&#13;&#10;            offset = 2  -- additional bytes for bank number and program number&#13;&#10;            numPrograms = size / pg_synthInfo.programDataPackedSize&#13;&#10;&#9;&#9;&#9;pg_fileBankNum = fileData:getByte(4)&#13;&#10;        else&#13;&#10;&#9;&#9;&#9;addToLog(&quot;loadFromFile Unexpected file size &quot;..size)&#13;&#10;            utils.warnWindow(&quot;Load file&quot;, &quot;Unexpected file size &quot;..size)&#13;&#10;            return&#13;&#10;        end&#13;&#10;&#13;&#10;&#9;&#9;s = fileData:getRange(0, pg_synthInfo.programSysExHeaderSize):toHexString(1)&#13;&#10;        if s ~= pg_synthInfo.programEditSysExHeader and s ~= pg_synthInfo.programDataSysExHeader then&#13;&#10;&#9;&#9;&#9;addToLog(&quot;loadFromFile Unexpected file contents &quot;..s)&#13;&#10;            utils.warnWindow(&quot;Load file&quot;, &quot;Unexpected file contents &quot;..s)&#13;&#10;            return&#13;&#10;        end&#13;&#10;&#13;&#10;&#9;&#9;local programPos = 0&#13;&#10;&#13;&#10;&#9;&#9;for i=0, size - 1, pg_synthInfo.programEditPackedSize + offset do&#13;&#10;&#9;&#9;&#9;local programData = utils.unpackDsiData(fileData:getRange(i + pg_synthInfo.programSysExHeaderSize + offset, pg_synthInfo.programPackedSize))&#13;&#10;&#9;&#9;&#9;if programData:getSize() ~= pg_synthInfo.programSize then&#13;&#10;&#9;&#9;&#9;&#9;addToLog(&quot;loadFromFile Unexpected unpacked program data size &quot;..tostring(programData:getSize()) )&#13;&#10;&#9;&#9;&#9;&#9;utils.warnWindow(&quot;Load file&quot;, &quot;Unexpected unpacked program data size &quot;..tostring(programData:getSize()) )&#13;&#10;&#9;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;programPos = programPos + 1&#13;&#10;&#9;&#9;&#9;pg_fileProgramData[programPos] = programData&#13;&#10;        end&#13;&#10;&#13;&#10;&#9;&#9;addToLog(&quot;loadFromFile file size: &quot;..size..&quot;, programs: &quot;..numPrograms..&quot;, offset: &quot;..offset)&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="d210e39a22b34165a076b24e7517143b"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="sendCC" luaMethodCode="function sendCC(--[[ number --]] CCnum, --[[ number --]] value)&#10;&#9;addToLog(&quot;sendCC to MIDI number=&quot;..tostring(CCnum)..&quot; value=&quot;..tostring(value))&#13;&#10;&#9;if panel:getModulatorByName(&quot;btnMuteEditBuffer&quot;..tostring(pg_activeEditBuffer)):getModulatorValue() == 1 then&#13;&#10;&#9;&#9;addToLog(&quot;sendCC suppressed - buffer is muted&quot;)&#13;&#10;        return&#13;&#10;&#9;elseif CCnum % 128 ~= CCnum then&#13;&#10;&#9;&#9;addToLog(&quot;sendCC ERROR: CC number out of range - nothing sent&quot;)&#13;&#10;        return&#13;&#10;&#9;elseif value % 128 ~= value then&#13;&#10;&#9;&#9;addToLog(&quot;sendCC ERROR: value out of range - nothing sent&quot;)&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local outCh = panel:getProperty(&quot;panelMidiOutputChannelDevice&quot;) - 1&#13;&#10;&#9;local cc = string.format(&quot;%x&quot;, outCh + 176)&#10;&#9;panel:sendMidiMessageNow(CtrlrMidiMessage(string.format(&quot;%s %02X %02x&quot;, cc, CCnum, value)))&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="537463d61a31402bbe99096e9953aa57"
                   luaMethodValid="1"/>
      </luaMethodGroup>
      <luaMethodGroup name="Debug" uuid="cd1d8a16cab04978922f79d17d56a717">
        <luaMethod luaMethodName="addToLog" luaMethodCode="function addToLog(--[[ string --]] textToLog)&#10;-- General logging method, to control amount of tracing / debugging shown&#13;&#10;&#13;&#10;&#9;if pg_panelDebug == 3&#13;&#10; &#9; or (pg_panelDebug == 1 and string.find(string.lower(textToLog), &quot;midi&quot;, 1, true) ~= nil)&#13;&#10;&#9; or (pg_panelDebug == 2 and string.find(string.lower(textToLog), &quot;midi&quot;, 1, true) == nil)&#13;&#10;&#9; or (string.find(string.lower(textToLog), &quot;error&quot;, 1, true) ~= nil) then&#13;&#10;&#9;&#9;console(&quot;OB6 &quot;..textToLog)&#13;&#10;&#9;&#9;if pg_debugLogFile ~= nil then&#13;&#10;&#9;&#9;&#9;pg_debugLogFile:write(string.format(&quot;[%s] %s\n&quot;, os.date(&quot;%Y/%m/%d %H:%M:%S&quot;), textToLog))&#13;&#10;&#9;&#9;&#9;pg_debugLogFile:flush()&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="96cb3c17c4dc48baac114f72df248213"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="setupAfterChanges" luaMethodCode="--&#10;-- Run this after modifying panel controls, pg_synthProg, etc.&#10;--&#13;&#10;-- Loads every combo box from its defined list, so that the combo contents exactly matches the list&#13;&#10;--   used in Lua methods (and no need to hand-edit the combo contents after changing the list)&#13;&#10;-- Compares slider component min and max vs pg_synthProg&#10;--&#10;-- @fixSlider - if true, set slider component min and max based on pg_synthProg&#10;--&#10;function setupAfterChanges(--[[ boolean --]] fixSlider)&#13;&#10;&#9;addToLog(&quot;setupAfterChanges begin&quot;)&#10;&#13;&#10;&#9;local listName, parmKey, parmMin, parmMax, sliderMin, sliderMax&#10;&#13;&#10;&#9;for k,v in ipairs(pg_compSubscribe) do&#13;&#10;&#9;&#9;parmKey = pg_synthProgInvertName[v.parmName]&#10;&#9;&#9;if string.sub(v.uiComp, 1, 3) == &quot;cmb&quot; then&#13;&#10;&#9;&#9;&#9;listName = pg_synthProg[parmKey].parmType&#13;&#10;&#9;&#9;&#9;loadComboContentFromTable(pg_compSubscribeMod[k], pg_synthProgValList[listName])&#13;&#10;&#9;&#9;&#9;parmMax = pg_synthProg[parmKey].parmMax + 1&#10;&#9;&#9;&#9;if #pg_synthProgValList[listName] ~= parmMax then&#13;&#10;&#9;&#9;&#9;&#9;addToLog(string.format(&quot;setupAfterChanges ERROR mod=%s parmMax=%d but combo list entries=%d\n&quot;,&#13;&#10; &#9;&#9;&#9;&#9;  &#9;v.uiComp, parmMax, #pg_synthProgValList[listName]))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;elseif string.sub(v.uiComp, 1, 3) == &quot;sld&quot; then&#10;&#9;&#9;&#9;parmMin = pg_synthProg[parmKey].parmMin&#10;&#9;&#9;&#9;if parmMin == nil then&#10;&#9;&#9;&#9;&#9;parmMin = 0&#10;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;parmMax = pg_synthProg[parmKey].parmMax&#10;&#9;&#9;&#9;if pg_synthProg[parmKey].parmType == &quot;signed&quot; then&#10;&#9;&#9;&#9;&#9;parmMin = 0 - (parmMax / 2)&#10;&#9;&#9;&#9;&#9;parmMax = parmMax / 2&#10;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;sliderMin = pg_compSubscribeMod[k]:getComponent():getPropertyInt(&quot;uiSliderMin&quot;)&#10;&#9;&#9;&#9;sliderMax = pg_compSubscribeMod[k]:getComponent():getPropertyInt(&quot;uiSliderMax&quot;)&#10;&#9;&#9;&#9;if sliderMin ~= parmMin or sliderMax ~= parmMax then&#10;&#9;&#9;&#9;&#9;addToLog(string.format(&quot;setupAfterChanges ERROR mod=%s min=%d max=%d sliderMin=%d sliderMax=%d\n&quot;,&#13;&#10; &#9;&#9;&#9;&#9;  &#9;v.uiComp, parmMin, parmMax, sliderMin, sliderMax))&#13;&#10;&#9;&#9;&#9;&#9;if fixSlider then&#13;&#10;&#9;&#9;&#9;&#9;&#9;pg_compSubscribeMod[k]:getComponent():setPropertyInt(&quot;uiSliderMin&quot;, parmMin)&#13;&#10;&#9;&#9;&#9;&#9;&#9;pg_compSubscribeMod[k]:getComponent():setPropertyInt(&quot;uiSliderMax&quot;, parmMax)&#13;&#10;&#9;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;loadComboContentFromTable(panel:getModulatorByName(&quot;cmbProgTaskTyp&quot;), pg_listProgTask)&#10;&#13;&#10;&#9;loadComboContentFromTable(panel:getModulatorByName(&quot;cmbBankTaskTyp&quot;), pg_listBankTask)&#10;&#13;&#10;&#9;-- Load combo boxes for search&#13;&#10;&#9;panel:getModulatorByName(&quot;cmbSearchParm1&quot;):getComponent():setPropertyString(&quot;uiComboContent&quot;, pg_searchParmString)&#10;&#9;panel:getModulatorByName(&quot;cmbSearchParm1&quot;):setModulatorValue(0, false, false, false)&#10;&#9;panel:getModulatorByName(&quot;cmbSearchParm2&quot;):getComponent():setPropertyString(&quot;uiComboContent&quot;, pg_searchParmString)&#10;&#9;panel:getModulatorByName(&quot;cmbSearchParm2&quot;):setModulatorValue(0, false, false, false)&#10;&#9;panel:getModulatorByName(&quot;cmbSearchParm3&quot;):getComponent():setPropertyString(&quot;uiComboContent&quot;, pg_searchParmString)&#10;&#9;panel:getModulatorByName(&quot;cmbSearchParm3&quot;):setModulatorValue(0, false, false, false)&#10;&#9;panel:getModulatorByName(&quot;cmbSearchParm4&quot;):getComponent():setPropertyString(&quot;uiComboContent&quot;, pg_searchParmString)&#10;&#9;panel:getModulatorByName(&quot;cmbSearchParm4&quot;):setModulatorValue(0, false, false, false)&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="d0c096dd910d40e9a22641449ab778b2"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="loadComboContentFromTable" luaMethodCode="loadComboContentFromTable = function(--[[ CtrlrModulator --]] mod, --[[ table --]] comboList)&#13;&#10;&#9;local comboContent = &quot;&quot;&#13;&#10;&#9;for k,v in ipairs(comboList) do&#13;&#10;&#9;&#9;if k == 1 then&#13;&#10;&#9;&#9;&#9;comboContent = v&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;comboContent = comboContent..&quot;\n&quot;..v&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;mod:getComponent():setPropertyString(&quot;uiComboContent&quot;, comboContent)&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="41dea2b5d7274a79b2abe322510a1da4"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="saveEditBufferToFile" luaMethodCode="-- DEBUG ONLY&#10;-- Save selected edit buffer as binary data in file&#10;-- @buf   Edit buffer number 1-4&#10;--&#10;saveEditBufferToFile = function(--[[ number --]] buf)&#10;&#9;addToLog(&quot;DEBUG saveEditBufferToFile begin&quot;)&#13;&#10;&#13;&#10;&#9;if buf ~= 1 and buf ~= 2 and buf ~= 3 and buf ~= 4 then&#13;&#10;&#9;&#9;addToLog(&quot;DEBUG saveEditBufferToFile must choose edit buffer number 1-4&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;local file = utils.saveFileWindow(&quot;saveEditBufferToFile&quot;, File(&quot;&quot;), &quot;*.dat&quot;, true)&#13;&#10;&#13;&#10;&#9;if file:isValid() == false then&#13;&#10;&#9;&#9;addToLog(&quot;DEBUG saveEditBufferToFile canceled&quot;)&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if file:existsAsFile() == false then&#13;&#10;&#9;&#9;if file:create() == false then&#13;&#10;&#9;&#9;&#9;utils.warnWindow(&quot;saveEditBufferToFile&quot;, &quot;Error creating the file&quot;)&#13;&#10;&#9;&#9;&#9;addToLog(&quot;DEBUG saveEditBufferToFile create error&quot;)&#13;&#10;&#9;&#9;&#9;return&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if file:replaceWithData(pg_editBuffer[buf]) == false then&#13;&#10;&#9;&#9;utils.warnWindow(&quot;saveEditBufferToFile&quot;, &quot;Failed to write data to file.&quot;)&#13;&#10;&#9;&#9;&#9;addToLog(&quot;DEBUG saveEditBufferToFile Failed to write data to file&quot;)&#13;&#10;        return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;addToLog(&quot;DEBUG saveEditBufferToFile size=&quot;..tostring(pg_editBuffer[buf]:getSize()))&#13;&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="ee63fc3d9b644e088cdf5a99b752c2a5"
                   luaMethodValid="1"/>
        <luaMethod luaMethodName="printProgData" luaMethodCode="function printProgData()&#10;&#9;addToLog(&quot;Printing pg_synthProg for edit buffer &quot;..tostring(pg_activeEditBuffer))&#13;&#10;&#13;&#10;--&#9;progData = &quot;&quot;&#10;&#9;local j, k, v, s, value&#13;&#10;&#9;for k,v in pairs(pg_synthProg) do&#13;&#10;&#9;&#9;j = tonumber(pg_editBuffer[pg_activeEditBuffer]:getByte(v.parmSyxPos))  -- Used for most types, though not text&#13;&#10;&#13;&#10;&#9;&#9;if v.parmType == &quot;text&quot; then&#13;&#10;&#9;&#9;&#9;value = pg_editBuffer[pg_activeEditBuffer]:getRange(v.parmSyxPos, v.parmLen):toString()&#13;&#10;&#13;&#10;&#9;&#9;elseif string.sub(v.parmType, 0, 4) == &quot;list&quot; then&#13;&#10;&#9;&#9;&#9;if j &gt; v.parmMax then&#13;&#10;&#9;&#9;&#9;&#9;s = &quot;BAD:&quot;..tostring(j)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;s = pg_synthProgValList[v.parmType][j + 1]&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;value = string.format(&quot;0x%X | %s&quot;, j, s)&#13;&#10;&#13;&#10;&#9;&#9;elseif v.parmType == &quot;signed&quot; then&#13;&#10;&#9;&#9;&#9;if j &gt; v.parmMax then&#13;&#10;&#9;&#9;&#9;&#9;s = &quot;BAD:&quot;..tostring(j)&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;s = tostring(j - (v.parmMax / 2))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;value = string.format(&quot;0x%X | %d&quot;, j, s)&#13;&#10;&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;value = string.format(&quot;0x%X | %d&quot;, j, j)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if #v.parmName &gt;= 7 and v.parmName:sub(1, 7) ~= &quot;Unknown&quot; then&#13;&#10;&#9;&#9;&#9;s = string.format(&quot;%d %s | %s | %s&quot;, k, v.parmName, v.parmType, value)&#13;&#10;&#9;&#9;&#9;console(s)&#13;&#10;--&#9;&#9;&#9;progData = string.format(&quot;%s\n%s&quot;, progData, s)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#10;end"
                   luaMethodLinkedProperty="" luaMethodSource="0" uuid="97c9f1004f4b4ae4bd70f0f31730e1ff"
                   luaMethodValid="1"/>
      </luaMethodGroup>
    </luaManagerMethods>
  </luaManager>
  <panelResources/>
  <uiPanelEditor uiPanelCanvasRectangle="0 0 1200 680" uiPanelSnapSize="8" uiPanelBackgroundColour="ffffffff"
                 uiPanelBackgroundColour1="FF101010" uiPanelBackgroundColour2="ff9090ff"
                 uiPanelBackgroundGradientType="0" uiPanelImageResource="-- None"
                 uiPanelEditMode="0" uiPanelViewPortSize="1146" uiPanelPropertiesSize="286"
                 uiPanelLock="0" uiPanelDisabledOnEdit="0" uiPanelMenuBarVisible="1"
                 uiPanelMenuBarHideOnExport="0" uiPanelWidth="400" uiPanelHeight="400"
                 name="Oberheim OB-6" uiPanelImageAlpha="255" uiPanelImageLayout="64"
                 uiPanelSnapActive="1" uiPanelPropertiesOnRight="0" luaPanelPaintBackground="-- None"
                 luaPanelResized="-- None" luaPanelFileDragDropHandler="-- None"
                 luaPanelFileDragEnterHandler="-- None" luaPanelFileDragExitHandler="-- None"
                 uiPanelInvisibleComponentAlpha="0.5" uiPanelTooltipBackgroundColour="0xffeeeebb"
                 uiPanelTooltipOutlineColour="0xff000000" uiPanelTooltipColour="0xff000000"
                 uiPanelTooltipCornerRound="1" uiPanelTooltipPlacement="2" uiPanelTooltipFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1;3"
                 uiPanelZoom="0.9000000000000000222">
    <uiPanelCanvasLayer uiPanelCanvasLayerName="MainLayer" uiPanelCanvasLayerUid="bcaca5482c0e01002001000000000000"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="1"
                        uiPanelCanvasLayerIndex="0"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="SettingsLayer" uiPanelCanvasLayerUid="a4266ed1a75f00002001000000000000"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="1"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="CopyLayer" uiPanelCanvasLayerUid="999d223d5f0900002001000000000000"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="2"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="CompareLayer" uiPanelCanvasLayerUid="a884a227fe2300002001000000000000"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="3"/>
    <uiPanelCanvasLayer uiPanelCanvasLayerName="SearchLayer" uiPanelCanvasLayerUid="948723d636ed00002001000000000000"
                        uiPanelCanvasLayerColour="0x000000" uiPanelCanvasLayerVisibility="0"
                        uiPanelCanvasLayerIndex="4"/>
  </uiPanelEditor>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblPanelName" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblPanelName"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="ffd0d0ff" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;32;1;0;0;0;1;3"
               uiLabelText="OB-6" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="16 16 161 32" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblSysExEdLib" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblSysExEdLib"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="ffe0e0e0" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3"
               uiLabelText="SysEx Editor / Librarian" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="16 46 161 16" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="openSettingsChanged"
             name="btnOpenSettings" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1.11;3" componentVisibleName="Load"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffffffff"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="SETTINGS&#10;SETTINGS"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="200 24 52 18" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpMIDIProgChange" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpMIDIProgChange"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MIDI Program Change"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="8 64 178 86"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="9" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="1"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="sendBankProgChange"
             name="sldBankNum" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Bank"
               componentMouseCursor="2" componentGroupName="grpMIDIProgChange"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="0" uiSliderMax="9" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="1" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="32 16 42 42"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="100" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="1"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="sendBankProgChange"
             name="sldProgNum" modulatorMin="-1" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Program"
               componentMouseCursor="2" componentGroupName="grpMIDIProgChange"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="IncDecButtons"
               uiSliderMin="-1" uiSliderMax="100" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="1" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="96 16 42 42" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="requestEditBufferChanged"
             name="btnRequestEditBuffer" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Request Edit Buffer"
               componentMouseCursor="2" componentGroupName="grpMIDIProgChange"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTextColourOn="ffe0e0e0"
               uiToggleButtonFocusOutline="0x00000000" uiToggleButtonText="Request Edit Buffer"
               uiButtonTrueValue="1" uiButtonFalseValue="0" uiButtonColourOff="FFA0A0A0"
               componentRectangle="24 60 120 26" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiToggleButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpSettings" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpSettings"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="SETTINGS"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="ffffffff"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ff404040"
               uiGroupBackgroundColour2="ffa0a0a0" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="1" uiGroupBackgroundImage="" componentRectangle="8 40 261 220"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="4" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="a4266ed1a75f00002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbDebugLevel" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Debug level"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FF000000"
               uiComboOutlineColour="FFE0E0E0" uiComboTextColour="FF000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFE0E0E0"
               uiComboBgColour="FFB0B0B0" uiComboMenuBackgroundColour="FFE0E0E0"
               uiComboMenuFontColour="FF000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Off&#10;MIDI&#10;Methods&#10;Everything"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="8 16 80 30"
               uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="9999" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="1"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="firstVSTindexChanged"
             name="sldFirstVSTindex" modulatorMin="0" modulatorValue="500">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="1st VST Index"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="9999" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="1" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FF000000" uiSliderValueBgColour="FFB0B0B0"
               uiSliderRotaryOutlineColour="FFE0E0E0" uiSliderRotaryFillColour="FFE0E0E0"
               uiSliderThumbColour="FFB0B0B0" uiSliderValueHighlightColour="FFE0E0E0"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFE0E0E0" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="1" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="96 16 64 30"
               componentLayerUid="a4266ed1a75f00002001000000000000" componentTabName=""
               componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="500" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sldMIDISendDelay" modulatorMin="10" modulatorValue="30">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="MIDI send delay"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="10" uiSliderMax="500" uiSliderInterval="10" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="30" uiSliderValuePosition="4" uiSliderValueHeight="10"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FF000000" uiSliderValueBgColour="FFB0B0B0"
               uiSliderRotaryOutlineColour="FFE0E0E0" uiSliderRotaryFillColour="FFE0E0E0"
               uiSliderThumbColour="FFB0B0B0" uiSliderValueHighlightColour="FFE0E0E0"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFE0E0E0" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="172 0 76 46"
               componentLayerUid="a4266ed1a75f00002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="2" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbColorScheme" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Colors"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FF000000"
               uiComboOutlineColour="FFE0E0E0" uiComboTextColour="FF000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFE0E0E0"
               uiComboBgColour="FFB0B0B0" uiComboMenuBackgroundColour="FFE0E0E0"
               uiComboMenuFontColour="FF000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Default&#10;User 1&#10;User 2"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="8 56 56 30"
               uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="colorsChanged"
             name="btnLoadColors" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ffff8040"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="LOAD&#10;LOADING"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="65 56 28 16" uiType="uiButton" componentLayerUid="a4266ed1a75f00002001000000000000"
               componentTabName="" componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="saveColorScheme"
             name="btnSaveColors" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ffff8040"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="SAVE&#10;SAVING"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="65 74 28 16" uiType="uiButton" componentLayerUid="a4266ed1a75f00002001000000000000"
               componentTabName="" componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblColorValueFG" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Value Foregrnd"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="colorFieldClicked" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFE0E0E0" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;14;0;0;0;0;1;3"
               uiLabelText="FFB0C0FF" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="0123456789ABCDEFabcdef" uiLabelInputMaxLength="8"
               uiLabelChangedCbk="colorValueChanged" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="8 96 68 28"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblColorValueBG" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Value Backgrnd"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="colorFieldClicked" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFE0E0E0" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;14;0;0;0;0;1;3"
               uiLabelText="FF6068B0" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="0123456789ABCDEFabcdef" uiLabelInputMaxLength="8"
               uiLabelChangedCbk="colorValueChanged" uiType="uiLabel" componentRectangle="8 128 68 28"
               componentLayerUid="a4266ed1a75f00002001000000000000" componentTabName=""
               componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblColorButtonOn" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Button On"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="colorFieldClicked" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFE0E0E0" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;14;0;0;0;0;1;3"
               uiLabelText="FFFF5000" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="0123456789ABCDEFabcdef" uiLabelInputMaxLength="8"
               uiLabelChangedCbk="colorValueChanged" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="96 96 68 28"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblColorButtonOff" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Button Off"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="colorFieldClicked" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFE0E0E0" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;14;0;0;0;0;1;3"
               uiLabelText="FF404050" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="0123456789ABCDEFabcdef" uiLabelInputMaxLength="8"
               uiLabelChangedCbk="colorValueChanged" uiType="uiLabel" componentRectangle="96 128 68 28"
               componentLayerUid="a4266ed1a75f00002001000000000000" componentTabName=""
               componentTabId="1"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblColorBackground" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Background"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="colorFieldClicked" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFE0E0E0" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;14;0;0;0;0;1;3"
               uiLabelText="FF101010" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="0123456789ABCDEFabcdef" uiLabelInputMaxLength="8"
               uiLabelChangedCbk="colorValueChanged" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="96 64 68 28"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblColorValueText" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Value Text"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="colorFieldClicked" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFE0E0E0" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;14;0;0;0;0;1;3"
               uiLabelText="FFFFFFFF" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="0123456789ABCDEFabcdef" uiLabelInputMaxLength="8"
               uiLabelChangedCbk="colorValueChanged" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="176 128 68 28"
               uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="255" vstIndex=" " modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="colorSliderChanged"
             name="sldColorChooseRed" modulatorMin="0" modulatorValue="64">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffffffff"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="R"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearVertical"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FF000000" uiSliderValueBgColour="FFB0B0B0"
               uiSliderRotaryOutlineColour="FFE0E0E0" uiSliderRotaryFillColour="FFE0E0E0"
               uiSliderThumbColour="FFB0B0B0" uiSliderValueHighlightColour="FFE0E0E0"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFE0E0E0" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="170 48 29 76"
               componentLayerUid="a4266ed1a75f00002001000000000000" componentTabName=""
               componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="255" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="colorSliderChanged"
             name="sldColorChooseGreen" modulatorMin="0" modulatorValue="64">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffffffff"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="G"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearVertical"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FF000000" uiSliderValueBgColour="FFB0B0B0"
               uiSliderRotaryOutlineColour="FFE0E0E0" uiSliderRotaryFillColour="FFE0E0E0"
               uiSliderThumbColour="FFB0B0B0" uiSliderValueHighlightColour="FFE0E0E0"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFE0E0E0" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="198 48 29 76"
               uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="255" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="colorSliderChanged"
             name="sldColorChooseBlue" modulatorMin="0" modulatorValue="80">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffffffff"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="B"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearVertical"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="64" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FF000000" uiSliderValueBgColour="FFB0B0B0"
               uiSliderRotaryOutlineColour="FFE0E0E0" uiSliderRotaryFillColour="FFE0E0E0"
               uiSliderThumbColour="FFB0B0B0" uiSliderValueHighlightColour="FFE0E0E0"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFE0E0E0" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="225 48 29 76"
               uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblSysExSendToFactory" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblSysExSendToFactory"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centredLeft" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="Allow SysEx send to Factory banks" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="8 168 199 24" componentLayerUid="a4266ed1a75f00002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="SysExSendToFactoryChanged"
             name="cmbSysExSendToFactory" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FF000000"
               uiComboOutlineColour="FFE0E0E0" uiComboTextColour="FF000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFE0E0E0"
               uiComboBgColour="FFB0B0B0" uiComboMenuBackgroundColour="FFE0E0E0"
               uiComboMenuFontColour="FF000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Off&#10;On"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="208 160 48 30"
               uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblMIDIParamSendRecv" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblMIDIParamSendRecv"
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0x00000000"
               uiLabelTextColour="0xff000000" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centredLeft" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="MIDI param Send/Recv mode" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="8 192 199 24" componentLayerUid="a4266ed1a75f00002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="MIDIParamSendRecvChanged"
             name="cmbMIDIParamSendRecv" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName=" "
               componentMouseCursor="2" componentGroupName="grpSettings" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FF000000"
               uiComboOutlineColour="FFE0E0E0" uiComboTextColour="FF000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFE0E0E0"
               uiComboBgColour="FFB0B0B0" uiComboMenuBackgroundColour="FFE0E0E0"
               uiComboMenuFontColour="FF000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="NRPN&#10;CC"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentTabId="1" componentTabName=""
               componentLayerUid="a4266ed1a75f00002001000000000000" componentRectangle="208 184 48 30"
               uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpProg" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpProg"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="PROGRAM"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="520 16 119 95"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="bcaca5482c0e01002001000000000000" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="loadFile"
             name="btnLoadFile" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1.11;3" componentVisibleName="Load"
               componentMouseCursor="2" componentGroupName="grpProg" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffffffff"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="LOAD&#10;LOAD"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="8 16 45 18" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="saveFile"
             name="btnSaveFile" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1.11;3" componentVisibleName="Save"
               componentMouseCursor="2" componentGroupName="grpProg" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffffffff"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="SAVE&#10;SAVE"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="8 40 45 18" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="doProgTask"
             name="btnDoProgTask" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1.11;3" componentVisibleName="Init"
               componentMouseCursor="2" componentGroupName="grpProg" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ffff8040"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="DO IT&#10;DOING"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="72 70 40 18" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="requestProgFromSynth"
             name="btnRecvBuffer" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1.11;3" componentVisibleName="Recv"
               componentMouseCursor="2" componentGroupName="grpProg" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffffffff"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="RECV&#10;RECV"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="64 16 45 18" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="sendBuffer"
             name="btnSendBuffer" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1.11;3" componentVisibleName="Send"
               componentMouseCursor="2" componentGroupName="grpProg" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffffffff"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="SEND&#10;SEND"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="64 40 45 18" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="2" vstIndex="584" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbProgTaskTyp" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Prog Task Type"
               componentMouseCursor="2" componentGroupName="grpProg" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Init&#10;Copy&#10;Compare"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="4 70 64 18" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpEditBuffer" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpEditBuffer"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="Active Program Edit Buffer"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="264 16 255 132"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="radioButtonChanged"
             name="btnEditBuffer1" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="1"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="1" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff00ff40"
               uiButtonColourOff="ff306060" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="1&#10;1" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="24 16 28 24"
               uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="radioButtonChanged"
             name="btnEditBuffer2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="2"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="1" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff00ff40"
               uiButtonColourOff="ff306060" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="2&#10;2" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="24 44 28 24"
               componentLayerUid="bcaca5482c0e01002001000000000000" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="radioButtonChanged"
             name="btnEditBuffer3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="3"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="1" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff00ff40"
               uiButtonColourOff="ff306060" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="3&#10;3" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="24 72 28 24"
               uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="radioButtonChanged"
             name="btnEditBuffer4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="1" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff00ff40"
               uiButtonColourOff="ff306060" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="4&#10;4" uiButtonConnectedLeft="0"
               uiButtonConnectedRight="0" uiButtonConnectedTop="0" uiButtonConnectedBottom="0"
               uiButtonRepeat="0" uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0"
               componentInternalFunction="-- None" componentRectangle="24 100 28 24"
               uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblBuf1ProgName" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Program Name"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;15;0;0;0;0;1;3"
               uiLabelText="init program" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="20" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="56 16 164 22" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblBuf2ProgName" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Program Name"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;15;0;0;0;0;1;3"
               uiLabelText="init program" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="20" uiLabelChangedCbk="-- None"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="56 44 164 22" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblBuf3ProgName" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Program Name"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;15;0;0;0;0;1;3"
               uiLabelText="init program" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="20" uiLabelChangedCbk="-- None"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="56 72 164 22" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblBuf4ProgName" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Program Name"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;15;0;0;0;0;1;3"
               uiLabelText="init program" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="20" uiLabelChangedCbk="-- None"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="56 100 164 22" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="btnMuteEditBuffer1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffc0c0c0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mute"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTextColourOn="FFFF5000"
               uiToggleButtonFocusOutline="0x00000000" uiToggleButtonText=""
               uiButtonTrueValue="1" uiButtonFalseValue="0" uiButtonColourOff="FFA0A0A0"
               componentRectangle="4 16 21 27" uiType="uiToggleButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="btnMuteEditBuffer2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffc0c0c0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mute"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTextColourOn="FFFF5000"
               uiToggleButtonFocusOutline="0x00000000" uiToggleButtonText=""
               uiButtonTrueValue="1" uiButtonFalseValue="0" uiButtonColourOff="FFA0A0A0"
               componentRectangle="4 44 21 27" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiToggleButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="btnMuteEditBuffer3" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffc0c0c0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mute"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTextColourOn="FFFF5000"
               uiToggleButtonFocusOutline="0x00000000" uiToggleButtonText=""
               uiButtonTrueValue="1" uiButtonFalseValue="0" uiButtonColourOff="FFA0A0A0"
               componentRectangle="4 72 21 27" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiToggleButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="btnMuteEditBuffer4" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffc0c0c0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Mute"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="No Effect" componentEffectRadius="1" componentEffectColour="ff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTextColourOn="FFFF5000"
               uiToggleButtonFocusOutline="0x00000000" uiToggleButtonText=""
               uiButtonTrueValue="1" uiButtonFalseValue="0" uiButtonColourOff="FFA0A0A0"
               componentRectangle="4 100 21 27" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiToggleButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblMuteEditBuffer" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-2"
               componentMouseCursor="2" componentGroupName="grpEditBuffer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF303030"
               uiLabelTextColour="ffe0e0e0" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="centred" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;13;0;0;0;0;0.88;3"
               uiLabelText="Mute" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="4 4 20 12" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="-1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="boxLeftProgBank" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="left"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffc0c0c0"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;1;3" componentVisibleName="Left Program Bank"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="0" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="" componentRectangle="792 8 196 484"
               uiListBoxRowHeight="16" uiListBoxBackgroundColour="FF101010"
               uiListBoxHighlightBgColour="ff306060" uiListBoxHighlightFgColour="FFB0C0FF"
               uiListBoxTextColour="FFB0C0FF" uiListBoxFont="&lt;Sans-Serif&gt;;17;0;0;0;0;0.92;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;17;0;0;0;0;1;3" uiListBoxOutline="2"
               uiListBoxOutlineColour="ffa3a3a3" uiListBoxVScrollBgColour="0xffffffff"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="0xffffffff" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="-- None"
               uiListBoxItemDoubleClicked="leftBankItemAudition" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="leftBankItemAudition" uiType="uiListBox"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="11" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="leftBankChanged"
             name="cmbLeftBank" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="First Bank"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="1&#10;2&#10;3&#10;4&#10;5&#10;6&#10;7&#10;8&#10;9&#10;10&#10;11&#10;12"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="952 8 32 12" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="-1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="boxRightProgBank" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="left"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffc0c0c0"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;1;3" componentVisibleName="Right Program Bank"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="0" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="" componentRectangle="1000 8 196 484"
               uiListBoxRowHeight="16" uiListBoxBackgroundColour="FF101010"
               uiListBoxHighlightBgColour="ff306060" uiListBoxHighlightFgColour="FFB0C0FF"
               uiListBoxTextColour="FFB0C0FF" uiListBoxFont="&lt;Sans-Serif&gt;;17;0;0;0;0;0.91;3"
               uiListBoxHighlightFont="&lt;Sans-Serif&gt;;17;0;0;0;0;1;3" uiListBoxOutline="2"
               uiListBoxOutlineColour="ffa3a3a3" uiListBoxVScrollBgColour="0xffffffff"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="0xffffffff" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="1" uiListBoxItemClicked="-- None"
               uiListBoxItemDoubleClicked="rightBankItemAudition" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="rightBankItemAudition" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiListBox"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="12" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="rightBankChanged"
             name="cmbRightBank" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Second Bank"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="1&#10;2&#10;3&#10;4&#10;5&#10;6&#10;7&#10;8&#10;9&#10;10&#10;11&#10;12&#10;Results"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="1160 8 32 12"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblLeftBankInfo1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;50;0;0;0;0;1.01;3" componentVisibleName="LeftBankInfo1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="topLeft" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;15;0;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="255" uiLabelChangedCbk="-- None"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="792 520 196 40" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblRightBankInfo1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;50;0;0;0;0;1.01;3" componentVisibleName="RightBankInfo1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="topLeft" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;15;0;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="255" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="1000 520 196 40" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpBankTask" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpBankTask"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="BANK TASK"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="640 16 147 95"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="doBankTask"
             name="btnDoBankTask" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpBankTask" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ffff8040"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="DO IT&#10;DOING"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="26 16 96 18" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="15" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="bankTaskTypChanged"
             name="cmbBankTaskTyp" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Bank Task Type"
               componentMouseCursor="2" componentGroupName="grpBankTask" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Left bank: Load from file&#10;Left bank: Save to file as&#10;Left bank: Recv SysEx&#10;Left bank: Send as SysEx&#10;Left bank: Names to file&#10;Left bank: Erase&#10;Edit buffer: replace prog&#10;Edit buffer: append prog&#10;Prog: Replace in left bank&#10;Prog: Insert to left bank&#10;Prog: Append to left bank&#10;Prog: Swap left-right&#10;Prog: Delete from left bank&#10;Right bank: Load from file&#10;Right bank: Names to file&#10;Right bank: Erase"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="5 40 139 22" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="4" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbSaveBankAs" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Save Bank To FIle As"
               componentMouseCursor="2" componentGroupName="grpBankTask" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Bank User 0&#10;Bank User 1&#10;Bank User 2&#10;Bank User 3&#10;Bank User 4"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="32 68 96 18"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblProgName" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Program Name"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;18;1;0;0;0;1;3"
               uiLabelText="init program" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="20" uiLabelChangedCbk="progNameChanged"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="138 160 192 30" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpFilter" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpFilter"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="FILTER" uiGroupTextColour="ffffffff"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="360 192 115 171"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="0" componentTabName="" uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="500" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldFiltFreq" modulatorMin="0" modulatorValue="182">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="FREQ"
               componentMouseCursor="2" componentGroupName="grpFilter" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="0 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="501" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldFiltRes" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;0.97;3" componentVisibleName="RESO"
               componentMouseCursor="2" componentGroupName="grpFilter" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="48 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="254" vstIndex="502" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldFiltMode" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="MODE"
               componentMouseCursor="2" componentGroupName="grpFilter" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="254" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 80 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="2" vstIndex="503" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbFiltKbdTrack" modulatorMin="0" modulatorValue="2">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Kybd"
               componentMouseCursor="2" componentGroupName="grpFilter" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Off&#10;Half&#10;Full"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="56 80 48 32"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="504" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnFiltBP" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="BP"
               componentMouseCursor="2" componentGroupName="grpFilter" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="60 120 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpFilterEnv" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpFilterEnv"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="FILTER ENV"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="480 192 307 83"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="505" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldFiltEnvAttack" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="ATTACK"
               componentMouseCursor="2" componentGroupName="grpFilterEnv" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="506" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldFiltEnvDecay" modulatorMin="0" modulatorValue="58">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="DECAY"
               componentMouseCursor="2" componentGroupName="grpFilterEnv" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="48 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="507" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldFiltEnvSustain" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="SUST"
               componentMouseCursor="2" componentGroupName="grpFilterEnv" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="96 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="508" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldFiltEnvRelease" modulatorMin="0" modulatorValue="61">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="REL"
               componentMouseCursor="2" componentGroupName="grpFilterEnv" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="144 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="509" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnVelFilter" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="VEL"
               componentMouseCursor="2" componentGroupName="grpFilterEnv" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="200 24 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="510" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldFiltEnvAmt" modulatorMin="-127" modulatorValue="42">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="ENV AMT"
               componentMouseCursor="2" componentGroupName="grpFilterEnv" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-127" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="240 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpAmp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpFilter"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="AMPLIFIER ENV"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="480 280 307 83"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="511" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldAmpEnvAttack" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="ATTACK"
               componentMouseCursor="2" componentGroupName="grpAmp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="0 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="512" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldAmpEnvDecay" modulatorMin="0" modulatorValue="50">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="DECAY"
               componentMouseCursor="2" componentGroupName="grpAmp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="48 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="513" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldAmpEnvSustain" modulatorMin="0" modulatorValue="127">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="SUST"
               componentMouseCursor="2" componentGroupName="grpAmp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="96 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="514" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldAmpEnvRelease" modulatorMin="0" modulatorValue="45">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="REL"
               componentMouseCursor="2" componentGroupName="grpAmp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="144 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="543" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnVelAmp" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="VEL"
               componentMouseCursor="2" componentGroupName="grpAmp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="200 24 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="553" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldAmpEnvAmt" modulatorMin="0" modulatorValue="127">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="AMOUNT"
               componentMouseCursor="2" componentGroupName="grpAmp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="240 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpMixer" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpMixer"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MIXER" uiGroupTextColour="ffffffff"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="240 192 113 148"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="0" componentTabName="" uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="515" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldMixerOscA" modulatorMin="0" modulatorValue="127">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="VCO 1"
               componentMouseCursor="2" componentGroupName="grpMixer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="0 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="516" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldMixerOscB" modulatorMin="0" modulatorValue="127">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="VCO 2"
               componentMouseCursor="2" componentGroupName="grpMixer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="48 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="546" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldMixerSubOct" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="SUB OCT"
               componentMouseCursor="2" componentGroupName="grpMixer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 80 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="517" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldMixerNoise" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="NOISE"
               componentMouseCursor="2" componentGroupName="grpMixer" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="48 80 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpOscA" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpOscA"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="VCO 1" uiGroupTextColour="ffffffff"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 192 231 83" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="centredTop"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" componentTabId="0"
               componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="60" vstIndex="518" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbOscAFreq" modulatorMin="0" modulatorValue="24">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="FREQ"
               componentMouseCursor="2" componentGroupName="grpOscA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="C0 &#10;C#0&#10;D0 &#10;D#0&#10;E0 &#10;F0 &#10;F#0&#10;G0 &#10;G#0&#10;A0 &#10;A#0&#10;B0 &#10;C1 &#10;C#1&#10;D1 &#10;D#1&#10;E1 &#10;F1 &#10;F#1&#10;G1 &#10;G#1&#10;A1 &#10;A#1&#10;B1 &#10;C2 &#10;C#2&#10;D2 &#10;D#2&#10;E2 &#10;F2 &#10;F#2&#10;G2 &#10;G#2&#10;A2 &#10;A#2&#10;B2 &#10;C3 &#10;C#3&#10;D3 &#10;D#3&#10;E3 &#10;F3 &#10;F#3&#10;G3 &#10;G#3&#10;A3 &#10;A#3&#10;B3 &#10;C4 &#10;C#4&#10;D4 &#10;D#4&#10;E4 &#10;F4 &#10;F#4&#10;G4 &#10;G#4&#10;A4 &#10;A#4&#10;B4 &#10;C5 "
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="8 24 55 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="519" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldOscAPW" modulatorMin="0" modulatorValue="147">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="P W"
               componentMouseCursor="2" componentGroupName="grpOscA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="164 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="520" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnOscASync" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="SYNC"
               componentMouseCursor="2" componentGroupName="grpOscA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="80 24 32 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="547" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldOscAShape" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="SHAPE"
               componentMouseCursor="2" componentGroupName="grpOscA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="112 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpOscB" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpOscB"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="VCO 2" uiGroupTextColour="ffffffff"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 280 231 124"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="0" componentTabName="" uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="60" vstIndex="521" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbOscBFreq" modulatorMin="0" modulatorValue="24">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="FREQ"
               componentMouseCursor="2" componentGroupName="grpOscB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="C0 &#10;C#0&#10;D0 &#10;D#0&#10;E0 &#10;F0 &#10;F#0&#10;G0 &#10;G#0&#10;A0 &#10;A#0&#10;B0 &#10;C1 &#10;C#1&#10;D1 &#10;D#1&#10;E1 &#10;F1 &#10;F#1&#10;G1 &#10;G#1&#10;A1 &#10;A#1&#10;B1 &#10;C2 &#10;C#2&#10;D2 &#10;D#2&#10;E2 &#10;F2 &#10;F#2&#10;G2 &#10;G#2&#10;A2 &#10;A#2&#10;B2 &#10;C3 &#10;C#3&#10;D3 &#10;D#3&#10;E3 &#10;F3 &#10;F#3&#10;G3 &#10;G#3&#10;A3 &#10;A#3&#10;B3 &#10;C4 &#10;C#4&#10;D4 &#10;D#4&#10;E4 &#10;F4 &#10;F#4&#10;G4 &#10;G#4&#10;A4 &#10;A#4&#10;B4 &#10;C5 "
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="8 24 55 32"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="522" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldOscBFine" modulatorMin="-127" modulatorValue="14">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="FINE"
               componentMouseCursor="2" componentGroupName="grpOscB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-127" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="64 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="523" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldOscBPW" modulatorMin="0" modulatorValue="122">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="P W"
               componentMouseCursor="2" componentGroupName="grpOscB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="164 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="524" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnOscBLoFreq" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="LO FREQ"
               componentMouseCursor="2" componentGroupName="grpOscB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="56 80 46 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="525" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnOscBKbd" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="KYBD"
               componentMouseCursor="2" componentGroupName="grpOscB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="120 80 46 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="548" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldOscBShape" modulatorMin="0" modulatorValue="131">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="SHAPE"
               componentMouseCursor="2" componentGroupName="grpOscB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="112 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpPolyMod" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpPolyMod"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="X-MOD" uiGroupTextColour="ffffffff"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="368 376 201 121"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="0" componentTabName="" uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="526" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldPModFiltEnv" modulatorMin="-127" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="FILT ENV"
               componentMouseCursor="2" componentGroupName="grpPolyMod" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-127" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="0 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="527" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldPModOsc2" modulatorMin="-127" modulatorValue="33">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="VCO 2"
               componentMouseCursor="2" componentGroupName="grpPolyMod" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-127" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="48 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="528" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnPModOsc1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="VCO 1"
               componentMouseCursor="2" componentGroupName="grpPolyMod" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="104 16 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="529" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnPModPW1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="PW 1"
               componentMouseCursor="2" componentGroupName="grpPolyMod" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="104 48 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="530" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnPModShape1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="SHAPE 1"
               componentMouseCursor="2" componentGroupName="grpPolyMod" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="152 16 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="565" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnPModFFreq" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="F Freq"
               componentMouseCursor="2" componentGroupName="grpPolyMod" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="152 48 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="566" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnPModFMode" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="F Mode"
               componentMouseCursor="2" componentGroupName="grpPolyMod" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="104 80 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="567" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnPModNormBP" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0.83;3" componentVisibleName="NormBP"
               componentMouseCursor="2" componentGroupName="grpPolyMod" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="151 80 42 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpLFO" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpLFO"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="LFO" uiGroupTextColour="ffffffff"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 408 364 88" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="centredTop"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" componentTabId="0"
               componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="531" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldLFOInitAmt" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="INIT AMT"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="136 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="254" vstIndex="532" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldLFOFreq" modulatorMin="0" modulatorValue="136">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="FREQ"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="254" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="120" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="533" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnLFOSync" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="SYNC"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="72 8 48 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="4" vstIndex="549" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbLFOShape" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="SHAPE"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Sine&#10;Sawtooth&#10;Rev Saw&#10;Square&#10;Random"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="64 48 72 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="550" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnLFODestOsc1" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="VCO 1"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="200 16 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="551" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnLFODestOsc2" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="VCO 2"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="248 16 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="557" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnLFOAmp" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="AMP"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="200 48 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="558" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnLFOFiltFreq" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="F FREQ"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="248 48 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="559" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnLFOFiltMode" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="F MODE"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="296 48 48 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="3" vstIndex="560" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbLFODestPW" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="PW"
               componentMouseCursor="2" componentGroupName="grpLFO" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="none&#10;VCO1&#10;VCO2&#10;1 + 2"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="292 16 62 32"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpAftertouch" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpAftertouch"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="3175" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="AFTERTOUCH"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="576 408 211 88"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="0" componentTabName="" uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="534" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldAftAmt" modulatorMin="-127" modulatorValue="29">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="AMOUNT"
               componentMouseCursor="2" componentGroupName="grpAftertouch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="-127" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="0 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="535" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnAftOsc1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="VCO 1"
               componentMouseCursor="2" componentGroupName="grpAftertouch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="64 16 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="536" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnAftOsc2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="VCO 2"
               componentMouseCursor="2" componentGroupName="grpAftertouch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="112 16 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="561" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnAftLFOAmt" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="LFO Amt"
               componentMouseCursor="2" componentGroupName="grpAftertouch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="160 16 42 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="562" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnAftAmp" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="AMP"
               componentMouseCursor="2" componentGroupName="grpAftertouch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="64 48 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="563" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnAftFiltFreq" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="F FREQ"
               componentMouseCursor="2" componentGroupName="grpAftertouch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="112 48 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="564" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnAftFiltMode" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="F MODE"
               componentMouseCursor="2" componentGroupName="grpAftertouch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="160 48 42 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpMisc1" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpMisc1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="MISC" uiGroupTextColour="ffffffff"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 500 364 96" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="centredTop"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3" uiGroupOutlineThickness="2"
               uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0" componentTabId="0"
               componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="537" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldGlide" modulatorMin="0" modulatorValue="14">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="PORT"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="539" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldProgVolume" modulatorMin="0" modulatorValue="114">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Prog Vol"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="248 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="540" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnUnison" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="UNISON"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="64 16 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="6" vstIndex="541" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbUniVoices" modulatorMin="0" modulatorValue="6">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Uni Voices"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="1&#10;2&#10;3&#10;4&#10;5&#10;6&#10;Chord"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="112 16 64 32"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="3" vstIndex="542" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbGlideMode" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Port Mode"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Fr Fixed Rate&#10;Ft Fixed Time&#10;FrA Fixed Rate A&#10;FtA Fixed Time A"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="112 48 64 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="12" vstIndex="544" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbPBendRange" modulatorMin="0" modulatorValue="2">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="P.Bend Rng"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="0&#10;1&#10;2&#10;3&#10;4&#10;5&#10;6&#10;7&#10;8&#10;9&#10;10&#10;11&#10;12"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="184 16 64 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="5" vstIndex="545" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbKeyPriority" modulatorMin="0" modulatorValue="5">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Key Priority"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Lo&#10;Hi&#10;Las&#10;LoR&#10;HiR&#10;LaR"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="184 48 64 32"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="554" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnGlideOn" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="Port On"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="64 48 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="555" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldPanSpread" modulatorMin="0" modulatorValue="8">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Pan Sprd"
               componentMouseCursor="2" componentGroupName="grpMisc1" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="296 16 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblOtherProgData" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;50;0;0;0;0;1.01;3" componentVisibleName="OtherProgData"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiLabelText="Chord 0 3 7 10" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="40" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="576 376 209 24" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblMsgDisplay" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF303030"
               uiLabelTextColour="ffffc080" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiLabelContent="hi" uiListBoxContent="hi" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="64 1 720 12" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpControls" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpControls"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="CONTROLS"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="792 568 404 104"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="65536" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="MidiKeyboard" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="modulator-1"
               componentMouseCursor="2" componentGroupName="grpControls" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiMidiKeyboardOrientation="horizontalKeyboard"
               uiMidiKeyboardWhiteButtonColour="0xffffffff" uiMidiKeyboardBlackButtonColour="0xff000000"
               uiMidiKeyboardSeparatorLineColour="0xff000000" uiMidiKeyboardMouseOverColour="0xffff0000"
               uiMidiKeyboardMouseDownColour="0xff0000ff" uiMidiKeyboardTextLabelColour="0xff000000"
               uiMidiKeyboardButtonBackgroundColour="0xff0f0f0f" uiMidiKeyboardButtonArrowColour="0xff000000"
               uiMidiKeyboardLowestVisibleKey="48" uiMidiKeyboardBaseOctaveKeyPress="0"
               uiMidiKeyboardOctaveFroMiddleC="3" uiMidiKeyboardMapToNoteNumber="0"
               componentRectangle="120 24 272 64" uiType="uiMidiKeyboard" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="127" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="0"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sldModWheel" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="0" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="MOD WHEEL"
               componentMouseCursor="2" componentGroupName="grpControls" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffffffff" uiSliderValueBgColour="ff60c0c0"
               uiSliderRotaryOutlineColour="ff80ffff" uiSliderRotaryFillColour="ff80ffff"
               uiSliderThumbColour="ff60a0ff" uiSliderValueHighlightColour="ff80ffff"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff80ffff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="16 20 84 28" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="127" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="0"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sldAftertouch" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="2" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="AFTERTOUCH"
               componentMouseCursor="2" componentGroupName="grpControls" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="LinearBar"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="1" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="ffffffff" uiSliderValueBgColour="ff60c0c0"
               uiSliderRotaryOutlineColour="ff80ffff" uiSliderRotaryFillColour="ff80ffff"
               uiSliderThumbColour="ff60a0ff" uiSliderValueHighlightColour="ff80ffff"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="ff80ffff" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="16 56 84 28"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="552" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="btnSeqPlay" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="6" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1088" midiMessageCtrlrValue="0" midiMessageMultiList="CC,ByteValue,MSB7bitValue,99,-2:CC,ByteValue,LSB7bitValue,98,-2:CC,ByteValue,MSB7bitValue,6,-1:CC,ByteValue,LSB7bitValue,38,-1"
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;14;1;0;0;0;0.9;3" componentVisibleName="SEQ PLAY"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="ff00ff40"
               uiButtonColourOff="FF282850" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ffa3a3a3" uiButtonContent="OFF&#10;ON"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="536 120 80 32" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpMisc2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpMisc2"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="ffffffff"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="0" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="240 344 113 61"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentLayerUid="bcaca5482c0e01002001000000000000" uiType="uiGroup"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="538" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldVintage" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="VINTAGE"
               componentMouseCursor="2" componentGroupName="grpMisc2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="0 0 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="556" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldDistortion" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Distort"
               componentMouseCursor="2" componentGroupName="grpMisc2" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="48 0 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpClockArp" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpClockArp"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="CLOCK + ARPEGGIATOR"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="368 500 201 96"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpEffectA" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpEffectA"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="EFFECT A"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="88 600 349 72"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpEffectB" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpEffectB"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="EFFECT B"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="440 600 349 72"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="250" vstIndex="568" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldClockBPM" modulatorMin="30" modulatorValue="105">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="BPM"
               componentMouseCursor="2" componentGroupName="grpClockArp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="30" uiSliderMax="250" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="120" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="0 16 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="569" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnArpOn" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="ARP ON"
               componentMouseCursor="2" componentGroupName="grpClockArp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="64 16 40 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="9" vstIndex="570" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbClockTimeSig" modulatorMin="0" modulatorValue="3">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Time Sig"
               componentMouseCursor="2" componentGroupName="grpClockArp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Half&#10;Qtr&#10;8th dot&#10;8th&#10;8th swing&#10;8th trip&#10;16th&#10;16th swing&#10;16th trip&#10;32nd"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="56 56 64 32"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="2" vstIndex="571" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbArpRange" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Octaves"
               componentMouseCursor="2" componentGroupName="grpClockArp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="1&#10;2&#10;3"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="128 16 64 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="4" vstIndex="572" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbArpMode" modulatorMin="0" modulatorValue="3">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Mode"
               componentMouseCursor="2" componentGroupName="grpClockArp" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Up&#10;Down&#10;Up Down&#10;Random&#10;Assign"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="128 56 64 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpEffects" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpEffects"
               componentMouseCursor="2" componentGroupName="" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="EFFECTS"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="0xffa3a3a3"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="0"
               uiGroupBackgroundColour2="0xffffffff" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="0" uiGroupBackgroundImage="" componentRectangle="0 600 85 72"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;1;0;0;0;1;3"
               uiGroupOutlineThickness="2" uiGroupOutlineRoundAngle="8" uiGroupTextMargin="0"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="573" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnEffectsOn" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="ON/OFF"
               componentMouseCursor="2" componentGroupName="grpEffects" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="24 24 40 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="9" vstIndex="574" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbEffectAType" modulatorMin="0" modulatorValue="3">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="TYPE"
               componentMouseCursor="2" componentGroupName="grpEffectA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Off&#10;bbd Bucket Brigade Delay&#10;ddL Digital Delay&#10;cho Chorus&#10;PH1 Phaser 1&#10;PH2 Phaser 2&#10;PH3 Phaser 3&#10;rm Ring Modulator&#10;FL1 Flanger 1&#10;FL2 Flanger 2"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="56 24 80 32"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="13" vstIndex="575" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbEffectBType" modulatorMin="0" modulatorValue="10">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="TYPE"
               componentMouseCursor="2" componentGroupName="grpEffectB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Off&#10;bbd Bucket Brigade Delay&#10;ddL Digital Delay&#10;cho Chorus&#10;PH1 Phaser 1&#10;PH2 Phaser 2&#10;PH3 Phaser 3&#10;rm Ring Modulator&#10;FL1 Flanger 1&#10;FL2 Flanger 2&#10;HAL Hall Reverb&#10;rOO Room Reverb&#10;PLA Plate Reverb&#10;SPr Spring Reverb"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="56 24 80 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="576" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldEffectAMix" modulatorMin="0" modulatorValue="37">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="MIX"
               componentMouseCursor="2" componentGroupName="grpEffectA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="0 8 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="577" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldEffectBMix" modulatorMin="0" modulatorValue="23">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="MIX"
               componentMouseCursor="2" componentGroupName="grpEffectB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="0 8 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="578" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnEffectASync" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="SYNC"
               componentMouseCursor="2" componentGroupName="grpEffectA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="144 24 32 30" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="1" vstIndex="579" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="btnEffectBSync" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;13;1;0;0;0;0.87;3" componentVisibleName="SYNC"
               componentMouseCursor="2" componentGroupName="grpEffectB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="0" uiButtonTextColourOff="0"
               uiButtonContent="False&#10;True" uiButtonConnectedLeft="0" uiButtonConnectedRight="0"
               uiButtonConnectedTop="0" uiButtonConnectedBottom="0" uiButtonRepeat="0"
               uiButtonRepeatRate="100" uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="144 24 32 30" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="580" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldEffectAParam1" modulatorMin="0" modulatorValue="17">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="PARAM 1"
               componentMouseCursor="2" componentGroupName="grpEffectA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="232 8 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="255" vstIndex="581" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldEffectBParam1" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="PARAM 1"
               componentMouseCursor="2" componentGroupName="grpEffectB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="255" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="232 8 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="582" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldEffectAParam2" modulatorMin="0" modulatorValue="55">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="PARAM 2"
               componentMouseCursor="2" componentGroupName="grpEffectA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="288 8 63 57" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="127" vstIndex="583" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="sldEffectBParam2" modulatorMin="0" modulatorValue="126">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="PARAM 2"
               componentMouseCursor="2" componentGroupName="grpEffectB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="127" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="288 8 63 57"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="10" vstIndex="2089" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbEffectASyncRate" modulatorMin="0" modulatorValue="7">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="SYNC RATE"
               componentMouseCursor="2" componentGroupName="grpEffectA" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="16&#10;16 d&#10;8 t&#10;8&#10;8 d&#10;4 t&#10;4&#10;4 d&#10;2&#10;2 d&#10;1"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="184 24 56 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="1" modulatorMax="10" vstIndex="2090" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="modulatorChanged"
             name="cmbEffectBSyncRate" modulatorMin="0" modulatorValue="4">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="SYNC RATE"
               componentMouseCursor="2" componentGroupName="grpEffectB" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="16&#10;16 d&#10;8 t&#10;8&#10;8 d&#10;4 t&#10;4&#10;4 d&#10;2&#10;2 d&#10;1"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="184 24 56 32"
               componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpCopyLayerBkgnd" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpCopyLayerBkgnd"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="80404040" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 0 1200 680" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="0"
               uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0" componentLayerUid="999d223d5f0900002001000000000000"
               uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpProgCopy" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpProgCopy"
               componentMouseCursor="2" componentGroupName="grpCopyLayerBkgnd"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="COPY PROGRAM"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="ffffffff"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ff404040"
               uiGroupBackgroundColour2="ffa0a0a0" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="1" uiGroupBackgroundImage="" componentRectangle="520 112 261 172"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="4" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="999d223d5f0900002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblCopyDest" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblCopyDest"
               componentMouseCursor="2" componentGroupName="grpProgCopy" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0" uiLabelTextColour="ffffffff"
               uiLabelOutline="0" uiLabelOutlineColour="0x00000000" uiLabelJustification="left"
               uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;0.88;3"
               uiLabelText="Destination: Edit buffer 1" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="0" componentTabName="" componentLayerUid="999d223d5f0900002001000000000000"
               componentRectangle="24 24 189 20" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblCopySource" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblCopySource"
               componentMouseCursor="2" componentGroupName="grpProgCopy" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0" uiLabelTextColour="ffffffff"
               uiLabelOutline="0" uiLabelOutlineColour="0x00000000" uiLabelJustification="left"
               uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;0.88;3"
               uiLabelText="Source" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="24 60 48 20" componentLayerUid="999d223d5f0900002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbCopyFromEditBuffer" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Edit Buffer"
               componentMouseCursor="2" componentGroupName="grpProgCopy" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FF000000"
               uiComboOutlineColour="FFE0E0E0" uiComboTextColour="FF000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFE0E0E0"
               uiComboBgColour="FFB0B0B0" uiComboMenuBackgroundColour="FFE0E0E0"
               uiComboMenuFontColour="FF000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="1&#10;2&#10;3&#10;4"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="88 48 70 32"
               componentLayerUid="999d223d5f0900002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="doProgTaskCopy"
             name="btnProgCopyOk" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpProgCopy" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="OK&#10;OK"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="72 136 56 18" uiType="uiButton" componentLayerUid="999d223d5f0900002001000000000000"
               componentTabName="" componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="doProgTaskCopy"
             name="btnProgCopyCancel" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpProgCopy" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="ffe0e0e0" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="Cancel&#10;Cancel"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="144 136 56 18" componentTabId="1" componentTabName=""
               componentLayerUid="999d223d5f0900002001000000000000" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="btnCopySequence" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="btnCopySequence"
               componentMouseCursor="2" componentGroupName="grpProgCopy" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTextColourOn="ffffffff"
               uiToggleButtonFocusOutline="0x00000000" uiToggleButtonText="Sequence only"
               uiButtonTrueValue="1" uiButtonFalseValue="0" uiButtonColourOff="FFA0A0A0"
               componentRectangle="72 88 120 26" componentLayerUid="999d223d5f0900002001000000000000"
               uiType="uiToggleButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpCompareLayerBkgnd" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpCompareLayerBkgnd"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="0" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="80404040" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="0 0 1200 680" uiGroupBackgroundImageLayout="36"
               uiGroupBackgroundImageAlpha="255" uiGroupTextPlacement="top"
               uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3" uiGroupOutlineThickness="0"
               uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0" uiType="uiGroup"
               componentLayerUid="a884a227fe2300002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpProgCompare" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpProgCompare"
               componentMouseCursor="2" componentGroupName="grpCompareLayerBkgnd"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="COMPARE PROGRAM"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="ffffffff"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ff404040"
               uiGroupBackgroundColour2="ffa0a0a0" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="1" uiGroupBackgroundImage="" componentRectangle="520 112 261 172"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="4" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="a884a227fe2300002001000000000000"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblCompareFrom" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblCompareDest"
               componentMouseCursor="2" componentGroupName="grpProgCompare"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0" uiLabelTextColour="ffffffff"
               uiLabelOutline="0" uiLabelOutlineColour="0x00000000" uiLabelJustification="left"
               uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;0.88;3"
               uiLabelText="Compare from: Edit buffer 1" uiLabelDisplaysAllValues="0"
               uiLabelDisplayFormat="%n(%N) = %v(%h)" uiLabelInputHighlightTextColour="0xffffffff"
               uiLabelInputHighlightColour="0xff0000ff" uiLabelEditOnSingleClick="0"
               uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               componentTabId="0" componentTabName="" componentLayerUid="a884a227fe2300002001000000000000"
               componentRectangle="24 24 189 20" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblCompareTo" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblCompareSource"
               componentMouseCursor="2" componentGroupName="grpProgCompare"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="0" uiLabelTextColour="ffffffff"
               uiLabelOutline="0" uiLabelOutlineColour="0x00000000" uiLabelJustification="left"
               uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;0.88;3"
               uiLabelText="Compare to" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="24 60 72 20" componentLayerUid="a884a227fe2300002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbCompareToEditBuffer" modulatorMin="0" modulatorValue="1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Edit Buffer"
               componentMouseCursor="2" componentGroupName="grpProgCompare"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FF000000"
               uiComboOutlineColour="FFE0E0E0" uiComboTextColour="FF000000"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFE0E0E0"
               uiComboBgColour="FFB0B0B0" uiComboMenuBackgroundColour="FFE0E0E0"
               uiComboMenuFontColour="FF000000" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="1&#10;2&#10;3&#10;4"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="104 48 70 32"
               componentLayerUid="a884a227fe2300002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="doProgTaskCompare"
             name="btnProgCompareOk" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpProgCompare"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="Compare&#10;Compare"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="72 104 56 18" uiType="uiButton" componentLayerUid="a884a227fe2300002001000000000000"
               componentTabName="" componentTabId="1"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="doProgTaskCompare"
             name="btnProgCompareDone" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpProgCompare"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="ffe0e0e0" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="Done&#10;Done"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="144 104 56 18" componentTabId="1" componentTabName=""
               componentLayerUid="a884a227fe2300002001000000000000" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="0" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="boxProgCompResult" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="left"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffffffff"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;1;3" componentVisibleName="Compare Results"
               componentMouseCursor="2" componentGroupName="grpCompareLayerBkgnd"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="0"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiListBoxContent="Edit buffer 2 is the same as edit buffer 1"
               componentRectangle="520 296 536 333" uiListBoxRowHeight="16"
               uiListBoxBackgroundColour="FF101010" uiListBoxHighlightBgColour="ff306060"
               uiListBoxHighlightFgColour="FFE0E0E0" uiListBoxTextColour="FFE0E0E0"
               uiListBoxFont="&lt;Monospaced&gt;;17;0;0;0;0;0.92;3" uiListBoxHighlightFont="&lt;Monospaced&gt;;16;0;0;0;0;1;3"
               uiListBoxOutline="2" uiListBoxOutlineColour="ffffffff" uiListBoxVScrollBgColour="0xffffffff"
               uiListBoxVScrollThumbColour="0xffababab" uiListBoxVScrollTrackColour="0xffff0000"
               uiListBoxHScrollBgColour="0xffffffff" uiListBoxHScrollThumbColour="0xffababab"
               uiListBoxHScrollTrackColour="0xffff0000" uiListBoxJustification="left"
               uiListBoxMultipleSelection="0" uiListBoxItemClicked="-- None"
               uiListBoxItemDoubleClicked="-- None" uiListBoxItemDeleteKeyPressed="-- None"
               uiListBoxItemReturnKeyPressed="-- None" componentLayerUid="a884a227fe2300002001000000000000"
               uiType="uiListBox"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblLeftBankInfo2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;50;0;0;0;0;1.01;3" componentVisibleName="LeftBankInfo1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="topLeft" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;15;0;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="255" uiLabelChangedCbk="-- None"
               componentTabId="0" componentTabName="" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentRectangle="792 496 133 20" uiType="uiLabel"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblRightBankInfo2" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;50;0;0;0;0;1.01;3" componentVisibleName="LeftBankInfo1"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="ffa3a3a3"
               uiLabelJustification="topLeft" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;15;0;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="255" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="1000 496 133 20" componentLayerUid="bcaca5482c0e01002001000000000000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="saveBankChanged"
             name="btnSaveLeftBank" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1.11;3" componentVisibleName="Save"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffffffff"
               uiButtonColourOff="ff00ff40" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="SAVE BANK&#10;SAVING"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="932 496 56 18" uiType="uiButton" componentLayerUid="bcaca5482c0e01002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="openSearchChanged"
             name="btnOpenSearch" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;15;1;0;0;0;1.11;3" componentVisibleName="Save"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="0" uiButtonColourOn="ffffffff"
               uiButtonColourOff="ff00c0ff" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="SEARCH&#10;SEARCHING"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="1140 496 56 18" componentLayerUid="bcaca5482c0e01002001000000000000"
               uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpSearchBkgnd" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="0" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpWavetableLayerBkgnd"
               componentMouseCursor="2" componentGroupName="" componentGroupped="0"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="" uiGroupTextColour="0xff000000"
               uiGroupOutlineColour1="0xffa3a3a3" uiGroupOutlineColour2="0xffffffff"
               uiGroupBackgroundColour1="80404040" uiGroupBackgroundColour2="0xffffffff"
               uiGroupOutlineGradientType="Vertical" uiGroupBackgroundGradientType="0"
               uiGroupBackgroundImage="" componentRectangle="476 16 520 296"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="top" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="0" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               componentLayerUid="948723d636ed00002001000000000000" uiType="uiGroup"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="grpSearch" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="grpWavetable"
               componentMouseCursor="2" componentGroupName="grpSearchBkgnd"
               componentGroupped="1" componentSnapSize="0" componentIsLocked="1"
               componentDisabled="0" componentRadioGroupId="0" componentRadioGroupNotifyMidi="1"
               componentVisibility="1" componentEffect="0" componentEffectRadius="1"
               componentEffectColour="0xff000000" componentEffectOffsetX="0"
               componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiGroupText="SEARCH BANKS"
               uiGroupTextColour="ffffffff" uiGroupOutlineColour1="ffffffff"
               uiGroupOutlineColour2="0xffffffff" uiGroupBackgroundColour1="ff404040"
               uiGroupBackgroundColour2="ffa0a0a0" uiGroupOutlineGradientType="Vertical"
               uiGroupBackgroundGradientType="1" uiGroupBackgroundImage="" componentRectangle="0 0 520 296"
               uiGroupBackgroundImageLayout="36" uiGroupBackgroundImageAlpha="255"
               uiGroupTextPlacement="centredTop" uiGroupTextFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiGroupOutlineThickness="4" uiGroupOutlineRoundAngle="0" uiGroupTextMargin="0"
               uiType="uiGroup" componentLayerUid="948723d636ed00002001000000000000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="11" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbSearchFromBank" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="From Bank"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="1&#10;2&#10;3&#10;4&#10;5&#10;6&#10;7&#10;8&#10;9&#10;10&#10;11&#10;12"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="16 24 64 32"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="11" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbSearchThruBank" modulatorMin="0" modulatorValue="11">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="1"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Thru Bank"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centred" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="1&#10;2&#10;3&#10;4&#10;5&#10;6&#10;7&#10;8&#10;9&#10;10&#10;11&#10;12"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="96 24 64 32" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchChanged"
             name="btnSearch" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="Search&#10;Search"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="324 40 56 18" componentTabId="1" componentTabName=""
               componentLayerUid="b3cff5473364010000d41535da7f0000" uiType="uiButton"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchDoneChanged"
             name="btnSearchDone" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;17;1;0;0;0;0.89;3" componentVisibleName="4"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiButtonTrueValue="1"
               uiButtonFalseValue="0" uiButtonIsToggle="1" uiButtonColourOn="FFFF5000"
               uiButtonColourOff="FF404050" uiButtonTextColourOn="ff000000"
               uiButtonTextColourOff="ff000000" uiButtonContent="Done&#10;Done"
               uiButtonConnectedLeft="0" uiButtonConnectedRight="0" uiButtonConnectedTop="0"
               uiButtonConnectedBottom="0" uiButtonRepeat="0" uiButtonRepeatRate="100"
               uiButtonTriggerOnMouseDown="0" componentInternalFunction="-- None"
               componentRectangle="408 40 56 18" componentTabId="1" componentTabName=""
               componentLayerUid="948723d636ed00002001000000000000" uiType="uiButton"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblSearchProgName" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffcccccc"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="Program Name"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Monospaced&gt;;18;1;0;0;0;1;3"
               uiLabelText="" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="1" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="! &quot;&quot;#$%&amp;''()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]&#94;_&#96;abcdefghijklmnopqrstuvwxyz{|}"
               uiLabelInputMaxLength="20" uiLabelChangedCbk="-- None" uiType="uiLabel"
               componentRectangle="128 68 149 30" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorCustomIndex="0" modulatorCustomIndexGroup="0" modulatorIsStatic="1"
             name="lblSearchProgNameLabel" modulatorVstExported="0" modulatorValue="0">
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="0xff000000"
               componentLabelFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" componentVisibleName="lblSearchProgNameLabel"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiLabelBgColour="FF101010"
               uiLabelTextColour="FFB0C0FF" uiLabelOutline="0" uiLabelOutlineColour="0x00000000"
               uiLabelJustification="left" uiLabelFitFont="0" uiLabelFont="&lt;Sans-Serif&gt;;18;0;0;0;0;0.88;3"
               uiLabelText="Program Name" uiLabelDisplaysAllValues="0" uiLabelDisplayFormat="%n(%N) = %v(%h)"
               uiLabelInputHighlightTextColour="0xffffffff" uiLabelInputHighlightColour="0xff0000ff"
               uiLabelEditOnSingleClick="0" uiLabelEditOnDoubleClick="0" uiLabelEditFocusDiscardsChanges="1"
               uiLabelInputAllowedChars="" uiLabelInputMaxLength="1024" uiLabelChangedCbk="-- None"
               uiType="uiLabel" componentRectangle="16 68 104 30" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentTabName="" componentTabId="0"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="85" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchParmChanged"
             name="cmbSearchParm1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="none&#10;Osc1Freq&#10;Osc1Sync&#10;Osc1Level&#10;Osc1Shape&#10;Osc1PW&#10;Osc2Freq&#10;Osc2FreqFine&#10;Osc2Level&#10;Osc2Shape&#10;Osc2PW&#10;Osc2LoFreq&#10;Osc2Kbd&#10;SubOctLevel&#10;GlideMode&#10;GlideOn&#10;GlideRate&#10;PitchBendRange&#10;NoiseLevel&#10;VintageAmt&#10;FiltFreq&#10;FiltRes&#10;FiltKbdTrack&#10;FiltVel&#10;FiltMode&#10;FiltBP&#10;ProgVolume&#10;PanSpread&#10;Distortion&#10;AmpEnvAmt&#10;AmpEnvAttack&#10;AmpEnvDecay&#10;AmpEnvSustain&#10;AmpEnvRelease&#10;AmpVel&#10;FiltEnvAmt&#10;FiltEnvAttack&#10;FiltEnvDecay&#10;FiltEnvSustain&#10;FiltEnvRelease&#10;LFOFreq&#10;LFOInitAmt&#10;LFOShape&#10;LFOSync&#10;LFODestOsc1&#10;LFODestOsc2&#10;LFODestPW&#10;LFODestFFreq&#10;LFODestFMode&#10;LFODestAmp&#10;AftertouchAmt&#10;AftertouchOsc1&#10;AftertouchOsc2&#10;AftertouchFFreq&#10;AftertouchFMode&#10;AftertouchAmp&#10;AftertouchLFOAmt&#10;EffectAType&#10;EffectAMix&#10;EffectAParam1&#10;EffectAParam2&#10;EffectASync&#10;EffectASyncRate&#10;EffectBType&#10;EffectBMix&#10;EffectBParam1&#10;EffectBParam2&#10;EffectBSync&#10;EffectBSyncRate&#10;EffectsOn&#10;PModFiltEnvAmt&#10;PModOsc2Amt&#10;PModOsc1&#10;PModShape1&#10;PModPW1&#10;PModFFreq&#10;PModFMode&#10;PModNormBP&#10;UnisonOn&#10;UnisonMode&#10;KeyPriority&#10;ArpOn&#10;ArpMode&#10;ArpRange&#10;ClockTimeSig&#10;ClockBPM"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="16 112 200 24"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbSearchOper1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="equals&#10;greater than&#10;less than&#10;not equals"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="232 112 112 24" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="0" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sldSearchValue1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Value"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="0" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="360 104 63 43" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchValueChanged"
             name="cmbSearchValue1" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Off&#10;On"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="360 112 138 24"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="85" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchParmChanged"
             name="cmbSearchParm2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="none&#10;Osc1Freq&#10;Osc1Sync&#10;Osc1Level&#10;Osc1Shape&#10;Osc1PW&#10;Osc2Freq&#10;Osc2FreqFine&#10;Osc2Level&#10;Osc2Shape&#10;Osc2PW&#10;Osc2LoFreq&#10;Osc2Kbd&#10;SubOctLevel&#10;GlideMode&#10;GlideOn&#10;GlideRate&#10;PitchBendRange&#10;NoiseLevel&#10;VintageAmt&#10;FiltFreq&#10;FiltRes&#10;FiltKbdTrack&#10;FiltVel&#10;FiltMode&#10;FiltBP&#10;ProgVolume&#10;PanSpread&#10;Distortion&#10;AmpEnvAmt&#10;AmpEnvAttack&#10;AmpEnvDecay&#10;AmpEnvSustain&#10;AmpEnvRelease&#10;AmpVel&#10;FiltEnvAmt&#10;FiltEnvAttack&#10;FiltEnvDecay&#10;FiltEnvSustain&#10;FiltEnvRelease&#10;LFOFreq&#10;LFOInitAmt&#10;LFOShape&#10;LFOSync&#10;LFODestOsc1&#10;LFODestOsc2&#10;LFODestPW&#10;LFODestFFreq&#10;LFODestFMode&#10;LFODestAmp&#10;AftertouchAmt&#10;AftertouchOsc1&#10;AftertouchOsc2&#10;AftertouchFFreq&#10;AftertouchFMode&#10;AftertouchAmp&#10;AftertouchLFOAmt&#10;EffectAType&#10;EffectAMix&#10;EffectAParam1&#10;EffectAParam2&#10;EffectASync&#10;EffectASyncRate&#10;EffectBType&#10;EffectBMix&#10;EffectBParam1&#10;EffectBParam2&#10;EffectBSync&#10;EffectBSyncRate&#10;EffectsOn&#10;PModFiltEnvAmt&#10;PModOsc2Amt&#10;PModOsc1&#10;PModShape1&#10;PModPW1&#10;PModFFreq&#10;PModFMode&#10;PModNormBP&#10;UnisonOn&#10;UnisonMode&#10;KeyPriority&#10;ArpOn&#10;ArpMode&#10;ArpRange&#10;ClockTimeSig&#10;ClockBPM"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="16 160 200 24" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbSearchOper2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="equals&#10;greater than&#10;less than&#10;not equals"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="232 160 112 24"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="0" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sldSearchValue2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Value"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="0" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="360 152 63 43"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchValueChanged"
             name="cmbSearchValue2" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="Off&#10;On"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="360 160 138 24" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="85" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchParmChanged"
             name="cmbSearchParm3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="none&#10;Osc1Freq&#10;Osc1Sync&#10;Osc1Level&#10;Osc1Shape&#10;Osc1PW&#10;Osc2Freq&#10;Osc2FreqFine&#10;Osc2Level&#10;Osc2Shape&#10;Osc2PW&#10;Osc2LoFreq&#10;Osc2Kbd&#10;SubOctLevel&#10;GlideMode&#10;GlideOn&#10;GlideRate&#10;PitchBendRange&#10;NoiseLevel&#10;VintageAmt&#10;FiltFreq&#10;FiltRes&#10;FiltKbdTrack&#10;FiltVel&#10;FiltMode&#10;FiltBP&#10;ProgVolume&#10;PanSpread&#10;Distortion&#10;AmpEnvAmt&#10;AmpEnvAttack&#10;AmpEnvDecay&#10;AmpEnvSustain&#10;AmpEnvRelease&#10;AmpVel&#10;FiltEnvAmt&#10;FiltEnvAttack&#10;FiltEnvDecay&#10;FiltEnvSustain&#10;FiltEnvRelease&#10;LFOFreq&#10;LFOInitAmt&#10;LFOShape&#10;LFOSync&#10;LFODestOsc1&#10;LFODestOsc2&#10;LFODestPW&#10;LFODestFFreq&#10;LFODestFMode&#10;LFODestAmp&#10;AftertouchAmt&#10;AftertouchOsc1&#10;AftertouchOsc2&#10;AftertouchFFreq&#10;AftertouchFMode&#10;AftertouchAmp&#10;AftertouchLFOAmt&#10;EffectAType&#10;EffectAMix&#10;EffectAParam1&#10;EffectAParam2&#10;EffectASync&#10;EffectASyncRate&#10;EffectBType&#10;EffectBMix&#10;EffectBParam1&#10;EffectBParam2&#10;EffectBSync&#10;EffectBSyncRate&#10;EffectsOn&#10;PModFiltEnvAmt&#10;PModOsc2Amt&#10;PModOsc1&#10;PModShape1&#10;PModPW1&#10;PModFFreq&#10;PModFMode&#10;PModNormBP&#10;UnisonOn&#10;UnisonMode&#10;KeyPriority&#10;ArpOn&#10;ArpMode&#10;ArpRange&#10;ClockTimeSig&#10;ClockBPM"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="16 208 200 24"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbSearchOper3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="equals&#10;greater than&#10;less than&#10;not equals"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="232 208 112 24" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="0" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sldSearchValue3" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Value"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="0" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="360 200 63 43" uiType="uiSlider"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="-1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchValueChanged"
             name="cmbSearchValue3" modulatorMin="0" modulatorValue="-1">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent=""
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="360 208 138 24"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="85" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchParmChanged"
             name="cmbSearchParm4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="none&#10;Osc1Freq&#10;Osc1Sync&#10;Osc1Level&#10;Osc1Shape&#10;Osc1PW&#10;Osc2Freq&#10;Osc2FreqFine&#10;Osc2Level&#10;Osc2Shape&#10;Osc2PW&#10;Osc2LoFreq&#10;Osc2Kbd&#10;SubOctLevel&#10;GlideMode&#10;GlideOn&#10;GlideRate&#10;PitchBendRange&#10;NoiseLevel&#10;VintageAmt&#10;FiltFreq&#10;FiltRes&#10;FiltKbdTrack&#10;FiltVel&#10;FiltMode&#10;FiltBP&#10;ProgVolume&#10;PanSpread&#10;Distortion&#10;AmpEnvAmt&#10;AmpEnvAttack&#10;AmpEnvDecay&#10;AmpEnvSustain&#10;AmpEnvRelease&#10;AmpVel&#10;FiltEnvAmt&#10;FiltEnvAttack&#10;FiltEnvDecay&#10;FiltEnvSustain&#10;FiltEnvRelease&#10;LFOFreq&#10;LFOInitAmt&#10;LFOShape&#10;LFOSync&#10;LFODestOsc1&#10;LFODestOsc2&#10;LFODestPW&#10;LFODestFFreq&#10;LFODestFMode&#10;LFODestAmp&#10;AftertouchAmt&#10;AftertouchOsc1&#10;AftertouchOsc2&#10;AftertouchFFreq&#10;AftertouchFMode&#10;AftertouchAmp&#10;AftertouchLFOAmt&#10;EffectAType&#10;EffectAMix&#10;EffectAParam1&#10;EffectAParam2&#10;EffectASync&#10;EffectASyncRate&#10;EffectBType&#10;EffectBMix&#10;EffectBParam1&#10;EffectBParam2&#10;EffectBSync&#10;EffectBSyncRate&#10;EffectsOn&#10;PModFiltEnvAmt&#10;PModOsc2Amt&#10;PModOsc1&#10;PModShape1&#10;PModPW1&#10;PModFFreq&#10;PModFMode&#10;PModNormBP&#10;UnisonOn&#10;UnisonMode&#10;KeyPriority&#10;ArpOn&#10;ArpMode&#10;ArpRange&#10;ClockTimeSig&#10;ClockBPM"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="16 256 200 24" uiType="uiCombo"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="3" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="cmbSearchOper4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent="equals&#10;greater than&#10;less than&#10;not equals"
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" uiType="uiCombo" componentRectangle="232 256 112 24"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="0" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="0" modulatorMute="0"
             modulatorExcludeFromSnapshot="0" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="-- None"
             name="sldSearchValue4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centred"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="Value"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="1"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiSliderStyle="RotaryVerticalDrag"
               uiSliderMin="0" uiSliderMax="0" uiSliderInterval="1" uiSliderDoubleClickEnabled="1"
               uiSliderDoubleClickValue="0" uiSliderValuePosition="4" uiSliderValueHeight="12"
               uiSliderValueWidth="35" uiSliderTrackCornerSize="5" uiSliderThumbCornerSize="3"
               uiSliderThumbWidth="0" uiSliderThumbHeight="0" uiSliderThumbFlatOnLeft="0"
               uiSliderThumbFlatOnRight="0" uiSliderThumbFlatOnTop="0" uiSliderThumbFlatOnBottom="0"
               uiSliderValueTextColour="FFFFFFFF" uiSliderValueBgColour="FF6068B0"
               uiSliderRotaryOutlineColour="FFB0C0FF" uiSliderRotaryFillColour="FFB0C0FF"
               uiSliderThumbColour="FF6068B0" uiSliderValueHighlightColour="FFB0C0FF"
               uiSliderValueOutlineColour="0xffffffff" uiSliderTrackColour="0xff0f0f0f"
               uiSliderIncDecButtonColour="FFB0C0FF" uiSliderIncDecTextColour="0xffffffff"
               uiSliderValueFont="&lt;Sans-Serif&gt;;12;0;0;0;0;1;3" uiSliderValueTextJustification="centred"
               uiSliderVelocitySensitivity="1" uiSliderVelocityThreshold="1"
               uiSliderVelocityOffset="0" uiSliderVelocityMode="0" uiSliderVelocityModeKeyTrigger="1"
               uiSliderSpringMode="0" uiSliderSpringValue="0" uiSliderMouseWheelInterval="1"
               uiSliderPopupBubble="0" uiType="uiSlider" componentRectangle="360 248 63 43"
               componentLayerUid="b3cff5473364010000d41535da7f0000"/>
  </modulator>
  <modulator modulatorVstExported="0" modulatorMax="-1" vstIndex="" modulatorIsStatic="0"
             modulatorGlobalVariable="-1" modulatorMuteOnStart="1" modulatorMute="1"
             modulatorExcludeFromSnapshot="1" modulatorValueExpression="modulatorValue"
             modulatorValueExpressionReverse="midiValue" modulatorControllerExpression="value"
             luaModulatorGetValueForMIDI="-- None" luaModulatorGetValueFromMIDI="-- None"
             modulatorLinkedToPanelProperty="-- None" modulatorLinkedToModulatorProperty="-- None"
             modulatorLinkedToModulator="-- None" modulatorLinkedToModulatorSource="1"
             modulatorLinkedToComponent="Modulator" modulatorBaseValue="0"
             modulatorCustomIndex="0" modulatorCustomName="" modulatorCustomIndexGroup="0"
             modulatorCustomNameGroup="" modulatorVstNameFormat="%n" luaModulatorValueChange="searchValueChanged"
             name="cmbSearchValue4" modulatorMin="0" modulatorValue="0">
    <midi midiMessageType="9" midiMessageChannelOverride="0" midiMessageChannel="1"
          midiMessageCtrlrNumber="1" midiMessageCtrlrValue="0" midiMessageMultiList=""
          midiMessageSysExFormula=""/>
    <component componentLabelPosition="top" componentLabelJustification="centredTop"
               componentLabelHeight="14" componentLabelWidth="0" componentLabelVisible="0"
               componentLabelAlwaysOnTop="1" componentSentBack="0" componentLabelColour="ffe0e0e0"
               componentLabelFont="&lt;Sans-Serif&gt;;12;1;0;0;0;1;3" componentVisibleName="parm"
               componentMouseCursor="2" componentGroupName="grpSearch" componentGroupped="1"
               componentSnapSize="0" componentIsLocked="1" componentDisabled="0"
               componentRadioGroupId="0" componentRadioGroupNotifyMidi="1" componentVisibility="0"
               componentEffect="0" componentEffectRadius="1" componentEffectColour="0xff000000"
               componentEffectOffsetX="0" componentEffectOffsetY="0" componentExcludedFromLabelDisplay="0"
               componentValueDecimalPlaces="0" componentLuaMouseMoved="-- None"
               componentLuaMouseDown="-- None" componentLuaMouseDrag="-- None"
               componentLuaMouseDoubleClick="-- None" uiComboArrowColour="FFFFFFFF"
               uiComboOutlineColour="FFB0C0FF" uiComboTextColour="FFFFFFFF"
               uiComboTextJustification="centredLeft" uiComboFont="&lt;Sans-Serif&gt;;14;0;0;0;0;1;3"
               uiComboMenuFont="&lt;Sans-Serif&gt;;16;0;0;0;0;1;3" uiComboButtonColour="FFB0C0FF"
               uiComboBgColour="FF6068B0" uiComboMenuBackgroundColour="FFB0C0FF"
               uiComboMenuFontColour="FFFFFFFF" uiComboMenuHighlightColour="ffadd8e6"
               uiComboMenuFontHighlightedColour="0xff232323" uiComboContent=""
               uiComboMenuBackgroundRibbed="1" uiComboButtonGradient="0" uiComboButtonGradientColour1="ff0000ff"
               uiComboButtonGradientColour2="ff00008b" uiComboButtonWidthOverride="0"
               uiComboButtonWidth="16" uiComboDynamicContent="0" uiComboSelectedId="-1"
               uiComboSelectedIndex="-1" componentLayerUid="b3cff5473364010000d41535da7f0000"
               componentRectangle="360 256 138 24" uiType="uiCombo"/>
  </modulator>
  <panelCustomData/>
</panel>
